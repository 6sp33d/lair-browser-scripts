function bulkRemoveHosts(r){var o=Session.get("projectId"),e=(Meteor.user().emails[0].address,Hosts.find({projectId:o}).fetch());count=0,e.forEach(function(i){r.includes(i.ipv4)&&(Meteor.call("removeHost",o,i._id,function(e){e?console.log("Error removing "+i.ipv4+". "+e):Meteor.call("removeHostFromIssues",o,i._id)}),count++)}),console.log("Total of "+count+" host(s) removed.")}function changeHostsToSpecifiedColorByServicesOrIssues(c,n,d){function a(t,o,i){return 0===o||t.status===i[o-1].status}function g(e,t){Hosts.update({_id:e},{$set:{status:t,lastModifiedBy:r}})}function p(t){return Services.find({projectId:h,hostId:t}).fetch()}function i(e){var t=Hosts.findOne({_id:e}).ipv4;return Issues.find({projectId:h,"hosts.ipv4":t}).fetch()}function e(e){if("services"===c)return p(e);if("issues"===c)return i(e);throw{name:"Incorrect servicesOrIssues Selection",message:"Incorrect servicesOrIssues selection: \""+c+"\" is not a valid servicesOrIssues for this function"}}var h=Session.get("projectId"),r=Meteor.user().emails[0].address,f=0,u=0;if(-1===StatusMap.indexOf(d))throw console.log("Lair Supserviceed colors: "+StatusMap),{name:"Wrong lairColor",message:"Provided lairColor: \""+d+"\" is not Lair compliant"};var t=Hosts.find({projectId:h}).fetch();if("all"===n)t.forEach(function(t){g(t._id,d)}),u=t.length;else if("none"===n)t.forEach(function(i){var t=i._id;0>=e(t).length&&(g(t,d),f++)}),u=f;else if(-1!==StatusMap.indexOf(n))t.forEach(function(o){var i=!1,l=o._id,s=e(l);i=0<s.length&&s[0].status===n&&s.every(a),i&&(g(l,d),f++),u=f});else if("same"===n)t.forEach(function(o){var t=!1,s=o._id;t=e(s).every(a),t&&(g(s,d),f++),u=f});else{if("diff"!==n)throw{name:"Incorrect statusOption Selection",message:"Incorrect statusOption selection: \""+n+"\" is not a valid statusOption for this function"};t.forEach(function(o){var t=!1,s=o._id;t=!e(s).every(a),t&&(g(s,d),f++),u=f})}console.log("Total of "+u+" host(s) updated")}function changeServicesRegexToSpecifiedColor(o,i){var r=Session.get("projectId"),s=Meteor.user().emails[0].address;if("lair-grey"!==i&&"lair-blue"!==i&&"lair-green"!==i&&"lair-orange"!==i&&"lair-red"!==i)return void console.log("Invalid color specified");var e=Services.find({projectId:r,service:{$regex:o}}).fetch();return 1>e.length?void console.log("No services found"):void(e.forEach(function(e){Services.update({_id:e._id},{$set:{status:i,lastModifiedBy:s}})}),console.log("Total of "+e.length+" service(s) updated to "+i+"."))}function changeServicesToSpecifiedColor(o,i){var r=Session.get("projectId"),s=Meteor.user().emails[0].address;if("lair-grey"!==i&&"lair-blue"!==i&&"lair-green"!==i&&"lair-orange"!==i&&"lair-red"!==i)return void console.log("Invalid color specified");var e=Services.find({projectId:r,service:o}).fetch();return 1>e.length?void console.log("No services found"):void(e.forEach(function(e){console.log("Updating: "+e.service+"/"+e.protocol),Services.update({_id:e._id},{$set:{status:i,last_modified_by:s}})}),console.log("Total of "+e.length+" service(s) updated"))}function changeServicesToColorByPort(o,i){var r=Session.get("projectId"),s=Meteor.user().emails[0].address;if("lair-grey"!==i&&"lair-blue"!==i&&"lair-green"!==i&&"lair-orange"!==i&&"lair-red"!==i)return void console.log("Invalid color specified");var e=Services.find({projectId:r,port:o}).fetch();return 1>e.length?void console.log("No services found"):void(e.forEach(function(e){Services.update({_id:e._id},{$set:{status:i,last_modifiedBy:s}})}),console.log("Total of "+e.length+" service(s) updated to "+i+"."))}function changeServicesToSpecifiedColorByProduct(o,i){var r=Session.get("projectId"),s=Meteor.user().emails[0].address;if("lair-grey"!==i&&"lair-blue"!==i&&"lair-green"!==i&&"lair-orange"!==i&&"lair-red"!==i)return void console.log("Invalid color specified");var e=Services.find({projectId:r,product:o}).fetch();return 1>e.length?void console.log("No services found"):void(e.forEach(function(e){Services.update({_id:e._id},{$set:{status:i,last_modifiedBy:s}})}),console.log("Total of "+e.length+" service(s) updated to "+i+"."))}function changeServicesToSpecifiedColor(o,i){var r=Session.get("projectId"),s=Meteor.user().emails[0].address;if("lair-grey"!==i&&"lair-blue"!==i&&"lair-green"!==i&&"lair-orange"!==i&&"lair-red"!==i)return void console.log("Invalid color specified");var e=Services.find({projectId:r,service:o}).fetch();return 1>e.length?void console.log("No services found"):void(e.forEach(function(e){Services.update({_id:e._id},{$set:{status:i,last_modifiedBy:s}})}),console.log("Total of "+e.length+" service(s) updated to "+i+"."))}function countHostServicesBycolor(o){var i={},r=Session.get("projectId");if(-1===StatusMap.indexOf(o))throw console.log("Lair Supserviceed colors: "+StatusMap),{name:"Wrong color",message:"Provided color: \""+o+"\" is not Lair compliant"};for(var s in Services.find({projectId:r,status:o}).fetch().forEach(function(t){s=Hosts.findOne({projectId:r,_id:t.hostId}),i.hasOwnProperty(s.ipv4)?i[s.ipv4]++:i[s.ipv4]=1}),i)console.log(s+" ("+i[s]+")")}function countHostServicesBycolor(o){var i={},r=Session.get("projectId");if(-1===StatusMap.indexOf(o))throw console.log("Lair Supserviceed colors: "+StatusMap),{name:"Wrong color",message:"Provided color: \""+o+"\" is not Lair compliant"};for(var s in Services.find({projectId:r,status:o}).fetch().forEach(function(t){s=Hosts.findOne({projectId:r,_id:t.hostId}),i.hasOwnProperty(s.ipv4)?i[s.ipv4]++:i[s.ipv4]=1}),i)console.log(s+" ("+i[s]+")")}function deleteHostsByCIDR(){function c(o,r){for(var i="00000000",e=parseInt(o[0],10).toString(2),c=e.length>=i.length?e:i.slice(0,i.length-e.length)+e,n=1;n<=o.length;n++)e=parseInt(o[n],10).toString(2),c+=e.length>=i.length?e:i.slice(0,i.length-e.length)+e;return c.slice(0,parseInt(r,10))}var o=Session.get("projectId"),t=Array.prototype.slice.call(arguments,0),s=Hosts.find({projectId:o}).fetch(),n={},d={},e=0;s.forEach(function(t){var o=t.ipv4.split(".");n[c(o,32)]=t.ipv4,d[t.ipv4]=t._id}),t.forEach(function(i){i=i.split("/");var r=i[0].split("."),a=c(r,i[1]);for(var t in n)t.slice(0,parseInt(i[1],10))===a&&(Meteor.call("removeHost",o,d[n[t]],function(i){i||Meteor.call("removeHostFromIssues",o,n[t])}),e++);console.log("Total of "+e+" host(s) removed.")})}function deleteHostsByStatus(e){var r=Session.get("projectId"),t=Hosts.find({projectId:r,status:e}).fetch();return 1>t.length?void console.log("No matching hosts found"):void(t.forEach(function(e){console.log("Removing "+e.ipv4),Meteor.call("removeHost",r,e._id,function(o){o||Meteor.call("removeHostFromIssues",r,e.ipv4)})}),console.log("Total of "+t.length+" host(s) removed."))}function deleteHostServicesByTool(i,r){var s=Session.get("projectId"),e=Hosts.findOne({projectId:s,ipv4:i});if(void 0===e)return void console.log("No matching host found");var t=Services.find({projectId:s,hostId:e._id,lastModifiedBY:r}).fetch();1>t.length&&console.log("No matching Services found"),t.forEach(function(e){console.log("Removing "+e.protocol+"/"+e.service),Meteor.call("removeService",s,e._id,function(){})}),console.log("Total of "+t.length+" service(s) removed.")}function deleteIssuesByStatus(e){var t=Session.get("projectId"),o=Issues.find({projectId:t,status:e}).fetch();return 1>o.length?void console.log("No matching Issues found"):void(o.forEach(function(o){console.log("Removing "+o.title),Meteor.call("removeIssue",t,o._id)}),console.log("Total of "+o.length+" Issue(s) removed."))}function deleteIssuesWithNoHosts(){var e=Session.get("projectId"),t=Issues.find({projectId:e,hosts:{$size:0}}).fetch();return 1>t.length?void console.log("No orphaned issues present"):void(t.forEach(function(t){console.log("Removing: "+t.title),Meteor.call("removeIssue",e,t._id,function(){})}),console.log("Total of "+t.length+" vuln(s) removed"))}function deleteServices(t,o,i){var r=Session.get("projectId");Services.find({projectId:r,port:t,protocol:o,service:i}).forEach(function(t){console.log("Removing Service : "+t._id+" "+t.port+"/"+t.protocol+" "+t.service),Meteor.call("removeService",r,t.hostId,t._id)})}function dumpIssueEvidence(){var t=Session.get("projectId");Issues.find({projectId:t}).fetch().forEach(function(t){console.log(t.title),console.log(t.evidence)})}function dumpServiceNotes(t,i){var o=Session.get("projectId"),r=new RegExp(t,"i"),s=Services.find({projectId:o,notes:{$elemMatch:{title:{$regex:t,$options:"i"}}}},{notes:1,hostId:1}).fetch(),l=_.pluck(s,"hostId");Hosts.find({_id:{$in:l}},{sort:{longIpv4Addr:1},ipv4:1}).fetch().forEach(function(t){""!==i&&i!==t.ipv4||(s=Services.find({hostId:t._id},{sort:{service:1},notes:1,service:1,protocol:1}).fetch(),s.forEach(function(o){o.notes.forEach(function(i){r.test(i.title)&&console.log(t.ipv4+":"+o.port+"/"+o.protocol+" - "+i.title+"\n"+i.content)})}))})}function filterHostsNoServices(){}function findNoteByRegex(e,t){var l=Session.get("projectId"),r=new RegExp(e,"i");("project"===t||"all"===t)&&(console.log("Project Notes"),Projects.findOne({_id:l},{notes:1}).notes.forEach(function(t){(r.test(t.title)||r.test(t.content))&&console.log("\t"+t.title)})),"host"!==t&&"all"!==t||(console.log("Host Notes"),Hosts.find({projectId:l,$or:[{notes:{$elemMatch:{title:{$regex:e,$options:"i"}}}},{notes:{$elemMatch:{content:{$regex:e,$options:"i"}}}}]},{notes:1}).fetch().forEach(function(e){e.notes.forEach(function(t){(r.test(t.title)||r.test(t.content))&&console.log("\t"+e.ipv4+" -> "+t.title)})})),"service"!==t&&"all"!==t||(console.log("Service Notes"),Services.find({projectId:l,$or:[{notes:{$elemMatch:{title:{$regex:e,$options:"i"}}}},{notes:{$elemMatch:{content:{$regex:e,$options:"i"}}}}]},{notes:1}).fetch().forEach(function(t){t.notes.forEach(function(o){if(r.test(o.title)||r.test(o.content)){var i=Hosts.findOne({projectId:l,_id:t.hostId});console.log("\t"+i.ipv4+" -> "+t.service.toString()+" -> "+o.title)}})})),"Issue"!==t&&"all"!==t||(console.log("Issue Notes"),Issues.find({projectId:l,$or:[{evidence:{$regex:e,$options:"i"}},{notes:{$elemMatch:{title:{$regex:e,$options:"i"}}}},{notes:{$elemMatch:{content:{$regex:e,$options:"i"}}}}]},{notes:1}).fetch().forEach(function(e){r.test(e.evidence)&&console.log("\t"+e.title+" -> Evidence Field"),e.notes.forEach(function(t){(r.test(t.title)||r.test(t.content))&&console.log("\t"+e.title+" -> "+t.title)})}))}function generateIssueBulkListByRegex(e){var l=Session.get("projectId"),t=Services.find({projectId:l,service:{$regex:e}}).fetch(),i=[];t.forEach(function(e){var t=Hosts.findOne({projectId:l,_id:e.hostId});i.push(t.ipv4+","+e.port+","+e.protocol)}),console.log(i.join("\n"))}function generatePortStringFromService(t){var o=Session.get("projectId"),i=Services.find({projectId:o,service:t}).fetch();return _.uniq(_.pluck(i,"port")).sort(function(e,t){return e-t}).join(",")}function generateUniquePortString(o){var i=Session.get("projectId"),r={projectId:i};void 0!==o&&(r.protocol=o);var e=Services.find(r).fetch();return _.uniq(_.pluck(e,"port")).sort(function(e,t){return e-t}).join(",")}function generateURLList(){var i=Session.get("projectId"),e=Hosts.find({projectId:i}).fetch();if(!e)return void console.log("No hosts found");var r=0,n=[];e.forEach(function(s){var l=s.hostnames,o=s._id,t={projectId:i,hostId:o};t.service={$regex:"web|www|ssl|http|https",$options:"i"},Services.find(t).fetch().forEach(function(o){var t="http://";o.service.match(/(ssl|https)/gi)&&(t="https://"),r++,n.push(t+s.ipv4+":"+o.port),l.forEach(function(i){r++,n.push(t+i+":"+o.port)})})}),console.log(n.join("\n")),console.log(r+" URL(s) generated")}function generateWebDiscoTargetList(){var l=Session.get("projectId"),e=Hosts.find({projectId:l}).fetch();if(1>e.length)return void console.log("No hosts found");var c=0;e.forEach(function(i){var s=i.hostnames,o=i._id,t={projectId:l,hostId:o};t.service={$regex:"web|www|ssl|http|https",$options:"i"};var e=Services.find(t).fetch(),n=[];e.forEach(function(e){var t="http";e.service.match(/(ssl|https)/g)&&(t="https"),e.notes.forEach(function(o){o.content.match(/SSL/)&&(t="https")}),c++,n.push(t+","+i.ipv4+","+e.port+","),s.forEach(function(r){c++,n.push(t+","+i.ipv4+","+e.port+","+r)})})}),console.log(urls.join("\n")),console.log(c+" URL(s) generated")}function getHostsByCIDR(){function r(o,r){for(var i="00000000",e=parseInt(o[0],10).toString(2),c=e.length>=i.length?e:i.slice(0,i.length-e.length)+e,n=1;n<=o.length;n++)e=parseInt(o[n],10).toString(2),c+=e.length>=i.length?e:i.slice(0,i.length-e.length)+e;return c.slice(0,parseInt(r,10))}var t=Array.prototype.slice.call(arguments,0),o=Hosts.find({projectId:Session.get("projectId")}).fetch(),s={};o.forEach(function(t){var o=t.ipv4.split(".");s[r(o,32)]=t.ipv4}),t.forEach(function(e){e=e.split("/");var i=e[0].split("."),l=r(i,e[1]);for(var c in s)c.slice(0,parseInt(e[1],10))===l&&console.log(s[c])})}function getPersonByDepartmentRegex(t){if(t&&"object"!=typeof t)return console.log("Department regex can not be a string, must be an object");var o=Session.get("projectId"),i=People.find({projectId:o,department:{$regex:t}}).fetch();i.forEach(function(t){console.log("'"+t.principalName+"','"+t.department+"','"+t.emails.join(" ")+"'")}),console.log("returned: "+i.len()+" results")}function getPersonEmail(){var e=Session.get("projectId"),t=People.find({projectId:e}).fetch();t.forEach(function(t){console.log("'"+t.principalName+"','"+t.department+"','"+t.emails.join(" ")+"'")}),console.log("returned: "+t.length+" results")}function greyHostsNoServicesGreen(){var t=Session.get("projectId"),o=Meteor.user().emails[0].address,i=Hosts.find({projectId:t,status:"lair-grey"}).fetch();if(void 0===i||0===i.length)return void console.log("No hosts found");var r=0;i.forEach(function(e){0===Services.find({hostId:e._id,port:{$gt:0}}).count()&&(r++,console.log("Updating: "+e.ipv4),Hosts.update({_id:e._id},{$set:{status:"lair-green",last_modified_by:o}}))}),console.log(r+" host(s) updated")}function hostnamesToNessus(){var t=Hosts.find({projectId:Session.get("projectId")}).fetch(),r=[];t.forEach(function(t){var o=t.ipv4;t.hostnames.forEach(function(t){r.push(t+"["+o+"]")})}),r.forEach(function(t){console.log(t)})}function iisOsProfiler(){var r=Session.get("projectId");Services.find({projectId:r,product:{$regex:/IIS\s(httpd\s)?\d+\.\d+/,$options:"i"}}).fetch().forEach(function(c){var e=c.product,o=e.match(/\d+\.\d+/);if(null!==o){var s=parseFloat(o[0]);if(!isNaN(s)){var t=Models.os();t.tool="IIS OS Profiler",t.weight=90,6>s?t.fingerprint="Microsoft Windows Server 2000":7>s?t.fingerprint="Microsoft Windows Server 2003":8>s?t.fingerprint="Microsoft Windows Server 2008":9>s?t.fingerprint="Microsoft Windows Server 2012":11>s&&(t.fingerprint="Microsoft Windows Server 2016"),""!==t.fingerprint&&Meteor.call("setOs",r,c.hostId,t.tool,t.fingerprint,t.weight,function(o){o?console.log("Error generating OS for",c.hostId,o):console.log("Created new OS",t.fingerprint,"for",c.hostId)})}}})}function listHostsByIssueTitle(t){var o=Session.get("projectId"),i=Issues.findOne({projectId:o,title:t}),r="";return i?void(i.hosts.forEach(function(t){console.log(t.ipv4+":"+t.port+"/"+t.protocol),r+=t.ipv4+", "}),console.log("RHOSTS: "+r.slice(0,-2))):void console.log("Issue not found")}function listHostsByIssueTitleRegex(t){var o=Session.get("projectId"),i=Issues.find({projectId:o,title:{$regex:t}}).fetch(),r="";return 1>i.length?void console.log("No issues found"):void i.forEach(function(t){console.log(t.title),t.hosts.forEach(function(t){console.log(t.ipv4+":"+t.port+"/"+t.protocol),r+=t.ipv4+", "}),console.log("RHOSTS: "+r.slice(0,-2)),r=""})}function listHostByTag(t){Hosts.find({projectId:Session.get("projectId"),tags:t}).fetch().forEach(function(t){console.log(t.ipv4)})}function listHostServicesBycolor(t){var e=Session.get("projectId");if(-1===StatusMap.indexOf(t))throw console.log("Lair Supserviceed colors: "+StatusMap),{name:"Wrong color",message:"Provided color: \""+t+"\" is not Lair compliant"};Services.find({projectId:e,status:t}).fetch().forEach(function(o){var i=Hosts.findOne({projectId:e,_id:o.hostId});console.log(i.ipv4+":"+o.port+"/"+o.protocol)})}function listHostServicesByServiceRegex(e){var r=Session.get("projectId"),t=Services.find({projectId:r,service:{$regex:e}}).fetch();return 1>t.length?void console.log("No services found"):void t.forEach(function(e){var o=Hosts.findOne({projectId:r,_id:e.hostId});console.log(o.ipv4+":"+e.port+"/"+e.protocol)})}function listUnknownOpenServices(l,i){var s=Session.get("projectId"),e=[],c=[],d=[];if(Hosts.find({projectId:s}).fetch().forEach(function(t){Services.find({projectId:s,hostId:t._id}).fetch().forEach(function(o){0<o.port&&("product"===l?"unknown"===o.product.toLowerCase()&&(e.push(t.ipv4),"tcp"===o.protocol?c.push(o.port):"udp"===o.protocol&&d.push(o.port)):"service"===l?"unknown"===o.service.toLowerCase()&&(e.push(t.ipv4),"tcp"===o.protocol?c.push(o.port):"udp"===o.protocol&&d.push(o.port)):"both"==l&&("unknown"!==o.service.toLowerCase()&&"unknown"!==o.product.toLowerCase()||(e.push(t.ipv4),"tcp"===o.protocol?c.push(o.port):"udp"===o.protocol&&d.push(o.port))))}),"nmap"===i&&(0<c.length&&0<d.length?console.log("nmap -v -sV --version-all -sS -sU "+t.ipv4+" -p T:"+c.toString()+",U:"+d.toString()):0<c.length?console.log("nmap -v -sV --version-all -sS "+t.ipv4+" -p "+c.toString()):0<d.length&&console.log("nmap -v -sV --version-all -sU "+t.ipv4+" -p "+d.toString()),c=[],d=[]),"hostAndPort"===i&&(0<c.length&&c.forEach(function(o){console.log(t.ipv4+":"+o.toString())}),0<d.length&&d.forEach(function(o){console.log(t.ipv4+":"+o.toString())}))}),(0<c.length||0<d.length)&&"list"===i){var t=c.filter(function(e,t){return c.indexOf(e)===t}),o=d.filter(function(e,t){return d.indexOf(e)===t});console.log("Hosts:"),console.log(e.toString()),console.log("TCP Services:"),console.log(t.sort(function(e,t){return e-t}).toString()),console.log("UDP Services:"),console.log(o.sort(function(e,t){return e-t}).toString())}}function getHostList(e){for(var t="",r=0;r<e.hosts.length;r++)t+=e.hosts[r].ipv4+",";return t+"\n"}function mergeIssuesByTitle(n,d,a){function e(e){m.forEach(function(t){Meteor.call("addIssueNote",g,e,t.title,t.content)}),$.forEach(function(t){Meteor.call("addHostToIssue",g,e,t.ipv4,t.port,t.protocol)}),I.forEach(function(t){Meteor.call("addCVE",g,e,t)}),v()}function v(){o.forEach(function(t){Meteor.call("removeIssue",g,t._id)})}function t(e){for(var t,r={},s=[],l=0,n=e.length;l<n;++l)t=JSON.stringify(e[l]),r.hasOwnProperty(t)||(r[t]=!0,s.push(e[l]));return s}if("object"!=typeof n)return console.log("Issue regex can not be a string, must be a object");if("string"!=typeof d)return console.log("Invalid title");if("number"!=typeof a)return console.log("Invalid cvss. Variable must be a number");var g=Session.get("projectId"),o=Issues.find({projectId:g,title:{$regex:n}}).fetch();if(1>o.length)return console.log("Did not find any issues with the given regex");var r=Issues.findOne({projectId:g,title:d});void 0!==r&&(o.push(r),Meteor.call("removeIssue",g,r._id)),console.log("Going to merge "+o.length+" issues");var i="",s="",j="",m=[],E=[],S=[];o.forEach(function(t){issue_hosts=getHostList(t),i+="\n\nFrom "+t.title+"\nAffected Hosts: "+issue_hosts+t.description,s+="\n\nFrom "+t.title+"\nAffected Hosts: "+issue_hosts+t.solution,j+="\n\nFrom "+t.title+"\nAffected Hosts: "+issue_hosts+t.evidence,m=m.concat(t.notes),E=E.concat(t.cves),S=S.concat(t.hosts)});var $=t(S),I=t(E);return Meteor.call("createIssue",g,d,a,i,j,s,function(t,o){t?(console.log("Error: could not create new Issue",t.message),r&&console.log("Looks like you lost",r.title)):e(o)}),console.log("Complete")}function mergeIssues(r,s,a,e,t,o,p){function h(e){N.forEach(function(t){Meteor.call("addIssueNote",c,e,t.title,t.content)}),L.forEach(function(t){Meteor.call("addHostToIssue",c,e,t.ipv4,t.port,t.protocol)}),x.forEach(function(t){Meteor.call("addCVE",c,e,t)}),T.forEach(function(t){Meteor.call("addReference",c,e,t.link,t.name)}),f()}function f(){console.log("Removing Issues"),n.forEach(function(t){Meteor.call("removeIssue",c,t._id)})}function l(e){for(var t,r={},s=[],l=0,n=e.length;l<n;++l)t=JSON.stringify(e[l]),r.hasOwnProperty(t)||(r[t]=!0,s.push(e[l]));return s}if("object"!=typeof r)return console.log("Issue regex can not be a string, must be a object");if("string"!=typeof t)return console.log("Invalid title");if("string"!=typeof o)return console.log("Invalid cvss. Variable must be a string");var c=Session.get("projectId"),n=Issues.find({projectId:c,title:{$regex:r},cvss:{$gte:s,$lte:a},"hosts.ipv4":{$regex:e}}).fetch();if(1>n.length)return console.log("Did not find any issues with the given regex");var d=0;if(n.sort(function(e,t){return e.cvss>t.cvss?-1:e.cvss<t.cvss?1:0}),n.forEach(function(t){console.log("CVSS: "+t.cvss+" - Hosts: "+t.hosts.length+" - Title: "+t.title),t.cvss>d&&(d=t.cvss)}),console.log("Total found: "+n.length+" Highest CVSS: "+d),p){"max"===o&&(o=d);var v=Issues.findOne({projectId:c,title:t});void 0!==v&&(n.push(v),Meteor.call("removeIssue",c,v._id)),console.log("Going to merge "+n.length+" issues");var u="",$="",w="",N=[],T=[],M=[],H=[],C=[];n.forEach(function(t){u=u+"CVSS: "+t.cvss+" - Hosts: "+t.hosts.length+" - Title: "+t.title+"\n",$="",w="",T=T.concat(t.references),N=N.concat(t.notes),M=M.concat(t.cves),H=H.concat(t.hosts),C=C.concat(t.files)});var L=l(H),x=l(M);return Meteor.call("createIssue",c,t,o,u,w,$,function(e,t){e?(console.log("Error: could not create new Issue",e.message),v&&console.log("Looks like you lost",v.title)):h(t)}),console.log("Complete")}}function negateHostsByCIDR(){function r(o,r){for(var i="00000000",e=parseInt(o[0],10).toString(2),c=e.length>=i.length?e:i.slice(0,i.length-e.length)+e,n=1;n<=o.length;n++)e=parseInt(o[n],10).toString(2),c+=e.length>=i.length?e:i.slice(0,i.length-e.length)+e;return c.slice(0,parseInt(r,10))}var o=Array.prototype.slice.call(arguments,0),i=Hosts.find({projectId:Session.get("projectId")}).fetch(),s={};for(var e in i.forEach(function(t){var o=t.ipv4.split(".");s[r(o,32)]=t.ipv4}),o.forEach(function(e){e=e.split("/");var l=e[0].split("."),c=r(l,e[1]);for(var i in s)i.slice(0,parseInt(e[1],10))===c&&delete s[i]}),s)console.log(s[e])}function niktoHostList(e,n){function o(e,o){var i=Hosts.findOne({projectId:s,_id:e});i.ipv4+":"+o in r||(r[i.ipv4+":"+o]=!0),n&&i.hostnames.forEach(function(t){!n.test(t)||t+":"+o in r||(r[t+":"+o]=!0)})}if(n&&"object"!=typeof n)return console.log("Domain regex can not be a string, must be an object");var r={},s=Session.get("projectId");for(var i in e.forEach(function(e){var t=[];if("object"==typeof e)t=Services.find({projectId:s,service:{$regex:e}}).fetch(),t.forEach(function(t){o(t.hostId,t.port)});else if("string"==typeof e)for(var r=e.split("-"),i=parseInt(r[0],10);i<=parseInt(r[1],10);i++)t=Services.find({projectId:s,service:i}).fetch(),t.forEach(function(t){o(t.hostId,t.port)});else{var l=Services.findOne({projectId:s,service:e});o(l.hostId,e.port)}}),r)console.log(i)}function niktoTopFindings(e,r){var s={},i=Session.get("projectId"),l=["(.*might be interesting.*)","(.*Public HTTP Methods:.*PUT.*)","(.*[Ww]eb[Dd]av.*)","(.*Directory indexing found.*)","(.*default file found.*)","(.*Server leaks.*IP.*)","(.*OSVDBID:.*)"];if(0<e.length&&(l=e),Services.find({projectId:i}).fetch().forEach(function(t){var c=Hosts.findOne({projectId:i,_id:t.hostId});t.notes.forEach(function(n){if(/Nikto/.test(n.title)){var t=n.title.match(/\(.*\)/);if(r){var o=new RegExp(l.join("|")+"\\n","g"),e=n.content.match(o);e&&(s[c.ipv4+" "+t]||(s[c.ipv4+" "+t]=[]),s[c.ipv4+" "+t].push(e.join("")))}else console.log(c.ipv4+" "+t),console.log(n.content)}})}),r)for(var t in s)console.log(t),console.log(s[t].join(""))}function NormalizeProtocols(){var t=Session.get("projectId"),o=Meteor.user().emails[0].address,i=Services.find({projectId:t}).fetch();if(1>i.length)return void console.log("No services found");var r=0;i.forEach(function(e){e.protocol!=e.protocol.toLowerCase()&&(Services.update({_id:e._id},{$set:{protocol:e.protocol.toLowerCase(),last_modifiedBy:o}}),r++)}),console.log("Total of "+r+" service(s) updated.")}function NormalizeUnknownProducts(){var t=Session.get("projectId"),o=Meteor.user().emails[0].address,i=Services.find({projectId:t}).fetch();if(1>i.length)return void console.log("No services found");var r=0;i.forEach(function(e){"unknown"==e.product.toLowerCase()&&(Services.update({_id:e._id},{$set:{product:"",last_modifiedBy:o}}),r++)}),console.log("Total of "+r+" service(s) updated.")}function removeHostnamesByPattern(e){Hosts.find({projectId:Session.get("projectId")}).fetch().forEach(function(t){var r=[];t.hostnames.forEach(function(t){return t.includes(e)?void console.log("removing "+t):void r.push(t)}),Hosts.update({_id:t._id},{$set:{hostnames:r,lastModifiedBy:Meteor.user().emails[0].address}})})}function removeIPBasedHostnames(){Hosts.find({projectId:Session.get("projectId")}).fetch().forEach(function(t){var e=t.ipv4,i=[];t.hostnames.forEach(function(r){if(r.includes(e))return void console.log("removing "+r);if(r.includes(e.replace(/\./g,"_")))return void console.log("removing "+r);if(r.includes(e.replace(/\./g,"-")))return void console.log("removing "+r);var t=e.split(".").reverse().join(".");return r.includes(t)?void console.log("removing "+r):r.includes(t.replace(/\./g,"_"))?void console.log("removing "+r):r.includes(t.replace(/\./g,"-"))?void console.log("removing "+r):void i.push(r)}),Hosts.update({_id:t._id},{$set:{hostnames:i,lastModifiedBy:Meteor.user().emails[0].address}})})}function removePort0ServicesNoReference(){var o=Session.get("projectId"),r=[],i=[],s=[];Hosts.find({projectId:o}).fetch().forEach(function(e){e._id,Services.find({projectId:o,hostId:e._id}).fetch().forEach(function(i){if(0>=i.port&&1>i.notes){var t={ip:e.ipv4,service:i};r.push(t)}})}),Issues.find({projectId:o}).fetch().forEach(function(t){t.hosts.forEach(function(e){if(0==e.port)for(var t=0;t<r.length;t++)r[t].ip==e.ipv4&&e.protocol==r[t].service.protocol&&i.push(r[t].service._id)})});for(var t=0;t<r.length;t++){for(var l=0;l<i.length;l++)r[t].service._id,i[l];s.push(r[t].service)}console.log("Removing "+s.length+" out of "+r.length+" port 0 services");for(var t=0;t<s.length;t++)console.log("Removing ServiceID: "+s[t]._id),Meteor.call("removeService",o,s[t].hostId,s[t]._id,function(){})}function searchServiceNoteContent(t,r){var s=Session.get("projectId"),l=new RegExp(t,"i"),c=new RegExp(r,"g"),o=[];Services.find({projectId:s,notes:{$elemMatch:{title:{$regex:t,$options:"i"}}}},{notes:1,hostId:1}).fetch().forEach(function(t){t.notes.forEach(function(t){l.test(t.title)&&o.push.apply(o,t.content.match(c))})}),console.log(function(o){for(var r={},i=[],e=0,l=o.length;e<l;++e)r.hasOwnProperty(o[e])||(i.push(o[e]),r[o[e]]=1);return i}(o).join("\n"))}function servicesToColorByHosts(i,n,s){var t=Session.get("projectId"),l=(Meteor.user().emails[0].address,0),d={"lair-red":4,"lair-orange":3,"lair-blue":2,"lair-green":0,"lair-grey":0};if(-1===StatusMap.indexOf(s))throw console.log("Lair Supserviceed colors: "+StatusMap),{name:"Wrong Color",message:"Provided color: \""+s+"\" is not Lair compliant"};i.forEach(function(o){var i=Hosts.findOne({projectId:t,ipv4:o}),r=Services.find({hostId:i._id,port:n}).fetch();1>r.length||r.forEach(function(r){console.log("Updating: "+o+":"+r.port+"/"+r.protocol),Meteor.call("setPortStatus",t,r._id,s),d[s]>d[i.status]&&(console.log("Updating: "+o+" status \""+s+"\""),Meteor.call("setHostStatus",t,i._id,s)),l++})}),console.log(l+" service(s) updated")}function setGlobalServiceByPort(o,i,r){var e=Session.get("projectId");Services.find({projectId:e,port:o,protocol:i,service:{$ne:r}}).forEach(function(t){Meteor.call("setServiceService",e,t._id,r,function(t){t||console.log("Modified service successfully")})})}function setHostOsByOsRegex(e,i,r){var s=Session.get("projectId"),t=Hosts.find({projectId:s,"os.fingerprint":{$regex:e}}).fetch();return 1>t.length?void console.log("No hosts found"):void t.forEach(function(e){Meteor.call("setOs",s,e._id,"Manual",i,r,function(o){return o?void console.log("Unable to update host "+e.ipv4):void console.log("Updated host "+e.ipv4)})})}function setHostServiceByPort(t,i,r,s){var l=Session.get("projectId"),t=Hosts.findOne({projectId:l,ipv4:t});Services.find({projectId:l,hostId:t._id,port:{$in:i},protocol:r,service:{$ne:s}}).forEach(function(t){Meteor.call("setServiceService",l,t._id,s,function(t){t||console.log("Modified service successfully")})})}function tagHostsByCIDR(e,t){function r(o,r){for(var i="00000000",e=parseInt(o[0],10).toString(2),c=e.length>=i.length?e:i.slice(0,i.length-e.length)+e,n=1;n<=o.length;n++)e=parseInt(o[n],10).toString(2),c+=e.length>=i.length?e:i.slice(0,i.length-e.length)+e;return c.slice(0,parseInt(r,10))}var s=Hosts.find({projectId:Session.get("projectId")}).fetch(),c={};s.forEach(function(e){var t=e.ipv4.split(".");c[r(t,32)]=e}),cidr=t.split("/");var t=cidr[0].split("."),n=r(t,cidr[1]);for(var o in c)o.slice(0,parseInt(cidr[1],10))===n&&(!function(e,t){check(e,Matchers.isObjectId),check(t,Matchers.isNonEmptyString),Hosts.update({_id:e},{$addToSet:{tags:t},$set:{lastModifiedBy:Meteor.user().emails[0].address}})}(c[o]._id,e),console.log(c[o]._id,e))}function uniqueServicesByHostsCIDR(){function i(o,r){for(var i="00000000",e=parseInt(o[0],10).toString(2),c=e.length>=i.length?e:i.slice(0,i.length-e.length)+e,n=1;n<=o.length;n++)e=parseInt(o[n],10).toString(2),c+=e.length>=i.length?e:i.slice(0,i.length-e.length)+e;return c.slice(0,parseInt(r,10))}var s=Session.get("projectId"),l=Array.prototype.slice.call(arguments,0),e=Hosts.find({projectId:s}).fetch(),c={},n={},d=[];e.forEach(function(t){var o=t.ipv4.split(".");c[i(o,32)]=t.ipv4,n[t.ipv4]=t._id}),l.forEach(function(e){e=e.split("/");var r=e[0].split("."),s=i(r,e[1]);for(var l in c)l.slice(0,parseInt(e[1],10))===s&&d.push(n[c[l]])});var t=Services.find({projectId:s,hostId:{$in:d}}).fetch();return _.uniq(_.pluck(t,"port")).sort(function(e,t){return e-t}).join(",")}function bulkRemoveHosts(t){var o=Session.get("projectId"),i=Meteor.user().emails[0].address,r=Hosts.find({projectId:o}).fetch();count=0,r.forEach(function(i){t.includes(i.ipv4)&&(Meteor.call("removeHost",o,i._id,function(e){e?console.log("Error removing "+i.ipv4+". "+e):Meteor.call("removeHostFromIssues",o,i._id)}),count++)}),console.log("Total of "+count+" host(s) removed.")}function changeHostsToSpecifiedColorByServicesOrIssues(l,c,n){function d(t,o,i){return 0===o||t.status===i[o-1].status}function a(i,t){Hosts.update({_id:i},{$set:{status:t,lastModifiedBy:e}})}function g(t){return Services.find({projectId:f,hostId:t}).fetch()}function p(e){var t=Hosts.findOne({_id:e}).ipv4;return Issues.find({projectId:f,"hosts.ipv4":t}).fetch()}function h(e){if("services"===l)return g(e);if("issues"===l)return p(e);throw{name:"Incorrect servicesOrIssues Selection",message:"Incorrect servicesOrIssues selection: \""+l+"\" is not a valid servicesOrIssues for this function"}}var f=Session.get("projectId"),e=Meteor.user().emails[0].address,v=0,I=0;if(-1===StatusMap.indexOf(n))throw console.log("Lair Supserviceed colors: "+StatusMap),{name:"Wrong lairColor",message:"Provided lairColor: \""+n+"\" is not Lair compliant"};var t=Hosts.find({projectId:f}).fetch();if("all"===c)t.forEach(function(t){a(t._id,n)}),I=t.length;else if("none"===c)t.forEach(function(t){var i=t._id,o=h(i).length;0>=o&&(a(i,n),v++)}),I=v;else if(-1!==StatusMap.indexOf(c))t.forEach(function(e){var o=!1,r=e._id,s=h(r);o=0<s.length&&s[0].status===c&&s.every(d),o&&(a(r,n),v++),I=v});else if("same"===c)t.forEach(function(e){var t=!1,o=e._id,r=h(o);t=r.every(d),t&&(a(o,n),v++),I=v});else if("diff"===c)t.forEach(function(e){var t=!1,o=e._id,r=h(o);t=!r.every(d),t&&(a(o,n),v++),I=v});else throw{name:"Incorrect statusOption Selection",message:"Incorrect statusOption selection: \""+c+"\" is not a valid statusOption for this function"};console.log("Total of "+I+" host(s) updated")}function changeServicesRegexToSpecifiedColor(o,i){var r=Session.get("projectId"),s=Meteor.user().emails[0].address;if("lair-grey"!==i&&"lair-blue"!==i&&"lair-green"!==i&&"lair-orange"!==i&&"lair-red"!==i)return void console.log("Invalid color specified");var e=Services.find({projectId:r,service:{$regex:o}}).fetch();return 1>e.length?void console.log("No services found"):void(e.forEach(function(e){Services.update({_id:e._id},{$set:{status:i,lastModifiedBy:s}})}),console.log("Total of "+e.length+" service(s) updated to "+i+"."))}function changeServicesToColorByPort(o,i){var r=Session.get("projectId"),s=Meteor.user().emails[0].address;if("lair-grey"!==i&&"lair-blue"!==i&&"lair-green"!==i&&"lair-orange"!==i&&"lair-red"!==i)return void console.log("Invalid color specified");var e=Services.find({projectId:r,port:o}).fetch();return 1>e.length?void console.log("No services found"):void(e.forEach(function(e){Services.update({_id:e._id},{$set:{status:i,last_modifiedBy:s}})}),console.log("Total of "+e.length+" service(s) updated to "+i+"."))}function changeServicesToSpecifiedColor(o,i){var r=Session.get("projectId"),s=Meteor.user().emails[0].address;if("lair-grey"!==i&&"lair-blue"!==i&&"lair-green"!==i&&"lair-orange"!==i&&"lair-red"!==i)return void console.log("Invalid color specified");var e=Services.find({projectId:r,service:o}).fetch();return 1>e.length?void console.log("No services found"):void(e.forEach(function(e){Services.update({_id:e._id},{$set:{status:i,last_modifiedBy:s}})}),console.log("Total of "+e.length+" service(s) updated to "+i+"."))}function changeServicesToSpecifiedColorByProduct(o,i){var r=Session.get("projectId"),s=Meteor.user().emails[0].address;if("lair-grey"!==i&&"lair-blue"!==i&&"lair-green"!==i&&"lair-orange"!==i&&"lair-red"!==i)return void console.log("Invalid color specified");var e=Services.find({projectId:r,product:o}).fetch();return 1>e.length?void console.log("No services found"):void(e.forEach(function(e){Services.update({_id:e._id},{$set:{status:i,last_modifiedBy:s}})}),console.log("Total of "+e.length+" service(s) updated to "+i+"."))}function changeServicesToSpecifiedColor(o,i){var r=Session.get("projectId"),s=Meteor.user().emails[0].address;if("lair-grey"!==i&&"lair-blue"!==i&&"lair-green"!==i&&"lair-orange"!==i&&"lair-red"!==i)return void console.log("Invalid color specified");var e=Services.find({projectId:r,service:o}).fetch();return 1>e.length?void console.log("No services found"):void(e.forEach(function(e){console.log("Updating: "+e.service+"/"+e.protocol),Services.update({_id:e._id},{$set:{status:i,last_modified_by:s}})}),console.log("Total of "+e.length+" service(s) updated"))}function countHostServicesBycolor(o){var i={},r=Session.get("projectId");if(-1===StatusMap.indexOf(o))throw console.log("Lair Supserviceed colors: "+StatusMap),{name:"Wrong color",message:"Provided color: \""+o+"\" is not Lair compliant"};var s=Services.find({projectId:r,status:o}).fetch();for(var l in s.forEach(function(e){l=Hosts.findOne({projectId:r,_id:e.hostId}),i.hasOwnProperty(l.ipv4)?i[l.ipv4]++:i[l.ipv4]=1}),i)console.log(l+" ("+i[l]+")")}function countHostServicesBycolor(o){var i={},r=Session.get("projectId");if(-1===StatusMap.indexOf(o))throw console.log("Lair Supserviceed colors: "+StatusMap),{name:"Wrong color",message:"Provided color: \""+o+"\" is not Lair compliant"};var s=Services.find({projectId:r,status:o}).fetch();for(var l in s.forEach(function(e){l=Hosts.findOne({projectId:r,_id:e.hostId}),i.hasOwnProperty(l.ipv4)?i[l.ipv4]++:i[l.ipv4]=1}),i)console.log(l+" ("+i[l]+")")}function deleteHostServicesByTool(i,r){var s=Session.get("projectId"),e=Hosts.findOne({projectId:s,ipv4:i});if("undefined"==typeof e)return void console.log("No matching host found");var t=Services.find({projectId:s,hostId:e._id,lastModifiedBY:r}).fetch();1>t.length&&console.log("No matching Services found"),t.forEach(function(e){console.log("Removing "+e.protocol+"/"+e.service),Meteor.call("removeService",s,e._id,function(){})}),console.log("Total of "+t.length+" service(s) removed.")}function deleteHostsByCIDR(){function c(o,r){for(var i="00000000",e=parseInt(o[0],10).toString(2),c=e.length>=i.length?e:i.slice(0,i.length-e.length)+e,n=1;n<=o.length;n++)e=parseInt(o[n],10).toString(2),c+=e.length>=i.length?e:i.slice(0,i.length-e.length)+e;return c.slice(0,parseInt(r,10))}var o=Session.get("projectId"),t=Array.prototype.slice.call(arguments,0),s=Hosts.find({projectId:o}).fetch(),n={},d={},e=0;s.forEach(function(t){var o=t.ipv4.split(".");n[c(o,32)]=t.ipv4,d[t.ipv4]=t._id}),t.forEach(function(i){i=i.split("/");var r=i[0].split("."),a=c(r,i[1]);for(var t in n)t.slice(0,parseInt(i[1],10))===a&&(Meteor.call("removeHost",o,d[n[t]],function(i){i||Meteor.call("removeHostFromIssues",o,n[t])}),e++);console.log("Total of "+e+" host(s) removed.")})}function deleteHostsByStatus(e){var r=Session.get("projectId"),t=Hosts.find({projectId:r,status:e}).fetch();return 1>t.length?void console.log("No matching hosts found"):void(t.forEach(function(e){console.log("Removing "+e.ipv4),Meteor.call("removeHost",r,e._id,function(o){o||Meteor.call("removeHostFromIssues",r,e.ipv4)})}),console.log("Total of "+t.length+" host(s) removed."))}function deleteIssuesByStatus(e){var t=Session.get("projectId"),o=Issues.find({projectId:t,status:e}).fetch();return 1>o.length?void console.log("No matching Issues found"):void(o.forEach(function(o){console.log("Removing "+o.title),Meteor.call("removeIssue",t,o._id)}),console.log("Total of "+o.length+" Issue(s) removed."))}function deleteIssuesWithNoHosts(){var e=Session.get("projectId"),t=Issues.find({projectId:e,hosts:{$size:0}}).fetch();return 1>t.length?void console.log("No orphaned issues present"):void(t.forEach(function(t){console.log("Removing: "+t.title),Meteor.call("removeIssue",e,t._id,function(){})}),console.log("Total of "+t.length+" vuln(s) removed"))}function deleteServices(o,i,r){var s=Session.get("projectId"),e=Services.find({projectId:s,port:o,protocol:i,service:r});e.forEach(function(t){console.log("Removing Service : "+t._id+" "+t.port+"/"+t.protocol+" "+t.service),Meteor.call("removeService",s,t.hostId,t._id)})}function dumpIssueEvidence(){var e=Session.get("projectId"),t=Issues.find({projectId:e}).fetch();t.forEach(function(t){console.log(t.title),console.log(t.evidence)})}function dumpServiceNotes(t,i){var r=Session.get("projectId"),s=new RegExp(t,"i"),l=Services.find({projectId:r,notes:{$elemMatch:{title:{$regex:t,$options:"i"}}}},{notes:1,hostId:1}).fetch(),c=_.pluck(l,"hostId"),n=Hosts.find({_id:{$in:c}},{sort:{longIpv4Addr:1},ipv4:1}).fetch();n.forEach(function(t){""!==i&&i!==t.ipv4||(l=Services.find({hostId:t._id},{sort:{service:1},notes:1,service:1,protocol:1}).fetch(),l.forEach(function(o){o.notes.forEach(function(i){s.test(i.title)&&console.log(t.ipv4+":"+o.port+"/"+o.protocol+" - "+i.title+"\n"+i.content)})}))})}function filterHostsNoServices(){}function findNoteByRegex(t,o){var r=Session.get("projectId"),s=new RegExp(t,"i");if("project"===o||"all"===o){console.log("Project Notes");var i=Projects.findOne({_id:r},{notes:1});i.notes.forEach(function(t){(s.test(t.title)||s.test(t.content))&&console.log("\t"+t.title)})}("host"===o||"all"===o)&&(console.log("Host Notes"),Hosts.find({projectId:r,$or:[{notes:{$elemMatch:{title:{$regex:t,$options:"i"}}}},{notes:{$elemMatch:{content:{$regex:t,$options:"i"}}}}]},{notes:1}).fetch().forEach(function(e){e.notes.forEach(function(t){(s.test(t.title)||s.test(t.content))&&console.log("\t"+e.ipv4+" -> "+t.title)})})),("service"===o||"all"===o)&&(console.log("Service Notes"),Services.find({projectId:r,$or:[{notes:{$elemMatch:{title:{$regex:t,$options:"i"}}}},{notes:{$elemMatch:{content:{$regex:t,$options:"i"}}}}]},{notes:1}).fetch().forEach(function(t){t.notes.forEach(function(o){if(s.test(o.title)||s.test(o.content)){var i=Hosts.findOne({projectId:r,_id:t.hostId});console.log("\t"+i.ipv4+" -> "+t.service.toString()+" -> "+o.title)}})})),("Issue"===o||"all"===o)&&(console.log("Issue Notes"),Issues.find({projectId:r,$or:[{evidence:{$regex:t,$options:"i"}},{notes:{$elemMatch:{title:{$regex:t,$options:"i"}}}},{notes:{$elemMatch:{content:{$regex:t,$options:"i"}}}}]},{notes:1}).fetch().forEach(function(e){s.test(e.evidence)&&console.log("\t"+e.title+" -> Evidence Field"),e.notes.forEach(function(t){(s.test(t.title)||s.test(t.content))&&console.log("\t"+e.title+" -> "+t.title)})}))}function generateIssueBulkListByRegex(e){var l=Session.get("projectId"),t=Services.find({projectId:l,service:{$regex:e}}).fetch(),i=[];t.forEach(function(e){var t=Hosts.findOne({projectId:l,_id:e.hostId});i.push(t.ipv4+","+e.port+","+e.protocol)}),console.log(i.join("\n"))}function generatePortStringFromService(t){var o=Session.get("projectId"),i=Services.find({projectId:o,service:t}).fetch();return _.uniq(_.pluck(i,"port")).sort(function(e,t){return e-t}).join(",")}function generateUniquePortString(o){var i=Session.get("projectId"),r={projectId:i};"undefined"!=typeof o&&(r.protocol=o);var e=Services.find(r).fetch();return _.uniq(_.pluck(e,"port")).sort(function(e,t){return e-t}).join(",")}function generateURLList(){var c=Session.get("projectId"),e=Hosts.find({projectId:c}).fetch();if(!e)return void console.log("No hosts found");var s=0,d=[];e.forEach(function(r){var l=r.hostnames,o=r._id,t={projectId:c,hostId:o};t.service={$regex:"web|www|ssl|http|https",$options:"i"};var e=Services.find(t).fetch();e.forEach(function(o){var t="http://";o.service.match(/(ssl|https)/gi)&&(t="https://"),s++,d.push(t+r.ipv4+":"+o.port),l.forEach(function(i){s++,d.push(t+i+":"+o.port)})})}),console.log(d.join("\n")),console.log(s+" URL(s) generated")}function generateWebDiscoTargetList(){var l=Session.get("projectId"),e=Hosts.find({projectId:l}).fetch();if(1>e.length)return void console.log("No hosts found");var c=0;e.forEach(function(i){var s=i.hostnames,o=i._id,t={projectId:l,hostId:o};t.service={$regex:"web|www|ssl|http|https",$options:"i"};var e=Services.find(t).fetch(),n=[];e.forEach(function(e){var t="http";e.service.match(/(ssl|https)/g)&&(t="https"),e.notes.forEach(function(o){o.content.match(/SSL/)&&(t="https")}),c++,n.push(t+","+i.ipv4+","+e.port+","),s.forEach(function(r){c++,n.push(t+","+i.ipv4+","+e.port+","+r)})})}),console.log(urls.join("\n")),console.log(c+" URL(s) generated")}function getHostsByCIDR(){function r(o,r){for(var i="00000000",e=parseInt(o[0],10).toString(2),c=e.length>=i.length?e:i.slice(0,i.length-e.length)+e,n=1;n<=o.length;n++)e=parseInt(o[n],10).toString(2),c+=e.length>=i.length?e:i.slice(0,i.length-e.length)+e;return c.slice(0,parseInt(r,10))}var t=Array.prototype.slice.call(arguments,0),o=Hosts.find({projectId:Session.get("projectId")}).fetch(),s={};o.forEach(function(t){var o=t.ipv4.split(".");s[r(o,32)]=t.ipv4}),t.forEach(function(e){e=e.split("/");var i=e[0].split("."),l=r(i,e[1]);for(var c in s)c.slice(0,parseInt(e[1],10))===l&&console.log(s[c])})}function getPersonByDepartmentRegex(t){if(t&&"object"!=typeof t)return console.log("Department regex can not be a string, must be an object");var o=Session.get("projectId"),i=People.find({projectId:o,department:{$regex:t}}).fetch();i.forEach(function(t){console.log("'"+t.principalName+"','"+t.department+"','"+t.emails.join(" ")+"'")}),console.log("returned: "+i.len()+" results")}function getPersonEmail(){var e=Session.get("projectId"),t=People.find({projectId:e}).fetch();t.forEach(function(t){console.log("'"+t.principalName+"','"+t.department+"','"+t.emails.join(" ")+"'")}),console.log("returned: "+t.length+" results")}function greyHostsNoServicesGreen(){var e=Session.get("projectId"),l=Meteor.user().emails[0].address,t=Hosts.find({projectId:e,status:"lair-grey"}).fetch();if("undefined"==typeof t||0===t.length)return void console.log("No hosts found");var i=0;t.forEach(function(e){var t=Services.find({hostId:e._id,port:{$gt:0}}).count();0===t&&(i++,console.log("Updating: "+e.ipv4),Hosts.update({_id:e._id},{$set:{status:"lair-green",last_modified_by:l}}))}),console.log(i+" host(s) updated")}function hostnamesToNessus(){var t=Hosts.find({projectId:Session.get("projectId")}).fetch(),r=[];t.forEach(function(t){var o=t.ipv4;t.hostnames.forEach(function(t){r.push(t+"["+o+"]")})}),r.forEach(function(t){console.log(t)})}function iisOsProfiler(){var e=Session.get("projectId"),t=Services.find({projectId:e,product:{$regex:/IIS\s(httpd\s)?\d+\.\d+/,$options:"i"}}).fetch();t.forEach(function(t){var o=t.product,r=o.match(/\d+\.\d+/);if(null!==r){var s=parseFloat(r[0]);if(!isNaN(s)){var l=Models.os();l.tool="IIS OS Profiler",l.weight=90,6>s?l.fingerprint="Microsoft Windows Server 2000":7>s?l.fingerprint="Microsoft Windows Server 2003":8>s?l.fingerprint="Microsoft Windows Server 2008":9>s?l.fingerprint="Microsoft Windows Server 2012":11>s&&(l.fingerprint="Microsoft Windows Server 2016"),""!==l.fingerprint&&Meteor.call("setOs",e,t.hostId,l.tool,l.fingerprint,l.weight,function(o){o?console.log("Error generating OS for",t.hostId,o):console.log("Created new OS",l.fingerprint,"for",t.hostId)})}}})}function listHostServicesBycolor(e){var r=Session.get("projectId");if(-1===StatusMap.indexOf(e))throw console.log("Lair Supserviceed colors: "+StatusMap),{name:"Wrong color",message:"Provided color: \""+e+"\" is not Lair compliant"};var t=Services.find({projectId:r,status:e}).fetch();t.forEach(function(e){var o=Hosts.findOne({projectId:r,_id:e.hostId});console.log(o.ipv4+":"+e.port+"/"+e.protocol)})}function listHostServicesByServiceRegex(e){var r=Session.get("projectId"),t=Services.find({projectId:r,service:{$regex:e}}).fetch();return 1>t.length?void console.log("No services found"):void t.forEach(function(e){var o=Hosts.findOne({projectId:r,_id:e.hostId});console.log(o.ipv4+":"+e.port+"/"+e.protocol)})}function listHostsByIssueTitle(o){var i=Session.get("projectId"),r=Issues.findOne({projectId:i,title:o}),l="";if(!r)return void console.log("Issue not found");var e=r.hosts;e.forEach(function(t){console.log(t.ipv4+":"+t.port+"/"+t.protocol),l+=t.ipv4+", "}),console.log("RHOSTS: "+l.slice(0,-2))}function listHostsByIssueTitleRegex(t){var o=Session.get("projectId"),i=Issues.find({projectId:o,title:{$regex:t}}).fetch(),r="";return 1>i.length?void console.log("No issues found"):void i.forEach(function(e){console.log(e.title);var t=e.hosts;t.forEach(function(t){console.log(t.ipv4+":"+t.port+"/"+t.protocol),r+=t.ipv4+", "}),console.log("RHOSTS: "+r.slice(0,-2)),r=""})}function listHostByTag(e){var t=Hosts.find({projectId:Session.get("projectId"),tags:e}).fetch();t.forEach(function(t){console.log(t.ipv4)})}function listUnknownOpenServices(c,s){var n=Session.get("projectId"),e=[],a=[],g=[],t=Hosts.find({projectId:n}).fetch();if(t.forEach(function(t){var o=Services.find({projectId:n,hostId:t._id}).fetch();o.forEach(function(o){0<o.port&&("product"===c?"unknown"===o.product.toLowerCase()&&(e.push(t.ipv4),"tcp"===o.protocol?a.push(o.port):"udp"===o.protocol&&g.push(o.port)):"service"===c?"unknown"===o.service.toLowerCase()&&(e.push(t.ipv4),"tcp"===o.protocol?a.push(o.port):"udp"===o.protocol&&g.push(o.port)):"both"==c&&("unknown"===o.service.toLowerCase()||"unknown"===o.product.toLowerCase())&&(e.push(t.ipv4),"tcp"===o.protocol?a.push(o.port):"udp"===o.protocol&&g.push(o.port)))}),"nmap"===s&&(0<a.length&&0<g.length?console.log("nmap -v -sV --version-all -sS -sU "+t.ipv4+" -p T:"+a.toString()+",U:"+g.toString()):0<a.length?console.log("nmap -v -sV --version-all -sS "+t.ipv4+" -p "+a.toString()):0<g.length&&console.log("nmap -v -sV --version-all -sU "+t.ipv4+" -p "+g.toString()),a=[],g=[]),"hostAndPort"===s&&(0<a.length&&a.forEach(function(o){console.log(t.ipv4+":"+o.toString())}),0<g.length&&g.forEach(function(o){console.log(t.ipv4+":"+o.toString())}))}),(0<a.length||0<g.length)&&"list"===s){var o=a.filter(function(e,t){return a.indexOf(e)===t}),i=g.filter(function(e,t){return g.indexOf(e)===t});console.log("Hosts:"),console.log(e.toString()),console.log("TCP Services:"),console.log(o.sort(function(e,t){return e-t}).toString()),console.log("UDP Services:"),console.log(i.sort(function(e,t){return e-t}).toString())}}function mergeDuplicateIssues(){for(var l=Session.get("projectId"),i=Issues.find({projectId:l}).fetch(),r=i.sort((e,t)=>e.title>t.title?1:-1),e=Hosts.find({projectId:l}).fetch(),t=0;t<r.length-1;t++)source=r[t+1],dest=r[t],source.title==dest.title&&source.cvss==dest.cvss&&(console.log("found match: "+dest.title),console.log(source.hosts.length+" hosts to move."),source.notes.forEach(function(e){console.log("Adding Note"),Meteor.call("addIssueNote",l,dest._id,e.title,e.content)}),source.hosts.forEach(function(o){e.forEach(function(i){var e=Services.findOne({projectId:l,hostId:i._id,port:o.port,protocol:o.protocol});i.ipv4==o.ipv4&&null!=e&&(console.log("Added "+o.ipv4+" to "+dest.title),Meteor.call("removeHostFromIssue",l,source._id,o.ipv4,o.port,o.protocol),Meteor.call("addHostToIssue",l,dest._id,o.ipv4,o.port,o.protocol))})}),source.cves.forEach(function(e){dest.cves.includes(e)||(console.log("Adding CVE "+e),Meteor.call("addCVE",l,dest._id,e))}),source.evidence!=dest.evidence&&(dest.evidence+="\n\n"+source.evidence,console.log("Updating Evidence."),Meteor.call("setIssueEvidence",l,dest._id,dest.evidence)),console.log("Removing issue."),Meteor.call("removeIssue",l,source._id))}function mergeIssues(r,s,a,e,t,o,p){function h(e){N.forEach(function(t){Meteor.call("addIssueNote",c,e,t.title,t.content)}),L.forEach(function(t){Meteor.call("addHostToIssue",c,e,t.ipv4,t.port,t.protocol)}),x.forEach(function(t){Meteor.call("addCVE",c,e,t)}),T.forEach(function(t){Meteor.call("addReference",c,e,t.link,t.name)}),f()}function f(){console.log("Removing Issues"),n.forEach(function(t){Meteor.call("removeIssue",c,t._id)})}function l(e){for(var t,r={},s=[],l=0,n=e.length;l<n;++l)t=JSON.stringify(e[l]),r.hasOwnProperty(t)||(r[t]=!0,s.push(e[l]));return s}if("object"!=typeof r)return console.log("Issue regex can not be a string, must be a object");if("string"!=typeof t)return console.log("Invalid title");if("string"!=typeof o)return console.log("Invalid cvss. Variable must be a string");var c=Session.get("projectId"),n=Issues.find({projectId:c,title:{$regex:r},cvss:{$gte:s,$lte:a},"hosts.ipv4":{$regex:e}}).fetch();if(1>n.length)return console.log("Did not find any issues with the given regex");var d=0;if(n.sort(function(e,t){return e.cvss>t.cvss?-1:e.cvss<t.cvss?1:0}),n.forEach(function(t){console.log("CVSS: "+t.cvss+" - Hosts: "+t.hosts.length+" - Title: "+t.title),t.cvss>d&&(d=t.cvss)}),console.log("Total found: "+n.length+" Highest CVSS: "+d),p){"max"===o&&(o=d);var v=Issues.findOne({projectId:c,title:t});"undefined"!=typeof v&&(n.push(v),Meteor.call("removeIssue",c,v._id)),console.log("Going to merge "+n.length+" issues");var u="",$="",w="",N=[],T=[],M=[],H=[],C=[];n.forEach(function(t){u=u+"CVSS: "+t.cvss+" - Hosts: "+t.hosts.length+" - Title: "+t.title+"\n",$="",w="",T=T.concat(t.references),N=N.concat(t.notes),M=M.concat(t.cves),H=H.concat(t.hosts),C=C.concat(t.files)});var L=l(H),x=l(M);return Meteor.call("createIssue",c,t,o,u,w,$,function(e,t){e?(console.log("Error: could not create new Issue",e.message),v&&console.log("Looks like you lost",v.title)):h(t)}),console.log("Complete")}}function getHostList(e){for(var t="",r=0;r<e.hosts.length;r++)t+=e.hosts[r].ipv4+",";return t+"\n"}function mergeIssuesByTitle(n,d,a){function e(e){m.forEach(function(t){Meteor.call("addIssueNote",g,e,t.title,t.content)}),$.forEach(function(t){Meteor.call("addHostToIssue",g,e,t.ipv4,t.port,t.protocol)}),I.forEach(function(t){Meteor.call("addCVE",g,e,t)}),v()}function v(){o.forEach(function(t){Meteor.call("removeIssue",g,t._id)})}function t(e){for(var t,r={},s=[],l=0,n=e.length;l<n;++l)t=JSON.stringify(e[l]),r.hasOwnProperty(t)||(r[t]=!0,s.push(e[l]));return s}if("object"!=typeof n)return console.log("Issue regex can not be a string, must be a object");if("string"!=typeof d)return console.log("Invalid title");if("number"!=typeof a)return console.log("Invalid cvss. Variable must be a number");var g=Session.get("projectId"),o=Issues.find({projectId:g,title:{$regex:n}}).fetch();if(1>o.length)return console.log("Did not find any issues with the given regex");var r=Issues.findOne({projectId:g,title:d});"undefined"!=typeof r&&(o.push(r),Meteor.call("removeIssue",g,r._id)),console.log("Going to merge "+o.length+" issues");var i="",s="",j="",m=[],E=[],S=[];o.forEach(function(t){issue_hosts=getHostList(t),i+="\n\nFrom "+t.title+"\nAffected Hosts: "+issue_hosts+t.description,s+="\n\nFrom "+t.title+"\nAffected Hosts: "+issue_hosts+t.solution,j+="\n\nFrom "+t.title+"\nAffected Hosts: "+issue_hosts+t.evidence,m=m.concat(t.notes),E=E.concat(t.cves),S=S.concat(t.hosts)});var $=t(S),I=t(E);return Meteor.call("createIssue",g,d,a,i,j,s,function(t,o){t?(console.log("Error: could not create new Issue",t.message),r&&console.log("Looks like you lost",r.title)):e(o)}),console.log("Complete")}function negateHostsByCIDR(){function r(o,r){for(var i="00000000",e=parseInt(o[0],10).toString(2),c=e.length>=i.length?e:i.slice(0,i.length-e.length)+e,n=1;n<=o.length;n++)e=parseInt(o[n],10).toString(2),c+=e.length>=i.length?e:i.slice(0,i.length-e.length)+e;return c.slice(0,parseInt(r,10))}var o=Array.prototype.slice.call(arguments,0),i=Hosts.find({projectId:Session.get("projectId")}).fetch(),s={};for(var e in i.forEach(function(t){var o=t.ipv4.split(".");s[r(o,32)]=t.ipv4}),o.forEach(function(e){e=e.split("/");var l=e[0].split("."),c=r(l,e[1]);for(var i in s)i.slice(0,parseInt(e[1],10))===c&&delete s[i]}),s)console.log(s[e])}function niktoHostList(e,n){function o(e,o){var i=Hosts.findOne({projectId:s,_id:e});i.ipv4+":"+o in r||(r[i.ipv4+":"+o]=!0),n&&i.hostnames.forEach(function(t){n.test(t)&&!(t+":"+o in r)&&(r[t+":"+o]=!0)})}if(n&&"object"!=typeof n)return console.log("Domain regex can not be a string, must be an object");var r={},s=Session.get("projectId");for(var i in e.forEach(function(e){var t=[];if("object"==typeof e)t=Services.find({projectId:s,service:{$regex:e}}).fetch(),t.forEach(function(t){o(t.hostId,t.port)});else if("string"==typeof e)for(var r=e.split("-"),i=parseInt(r[0],10);i<=parseInt(r[1],10);i++)t=Services.find({projectId:s,service:i}).fetch(),t.forEach(function(t){o(t.hostId,t.port)});else{var l=Services.findOne({projectId:s,service:e});o(l.hostId,e.port)}}),r)console.log(i)}function niktoTopFindings(i,r){var s={},l=Session.get("projectId"),c=["(.*might be interesting.*)","(.*Public HTTP Methods:.*PUT.*)","(.*[Ww]eb[Dd]av.*)","(.*Directory indexing found.*)","(.*default file found.*)","(.*Server leaks.*IP.*)","(.*OSVDBID:.*)"];0<i.length&&(c=i);var t=Services.find({projectId:l}).fetch();if(t.forEach(function(t){var n=Hosts.findOne({projectId:l,_id:t.hostId});t.notes.forEach(function(l){if(/Nikto/.test(l.title)){var t=l.title.match(/\(.*\)/);if(r){var o=new RegExp(c.join("|")+"\\n","g"),e=l.content.match(o);e&&(!s[n.ipv4+" "+t]&&(s[n.ipv4+" "+t]=[]),s[n.ipv4+" "+t].push(e.join("")))}else console.log(n.ipv4+" "+t),console.log(l.content)}})}),r)for(var o in s)console.log(o),console.log(s[o].join(""))}function NormalizeProtocols(){var t=Session.get("projectId"),o=Meteor.user().emails[0].address,i=Services.find({projectId:t}).fetch();if(1>i.length)return void console.log("No services found");var r=0;i.forEach(function(e){e.protocol!=e.protocol.toLowerCase()&&(Services.update({_id:e._id},{$set:{protocol:e.protocol.toLowerCase(),last_modifiedBy:o}}),r++)}),console.log("Total of "+r+" service(s) updated.")}function NormalizeUnknownProducts(){var t=Session.get("projectId"),o=Meteor.user().emails[0].address,i=Services.find({projectId:t}).fetch();if(1>i.length)return void console.log("No services found");var r=0;i.forEach(function(e){"unknown"==e.product.toLowerCase()&&(Services.update({_id:e._id},{$set:{product:"",last_modifiedBy:o}}),r++)}),console.log("Total of "+r+" service(s) updated.")}function removePort0ServicesNoReference(){var r=Session.get("projectId"),s=[],l=[],c=[],t=Hosts.find({projectId:r}).fetch();t.forEach(function(l){var o=l._id,t=Services.find({projectId:r,hostId:l._id}).fetch();t.forEach(function(e){if(0>=e.port&&1>e.notes){var t={ip:l.ipv4,service:e};s.push(t)}})});var e=Issues.find({projectId:r}).fetch();e.forEach(function(t){t.hosts.forEach(function(e){if(0==e.port)for(var t=0;t<s.length;t++)s[t].ip==e.ipv4&&e.protocol==s[t].service.protocol&&l.push(s[t].service._id)})});for(var o=0;o<s.length;o++){for(var n=0;n<l.length;n++)if(s[o].service._id==l[n])continue;c.push(s[o].service)}console.log("Removing "+c.length+" out of "+s.length+" port 0 services");for(var o=0;o<c.length;o++)console.log("Removing ServiceID: "+c[o]._id),Meteor.call("removeService",r,c[o].hostId,c[o]._id,function(){})}function removeIPBasedHostnames(){var t=Hosts.find({projectId:Session.get("projectId")}).fetch();t.forEach(function(t){var e=t.ipv4,i=[];t.hostnames.forEach(function(r){if(r.includes(e))return void console.log("removing "+r);if(r.includes(e.replace(/\./g,"_")))return void console.log("removing "+r);if(r.includes(e.replace(/\./g,"-")))return void console.log("removing "+r);var t=e.split(".").reverse().join(".");return r.includes(t)?void console.log("removing "+r):r.includes(t.replace(/\./g,"_"))?void console.log("removing "+r):r.includes(t.replace(/\./g,"-"))?void console.log("removing "+r):void i.push(r)}),Hosts.update({_id:t._id},{$set:{hostnames:i,lastModifiedBy:Meteor.user().emails[0].address}})})}function removeHostnamesByPattern(e){var t=Hosts.find({projectId:Session.get("projectId")}).fetch();t.forEach(function(t){var r=[];t.hostnames.forEach(function(t){return t.includes(e)?void console.log("removing "+t):void r.push(t)}),Hosts.update({_id:t._id},{$set:{hostnames:r,lastModifiedBy:Meteor.user().emails[0].address}})})}function searchServiceNoteContent(r,s){var l=Session.get("projectId"),c=new RegExp(r,"i"),n=new RegExp(s,"g"),o=[],e=Services.find({projectId:l,notes:{$elemMatch:{title:{$regex:r,$options:"i"}}}},{notes:1,hostId:1}).fetch();e.forEach(function(t){t.notes.forEach(function(t){c.test(t.title)&&o.push.apply(o,t.content.match(n))})}),console.log(function(o){for(var r={},i=[],e=0,l=o.length;e<l;++e)r.hasOwnProperty(o[e])||(i.push(o[e]),r[o[e]]=1);return i}(o).join("\n"))}function servicesToColorByHosts(e,t,r){var s=Session.get("projectId"),i=Meteor.user().emails[0].address,l=0,c={"lair-red":4,"lair-orange":3,"lair-blue":2,"lair-green":0,"lair-grey":0};if(-1===StatusMap.indexOf(r))throw console.log("Lair Supserviceed colors: "+StatusMap),{name:"Wrong Color",message:"Provided color: \""+r+"\" is not Lair compliant"};e.forEach(function(n){var o=Hosts.findOne({projectId:s,ipv4:n}),i=Services.find({hostId:o._id,port:t}).fetch();1>i.length||i.forEach(function(t){console.log("Updating: "+n+":"+t.port+"/"+t.protocol),Meteor.call("setPortStatus",s,t._id,r),c[r]>c[o.status]&&(console.log("Updating: "+n+" status \""+r+"\""),Meteor.call("setHostStatus",s,o._id,r)),l++})}),console.log(l+" service(s) updated")}function setGlobalServiceByPort(i,r,s){var e=Session.get("projectId"),t=Services.find({projectId:e,port:i,protocol:r,service:{$ne:s}});t.forEach(function(t){Meteor.call("setServiceService",e,t._id,s,function(t){t||console.log("Modified service successfully")})})}function setHostOsByOsRegex(e,i,r){var s=Session.get("projectId"),t=Hosts.find({projectId:s,"os.fingerprint":{$regex:e}}).fetch();return 1>t.length?void console.log("No hosts found"):void t.forEach(function(e){Meteor.call("setOs",s,e._id,"Manual",i,r,function(o){return o?void console.log("Unable to update host "+e.ipv4):void console.log("Updated host "+e.ipv4)})})}function setHostServiceByPort(i,r,s,l){var c=Session.get("projectId"),i=Hosts.findOne({projectId:c,ipv4:i}),o=Services.find({projectId:c,hostId:i._id,port:{$in:r},protocol:s,service:{$ne:l}});o.forEach(function(t){Meteor.call("setServiceService",c,t._id,l,function(t){t||console.log("Modified service successfully")})})}function tagHostsByCIDR(e,t){function s(e,t){return check(e,Matchers.isObjectId),check(t,Matchers.isNonEmptyString),Hosts.update({_id:e},{$addToSet:{tags:t},$set:{lastModifiedBy:Meteor.user().emails[0].address}})}function l(o,r){for(var i="00000000",e=parseInt(o[0],10).toString(2),c=e.length>=i.length?e:i.slice(0,i.length-e.length)+e,n=1;n<=o.length;n++)e=parseInt(o[n],10).toString(2),c+=e.length>=i.length?e:i.slice(0,i.length-e.length)+e;return c.slice(0,parseInt(r,10))}var n=Hosts.find({projectId:Session.get("projectId")}).fetch(),d={};n.forEach(function(e){var t=e.ipv4.split(".");d[l(t,32)]=e}),cidr=t.split("/");var t=cidr[0].split("."),o=l(t,cidr[1]);for(var i in d)i.slice(0,parseInt(cidr[1],10))===o&&(s(d[i]._id,e),console.log(d[i]._id,e))}function uniqueServicesByHostsCIDR(){function i(o,r){for(var i="00000000",e=parseInt(o[0],10).toString(2),c=e.length>=i.length?e:i.slice(0,i.length-e.length)+e,n=1;n<=o.length;n++)e=parseInt(o[n],10).toString(2),c+=e.length>=i.length?e:i.slice(0,i.length-e.length)+e;return c.slice(0,parseInt(r,10))}var s=Session.get("projectId"),l=Array.prototype.slice.call(arguments,0),e=Hosts.find({projectId:s}).fetch(),c={},n={},d=[];e.forEach(function(t){var o=t.ipv4.split(".");c[i(o,32)]=t.ipv4,n[t.ipv4]=t._id}),l.forEach(function(e){e=e.split("/");var r=e[0].split("."),s=i(r,e[1]);for(var l in c)l.slice(0,parseInt(e[1],10))===s&&d.push(n[c[l]])});var t=Services.find({projectId:s,hostId:{$in:d}}).fetch();return _.uniq(_.pluck(t,"port")).sort(function(e,t){return e-t}).join(",")}function bulkRemoveHosts(o){var i=Session.get("projectId"),r=Meteor.user().emails[0].address,e=Hosts.find({projectId:i}).fetch();count=0,e.forEach(function(e){o.includes(e.ipv4)&&(Meteor.call("removeHost",i,e._id,function(t){t?console.log("Error removing "+e.ipv4+". "+t):Meteor.call("removeHostFromIssues",i,e._id)}),count++)}),console.log("Total of "+count+" host(s) removed.")}function changeHostsToSpecifiedColorByServicesOrIssues(n,a,g){function p(o,i,e){return 0===i||o.status===e[i-1].status}function h(t,o){Hosts.update({_id:t},{$set:{status:o,lastModifiedBy:r}})}function f(e){return Services.find({projectId:i,hostId:e}).fetch()}function e(t){var o=Hosts.findOne({_id:t}).ipv4;return Issues.find({projectId:i,"hosts.ipv4":o}).fetch()}function v(t){if("services"===n)return f(t);if("issues"===n)return e(t);throw{name:"Incorrect servicesOrIssues Selection",message:"Incorrect servicesOrIssues selection: \""+n+"\" is not a valid servicesOrIssues for this function"}}var i=Session.get("projectId"),r=Meteor.user().emails[0].address,u=0,o=0;if(-1===StatusMap.indexOf(g))throw console.log("Lair Supserviceed colors: "+StatusMap),{name:"Wrong lairColor",message:"Provided lairColor: \""+g+"\" is not Lair compliant"};var s=Hosts.find({projectId:i}).fetch();if("all"===a)s.forEach(function(e){h(e._id,g)}),o=s.length;else if("none"===a)s.forEach(function(i){var o=i._id,e=v(o).length;0>=e&&(h(o,g),u++)}),o=u;else if(-1!==StatusMap.indexOf(a))s.forEach(function(r){var t=!1,s=r._id,i=v(s);t=0<i.length&&i[0].status===a&&i.every(p),t&&(h(s,g),u++),o=u});else if("same"===a)s.forEach(function(t){var i=!1,r=t._id,l=v(r);i=l.every(p),i&&(h(r,g),u++),o=u});else if("diff"===a)s.forEach(function(t){var i=!1,r=t._id,l=v(r);i=!l.every(p),i&&(h(r,g),u++),o=u});else throw{name:"Incorrect statusOption Selection",message:"Incorrect statusOption selection: \""+a+"\" is not a valid statusOption for this function"};console.log("Total of "+o+" host(s) updated")}function changeServicesRegexToSpecifiedColor(i,r){var s=Session.get("projectId"),e=Meteor.user().emails[0].address;if("lair-grey"!==r&&"lair-blue"!==r&&"lair-green"!==r&&"lair-orange"!==r&&"lair-red"!==r)return void console.log("Invalid color specified");var t=Services.find({projectId:s,service:{$regex:i}}).fetch();return 1>t.length?void console.log("No services found"):void(t.forEach(function(t){Services.update({_id:t._id},{$set:{status:r,lastModifiedBy:e}})}),console.log("Total of "+t.length+" service(s) updated to "+r+"."))}function changeServicesToColorByPort(i,r){var s=Session.get("projectId"),e=Meteor.user().emails[0].address;if("lair-grey"!==r&&"lair-blue"!==r&&"lair-green"!==r&&"lair-orange"!==r&&"lair-red"!==r)return void console.log("Invalid color specified");var t=Services.find({projectId:s,port:i}).fetch();return 1>t.length?void console.log("No services found"):void(t.forEach(function(t){Services.update({_id:t._id},{$set:{status:r,last_modifiedBy:e}})}),console.log("Total of "+t.length+" service(s) updated to "+r+"."))}function changeServicesToSpecifiedColor(i,r){var s=Session.get("projectId"),e=Meteor.user().emails[0].address;if("lair-grey"!==r&&"lair-blue"!==r&&"lair-green"!==r&&"lair-orange"!==r&&"lair-red"!==r)return void console.log("Invalid color specified");var t=Services.find({projectId:s,service:i}).fetch();return 1>t.length?void console.log("No services found"):void(t.forEach(function(t){Services.update({_id:t._id},{$set:{status:r,last_modifiedBy:e}})}),console.log("Total of "+t.length+" service(s) updated to "+r+"."))}function changeServicesToSpecifiedColorByProduct(i,r){var s=Session.get("projectId"),e=Meteor.user().emails[0].address;if("lair-grey"!==r&&"lair-blue"!==r&&"lair-green"!==r&&"lair-orange"!==r&&"lair-red"!==r)return void console.log("Invalid color specified");var t=Services.find({projectId:s,product:i}).fetch();return 1>t.length?void console.log("No services found"):void(t.forEach(function(t){Services.update({_id:t._id},{$set:{status:r,last_modifiedBy:e}})}),console.log("Total of "+t.length+" service(s) updated to "+r+"."))}function changeServicesToSpecifiedColor(i,r){var s=Session.get("projectId"),e=Meteor.user().emails[0].address;if("lair-grey"!==r&&"lair-blue"!==r&&"lair-green"!==r&&"lair-orange"!==r&&"lair-red"!==r)return void console.log("Invalid color specified");var t=Services.find({projectId:s,service:i}).fetch();return 1>t.length?void console.log("No services found"):void(t.forEach(function(t){console.log("Updating: "+t.service+"/"+t.protocol),Services.update({_id:t._id},{$set:{status:r,last_modified_by:e}})}),console.log("Total of "+t.length+" service(s) updated"))}function countHostServicesBycolor(i){var r={},s=Session.get("projectId");if(-1===StatusMap.indexOf(i))throw console.log("Lair Supserviceed colors: "+StatusMap),{name:"Wrong color",message:"Provided color: \""+i+"\" is not Lair compliant"};var t=Services.find({projectId:s,status:i}).fetch();for(var e in t.forEach(function(t){e=Hosts.findOne({projectId:s,_id:t.hostId}),r.hasOwnProperty(e.ipv4)?r[e.ipv4]++:r[e.ipv4]=1}),r)console.log(e+" ("+r[e]+")")}function countHostServicesBycolor(i){var r={},s=Session.get("projectId");if(-1===StatusMap.indexOf(i))throw console.log("Lair Supserviceed colors: "+StatusMap),{name:"Wrong color",message:"Provided color: \""+i+"\" is not Lair compliant"};var t=Services.find({projectId:s,status:i}).fetch();for(var e in t.forEach(function(t){e=Hosts.findOne({projectId:s,_id:t.hostId}),r.hasOwnProperty(e.ipv4)?r[e.ipv4]++:r[e.ipv4]=1}),r)console.log(e+" ("+r[e]+")")}function deleteHostServicesByTool(r,s){var e=Session.get("projectId"),t=Hosts.findOne({projectId:e,ipv4:r});if("undefined"==typeof t)return void console.log("No matching host found");var o=Services.find({projectId:e,hostId:t._id,lastModifiedBY:s}).fetch();1>o.length&&console.log("No matching Services found"),o.forEach(function(t){console.log("Removing "+t.protocol+"/"+t.service),Meteor.call("removeService",e,t._id,function(){})}),console.log("Total of "+o.length+" service(s) removed.")}function deleteHostsByCIDR(){function o(r,i){for(var e="00000000",t=parseInt(r[0],10).toString(2),s=t.length>=e.length?t:e.slice(0,e.length-t.length)+t,l=1;l<=r.length;l++)t=parseInt(r[l],10).toString(2),s+=t.length>=e.length?t:e.slice(0,e.length-t.length)+t;return s.slice(0,parseInt(i,10))}var n=Session.get("projectId"),l=Array.prototype.slice.call(arguments,0),e=Hosts.find({projectId:n}).fetch(),d={},i={},r=0;e.forEach(function(r){var e=r.ipv4.split(".");d[o(e,32)]=r.ipv4,i[r.ipv4]=r._id}),l.forEach(function(s){s=s.split("/");var a=s[0].split("."),t=o(a,s[1]);for(var l in d)l.slice(0,parseInt(s[1],10))===t&&(Meteor.call("removeHost",n,i[d[l]],function(e){e||Meteor.call("removeHostFromIssues",n,d[l])}),r++);console.log("Total of "+r+" host(s) removed.")})}function deleteHostsByStatus(t){var o=Session.get("projectId"),i=Hosts.find({projectId:o,status:t}).fetch();return 1>i.length?void console.log("No matching hosts found"):void(i.forEach(function(i){console.log("Removing "+i.ipv4),Meteor.call("removeHost",o,i._id,function(t){t||Meteor.call("removeHostFromIssues",o,i.ipv4)})}),console.log("Total of "+i.length+" host(s) removed."))}function deleteIssuesByStatus(t){var o=Session.get("projectId"),i=Issues.find({projectId:o,status:t}).fetch();return 1>i.length?void console.log("No matching Issues found"):void(i.forEach(function(e){console.log("Removing "+e.title),Meteor.call("removeIssue",o,e._id)}),console.log("Total of "+i.length+" Issue(s) removed."))}function deleteIssuesWithNoHosts(){var t=Session.get("projectId"),o=Issues.find({projectId:t,hosts:{$size:0}}).fetch();return 1>o.length?void console.log("No orphaned issues present"):void(o.forEach(function(o){console.log("Removing: "+o.title),Meteor.call("removeIssue",t,o._id,function(){})}),console.log("Total of "+o.length+" vuln(s) removed"))}function deleteServices(r,s,e){var l=Session.get("projectId"),t=Services.find({projectId:l,port:r,protocol:s,service:e});t.forEach(function(e){console.log("Removing Service : "+e._id+" "+e.port+"/"+e.protocol+" "+e.service),Meteor.call("removeService",l,e.hostId,e._id)})}function dumpIssueEvidence(){var t=Session.get("projectId"),o=Issues.find({projectId:t}).fetch();o.forEach(function(e){console.log(e.title),console.log(e.evidence)})}function dumpServiceNotes(r,s){var l=Session.get("projectId"),c=new RegExp(r,"i"),e=Services.find({projectId:l,notes:{$elemMatch:{title:{$regex:r,$options:"i"}}}},{notes:1,hostId:1}).fetch(),n=_.pluck(e,"hostId"),o=Hosts.find({_id:{$in:n}},{sort:{longIpv4Addr:1},ipv4:1}).fetch();o.forEach(function(o){""!==s&&s!==o.ipv4||(e=Services.find({hostId:o._id},{sort:{service:1},notes:1,service:1,protocol:1}).fetch(),e.forEach(function(i){i.notes.forEach(function(e){c.test(e.title)&&console.log(o.ipv4+":"+i.port+"/"+i.protocol+" - "+e.title+"\n"+e.content)})}))})}function filterHostsNoServices(){}function findNoteByRegex(i,r){var s=Session.get("projectId"),l=new RegExp(i,"i");if("project"===r||"all"===r){console.log("Project Notes");var e=Projects.findOne({_id:s},{notes:1});e.notes.forEach(function(e){(l.test(e.title)||l.test(e.content))&&console.log("\t"+e.title)})}("host"===r||"all"===r)&&(console.log("Host Notes"),Hosts.find({projectId:s,$or:[{notes:{$elemMatch:{title:{$regex:i,$options:"i"}}}},{notes:{$elemMatch:{content:{$regex:i,$options:"i"}}}}]},{notes:1}).fetch().forEach(function(t){t.notes.forEach(function(o){(l.test(o.title)||l.test(o.content))&&console.log("\t"+t.ipv4+" -> "+o.title)})})),("service"===r||"all"===r)&&(console.log("Service Notes"),Services.find({projectId:s,$or:[{notes:{$elemMatch:{title:{$regex:i,$options:"i"}}}},{notes:{$elemMatch:{content:{$regex:i,$options:"i"}}}}]},{notes:1}).fetch().forEach(function(o){o.notes.forEach(function(i){if(l.test(i.title)||l.test(i.content)){var e=Hosts.findOne({projectId:s,_id:o.hostId});console.log("\t"+e.ipv4+" -> "+o.service.toString()+" -> "+i.title)}})})),("Issue"===r||"all"===r)&&(console.log("Issue Notes"),Issues.find({projectId:s,$or:[{evidence:{$regex:i,$options:"i"}},{notes:{$elemMatch:{title:{$regex:i,$options:"i"}}}},{notes:{$elemMatch:{content:{$regex:i,$options:"i"}}}}]},{notes:1}).fetch().forEach(function(t){l.test(t.evidence)&&console.log("\t"+t.title+" -> Evidence Field"),t.notes.forEach(function(o){(l.test(o.title)||l.test(o.content))&&console.log("\t"+t.title+" -> "+o.title)})}))}function generateIssueBulkListByRegex(o){var r=Session.get("projectId"),i=Services.find({projectId:r,service:{$regex:o}}).fetch(),s=[];i.forEach(function(t){var o=Hosts.findOne({projectId:r,_id:t.hostId});s.push(o.ipv4+","+t.port+","+t.protocol)}),console.log(s.join("\n"))}function generatePortStringFromService(o){var i=Session.get("projectId"),e=Services.find({projectId:i,service:o}).fetch();return _.uniq(_.pluck(e,"port")).sort(function(t,o){return t-o}).join(",")}function generateUniquePortString(i){var r=Session.get("projectId"),e={projectId:r};"undefined"!=typeof i&&(e.protocol=i);var t=Services.find(e).fetch();return _.uniq(_.pluck(t,"port")).sort(function(t,o){return t-o}).join(",")}function generateURLList(){var s=Session.get("projectId"),t=Hosts.find({projectId:s}).fetch();if(!t)return void console.log("No hosts found");var r=0,n=[];t.forEach(function(l){var o=l.hostnames,t=l._id,e={projectId:s,hostId:t};e.service={$regex:"web|www|ssl|http|https",$options:"i"};var i=Services.find(e).fetch();i.forEach(function(t){var i="http://";t.service.match(/(ssl|https)/gi)&&(i="https://"),r++,n.push(i+l.ipv4+":"+t.port),o.forEach(function(e){r++,n.push(i+e+":"+t.port)})})}),console.log(n.join("\n")),console.log(r+" URL(s) generated")}function generateWebDiscoTargetList(){var c=Session.get("projectId"),t=Hosts.find({projectId:c}).fetch();if(1>t.length)return void console.log("No hosts found");var i=0;t.forEach(function(s){var o=s.hostnames,t=s._id,e={projectId:c,hostId:t};e.service={$regex:"web|www|ssl|http|https",$options:"i"};var n=Services.find(e).fetch(),r=[];n.forEach(function(t){var l="http";t.service.match(/(ssl|https)/g)&&(l="https"),t.notes.forEach(function(e){e.content.match(/SSL/)&&(l="https")}),i++,r.push(l+","+s.ipv4+","+t.port+","),o.forEach(function(o){i++,r.push(l+","+s.ipv4+","+t.port+","+o)})})}),console.log(urls.join("\n")),console.log(i+" URL(s) generated")}function getHostsByCIDR(){function s(r,i){for(var e="00000000",t=parseInt(r[0],10).toString(2),s=t.length>=e.length?t:e.slice(0,e.length-t.length)+t,l=1;l<=r.length;l++)t=parseInt(r[l],10).toString(2),s+=t.length>=e.length?t:e.slice(0,e.length-t.length)+t;return s.slice(0,parseInt(i,10))}var o=Array.prototype.slice.call(arguments,0),e=Hosts.find({projectId:Session.get("projectId")}).fetch(),i={};e.forEach(function(o){var e=o.ipv4.split(".");i[s(e,32)]=o.ipv4}),o.forEach(function(t){t=t.split("/");var l=t[0].split("."),c=s(l,t[1]);for(var o in i)o.slice(0,parseInt(t[1],10))===c&&console.log(i[o])})}function getPersonByDepartmentRegex(o){if(o&&"object"!=typeof o)return console.log("Department regex can not be a string, must be an object");var i=Session.get("projectId"),e=People.find({projectId:i,department:{$regex:o}}).fetch();e.forEach(function(e){console.log("'"+e.principalName+"','"+e.department+"','"+e.emails.join(" ")+"'")}),console.log("returned: "+e.len()+" results")}function getPersonEmail(){var t=Session.get("projectId"),o=People.find({projectId:t}).fetch();o.forEach(function(e){console.log("'"+e.principalName+"','"+e.department+"','"+e.emails.join(" ")+"'")}),console.log("returned: "+o.length+" results")}function greyHostsNoServicesGreen(){var o=Session.get("projectId"),r=Meteor.user().emails[0].address,i=Hosts.find({projectId:o,status:"lair-grey"}).fetch();if("undefined"==typeof i||0===i.length)return void console.log("No hosts found");var s=0;i.forEach(function(t){var o=Services.find({hostId:t._id,port:{$gt:0}}).count();0===o&&(s++,console.log("Updating: "+t.ipv4),Hosts.update({_id:t._id},{$set:{status:"lair-green",last_modified_by:r}}))}),console.log(s+" host(s) updated")}function hostnamesToNessus(){var e=Hosts.find({projectId:Session.get("projectId")}).fetch(),o=[];e.forEach(function(e){var i=e.ipv4;e.hostnames.forEach(function(e){o.push(e+"["+i+"]")})}),o.forEach(function(e){console.log(e)})}function iisOsProfiler(){var t=Session.get("projectId"),o=Services.find({projectId:t,product:{$regex:/IIS\s(httpd\s)?\d+\.\d+/,$options:"i"}}).fetch();o.forEach(function(o){var s=o.product,e=s.match(/\d+\.\d+/);if(null!==e){var l=parseFloat(e[0]);if(!isNaN(l)){var i=Models.os();i.tool="IIS OS Profiler",i.weight=90,6>l?i.fingerprint="Microsoft Windows Server 2000":7>l?i.fingerprint="Microsoft Windows Server 2003":8>l?i.fingerprint="Microsoft Windows Server 2008":9>l?i.fingerprint="Microsoft Windows Server 2012":11>l&&(i.fingerprint="Microsoft Windows Server 2016"),""!==i.fingerprint&&Meteor.call("setOs",t,o.hostId,i.tool,i.fingerprint,i.weight,function(e){e?console.log("Error generating OS for",o.hostId,e):console.log("Created new OS",i.fingerprint,"for",o.hostId)})}}})}function listHostServicesBycolor(t){var o=Session.get("projectId");if(-1===StatusMap.indexOf(t))throw console.log("Lair Supserviceed colors: "+StatusMap),{name:"Wrong color",message:"Provided color: \""+t+"\" is not Lair compliant"};var i=Services.find({projectId:o,status:t}).fetch();i.forEach(function(i){var t=Hosts.findOne({projectId:o,_id:i.hostId});console.log(t.ipv4+":"+i.port+"/"+i.protocol)})}function listHostServicesByServiceRegex(t){var o=Session.get("projectId"),i=Services.find({projectId:o,service:{$regex:t}}).fetch();return 1>i.length?void console.log("No services found"):void i.forEach(function(i){var t=Hosts.findOne({projectId:o,_id:i.hostId});console.log(t.ipv4+":"+i.port+"/"+i.protocol)})}function listHostsByIssueTitle(i){var r=Session.get("projectId"),e=Issues.findOne({projectId:r,title:i}),s="";if(!e)return void console.log("Issue not found");var t=e.hosts;t.forEach(function(e){console.log(e.ipv4+":"+e.port+"/"+e.protocol),s+=e.ipv4+", "}),console.log("RHOSTS: "+s.slice(0,-2))}function listHostsByIssueTitleRegex(i){var r=Session.get("projectId"),e=Issues.find({projectId:r,title:{$regex:i}}).fetch(),s="";return 1>e.length?void console.log("No issues found"):void e.forEach(function(t){console.log(t.title);var o=t.hosts;o.forEach(function(e){console.log(e.ipv4+":"+e.port+"/"+e.protocol),s+=e.ipv4+", "}),console.log("RHOSTS: "+s.slice(0,-2)),s=""})}function listHostByTag(t){var o=Hosts.find({projectId:Session.get("projectId"),tags:t}).fetch();o.forEach(function(e){console.log(e.ipv4)})}function listUnknownOpenServices(s,n){var e=Session.get("projectId"),t=[],d=[],p=[],o=Hosts.find({projectId:e}).fetch();if(o.forEach(function(o){var i=Services.find({projectId:e,hostId:o._id}).fetch();i.forEach(function(i){0<i.port&&("product"===s?"unknown"===i.product.toLowerCase()&&(t.push(o.ipv4),"tcp"===i.protocol?d.push(i.port):"udp"===i.protocol&&p.push(i.port)):"service"===s?"unknown"===i.service.toLowerCase()&&(t.push(o.ipv4),"tcp"===i.protocol?d.push(i.port):"udp"===i.protocol&&p.push(i.port)):"both"==s&&("unknown"===i.service.toLowerCase()||"unknown"===i.product.toLowerCase())&&(t.push(o.ipv4),"tcp"===i.protocol?d.push(i.port):"udp"===i.protocol&&p.push(i.port)))}),"nmap"===n&&(0<d.length&&0<p.length?console.log("nmap -v -sV --version-all -sS -sU "+o.ipv4+" -p T:"+d.toString()+",U:"+p.toString()):0<d.length?console.log("nmap -v -sV --version-all -sS "+o.ipv4+" -p "+d.toString()):0<p.length&&console.log("nmap -v -sV --version-all -sU "+o.ipv4+" -p "+p.toString()),d=[],p=[]),"hostAndPort"===n&&(0<d.length&&d.forEach(function(e){console.log(o.ipv4+":"+e.toString())}),0<p.length&&p.forEach(function(e){console.log(o.ipv4+":"+e.toString())}))}),(0<d.length||0<p.length)&&"list"===n){var r=d.filter(function(t,o){return d.indexOf(t)===o}),l=p.filter(function(t,o){return p.indexOf(t)===o});console.log("Hosts:"),console.log(t.toString()),console.log("TCP Services:"),console.log(r.sort(function(t,o){return t-o}).toString()),console.log("UDP Services:"),console.log(l.sort(function(t,o){return t-o}).toString())}}function mergeDuplicateIssues(){for(var r=Session.get("projectId"),s=Issues.find({projectId:r}).fetch(),e=s.sort((t,o)=>t.title>o.title?1:-1),t=Hosts.find({projectId:r}).fetch(),o=0;o<e.length-1;o++)source=e[o+1],dest=e[o],source.title==dest.title&&source.cvss==dest.cvss&&(console.log("found match: "+dest.title),console.log(source.hosts.length+" hosts to move."),source.notes.forEach(function(t){console.log("Adding Note"),Meteor.call("addIssueNote",r,dest._id,t.title,t.content)}),source.hosts.forEach(function(i){t.forEach(function(e){var t=Services.findOne({projectId:r,hostId:e._id,port:i.port,protocol:i.protocol});e.ipv4==i.ipv4&&null!=t&&(console.log("Added "+i.ipv4+" to "+dest.title),Meteor.call("removeHostFromIssue",r,source._id,i.ipv4,i.port,i.protocol),Meteor.call("addHostToIssue",r,dest._id,i.ipv4,i.port,i.protocol))})}),source.cves.forEach(function(t){dest.cves.includes(t)||(console.log("Adding CVE "+t),Meteor.call("addCVE",r,dest._id,t))}),source.evidence!=dest.evidence&&(dest.evidence+="\n\n"+source.evidence,console.log("Updating Evidence."),Meteor.call("setIssueEvidence",r,dest._id,dest.evidence)),console.log("Removing issue."),Meteor.call("removeIssue",r,source._id))}function mergeIssues(s,p,e,t,o,i,f){function v(t){E.forEach(function(o){Meteor.call("addIssueNote",n,t,o.title,o.content)}),b.forEach(function(o){Meteor.call("addHostToIssue",n,t,o.ipv4,o.port,o.protocol)}),P.forEach(function(o){Meteor.call("addCVE",n,t,o)}),S.forEach(function(o){Meteor.call("addReference",n,t,o.link,o.name)}),l()}function l(){console.log("Removing Issues"),d.forEach(function(e){Meteor.call("removeIssue",n,e._id)})}function c(t){for(var i,s={},l=[],o=0,c=t.length;o<c;++o)i=JSON.stringify(t[o]),s.hasOwnProperty(i)||(s[i]=!0,l.push(t[o]));return l}if("object"!=typeof s)return console.log("Issue regex can not be a string, must be a object");if("string"!=typeof o)return console.log("Invalid title");if("string"!=typeof i)return console.log("Invalid cvss. Variable must be a string");var n=Session.get("projectId"),d=Issues.find({projectId:n,title:{$regex:s},cvss:{$gte:p,$lte:e},"hosts.ipv4":{$regex:t}}).fetch();if(1>d.length)return console.log("Did not find any issues with the given regex");var a=0;if(d.sort(function(t,o){return t.cvss>o.cvss?-1:t.cvss<o.cvss?1:0}),d.forEach(function(e){console.log("CVSS: "+e.cvss+" - Hosts: "+e.hosts.length+" - Title: "+e.title),e.cvss>a&&(a=e.cvss)}),console.log("Total found: "+d.length+" Highest CVSS: "+a),f){"max"===i&&(i=a);var u=Issues.findOne({projectId:n,title:o});"undefined"!=typeof u&&(d.push(u),Meteor.call("removeIssue",n,u._id)),console.log("Going to merge "+d.length+" issues");var I="",j="",m="",E=[],S=[],O=[],y=[],x=[];d.forEach(function(e){I=I+"CVSS: "+e.cvss+" - Hosts: "+e.hosts.length+" - Title: "+e.title+"\n",j="",m="",S=S.concat(e.references),E=E.concat(e.notes),O=O.concat(e.cves),y=y.concat(e.hosts),x=x.concat(e.files)});var b=c(y),P=c(O);return Meteor.call("createIssue",n,o,i,I,m,j,function(t,o){t?(console.log("Error: could not create new Issue",t.message),u&&console.log("Looks like you lost",u.title)):v(o)}),console.log("Complete")}}function getHostList(t){for(var o="",i=0;i<t.hosts.length;i++)o+=t.hosts[i].ipv4+",";return o+"\n"}function mergeIssuesByTitle(d,a,e){function t(t){h.forEach(function(o){Meteor.call("addIssueNote",i,t,o.title,o.content)}),I.forEach(function(o){Meteor.call("addHostToIssue",i,t,o.ipv4,o.port,o.protocol)}),O.forEach(function(o){Meteor.call("addCVE",i,t,o)}),g()}function g(){r.forEach(function(e){Meteor.call("removeIssue",i,e._id)})}function o(t){for(var i,s={},l=[],o=0,c=t.length;o<c;++o)i=JSON.stringify(t[o]),s.hasOwnProperty(i)||(s[i]=!0,l.push(t[o]));return l}if("object"!=typeof d)return console.log("Issue regex can not be a string, must be a object");if("string"!=typeof a)return console.log("Invalid title");if("number"!=typeof e)return console.log("Invalid cvss. Variable must be a number");var i=Session.get("projectId"),r=Issues.find({projectId:i,title:{$regex:d}}).fetch();if(1>r.length)return console.log("Did not find any issues with the given regex");var s=Issues.findOne({projectId:i,title:a});"undefined"!=typeof s&&(r.push(s),Meteor.call("removeIssue",i,s._id)),console.log("Going to merge "+r.length+" issues");var l="",c="",p="",h=[],f=[],u=[];r.forEach(function(e){issue_hosts=getHostList(e),l+="\n\nFrom "+e.title+"\nAffected Hosts: "+issue_hosts+e.description,c+="\n\nFrom "+e.title+"\nAffected Hosts: "+issue_hosts+e.solution,p+="\n\nFrom "+e.title+"\nAffected Hosts: "+issue_hosts+e.evidence,h=h.concat(e.notes),f=f.concat(e.cves),u=u.concat(e.hosts)});var I=o(u),O=o(f);return Meteor.call("createIssue",i,a,e,l,p,c,function(o,i){o?(console.log("Error: could not create new Issue",o.message),s&&console.log("Looks like you lost",s.title)):t(i)}),console.log("Complete")}function negateHostsByCIDR(){function s(r,i){for(var e="00000000",t=parseInt(r[0],10).toString(2),s=t.length>=e.length?t:e.slice(0,e.length-t.length)+t,l=1;l<=r.length;l++)t=parseInt(r[l],10).toString(2),s+=t.length>=e.length?t:e.slice(0,e.length-t.length)+t;return s.slice(0,parseInt(i,10))}var i=Array.prototype.slice.call(arguments,0),e=Hosts.find({projectId:Session.get("projectId")}).fetch(),l={};for(var t in e.forEach(function(o){var e=o.ipv4.split(".");l[s(e,32)]=o.ipv4}),i.forEach(function(t){t=t.split("/");var c=t[0].split("."),i=s(c,t[1]);for(var o in l)o.slice(0,parseInt(t[1],10))===i&&delete l[o]}),l)console.log(l[t])}function niktoHostList(o,s){function r(o,i){var t=Hosts.findOne({projectId:c,_id:o});t.ipv4+":"+i in l||(l[t.ipv4+":"+i]=!0),s&&t.hostnames.forEach(function(e){s.test(e)&&!(e+":"+i in l)&&(l[e+":"+i]=!0)})}if(s&&"object"!=typeof s)return console.log("Domain regex can not be a string, must be an object");var l={},c=Session.get("projectId");for(var t in o.forEach(function(t){var o=[];if("object"==typeof t)o=Services.find({projectId:c,service:{$regex:t}}).fetch(),o.forEach(function(e){r(e.hostId,e.port)});else if("string"==typeof t)for(var i=t.split("-"),n=parseInt(i[0],10);n<=parseInt(i[1],10);n++)o=Services.find({projectId:c,service:n}).fetch(),o.forEach(function(e){r(e.hostId,e.port)});else{var d=Services.findOne({projectId:c,service:t});r(d.hostId,t.port)}}),l)console.log(t)}function niktoTopFindings(r,l){var c={},t=Session.get("projectId"),n=["(.*might be interesting.*)","(.*Public HTTP Methods:.*PUT.*)","(.*[Ww]eb[Dd]av.*)","(.*Directory indexing found.*)","(.*default file found.*)","(.*Server leaks.*IP.*)","(.*OSVDBID:.*)"];0<r.length&&(n=r);var o=Services.find({projectId:t}).fetch();if(o.forEach(function(e){var d=Hosts.findOne({projectId:t,_id:e.hostId});e.notes.forEach(function(t){if(/Nikto/.test(t.title)){var o=t.title.match(/\(.*\)/);if(l){var e=new RegExp(n.join("|")+"\\n","g"),i=t.content.match(e);i&&(!c[d.ipv4+" "+o]&&(c[d.ipv4+" "+o]=[]),c[d.ipv4+" "+o].push(i.join("")))}else console.log(d.ipv4+" "+o),console.log(t.content)}})}),l)for(var e in c)console.log(e),console.log(c[e].join(""))}function NormalizeProtocols(){var o=Session.get("projectId"),i=Meteor.user().emails[0].address,r=Services.find({projectId:o}).fetch();if(1>r.length)return void console.log("No services found");var e=0;r.forEach(function(t){t.protocol!=t.protocol.toLowerCase()&&(Services.update({_id:t._id},{$set:{protocol:t.protocol.toLowerCase(),last_modifiedBy:i}}),e++)}),console.log("Total of "+e+" service(s) updated.")}function NormalizeUnknownProducts(){var o=Session.get("projectId"),i=Meteor.user().emails[0].address,r=Services.find({projectId:o}).fetch();if(1>r.length)return void console.log("No services found");var e=0;r.forEach(function(t){"unknown"==t.product.toLowerCase()&&(Services.update({_id:t._id},{$set:{product:"",last_modifiedBy:i}}),e++)}),console.log("Total of "+e+" service(s) updated.")}function removePort0ServicesNoReference(){var l=Session.get("projectId"),c=[],n=[],t=[],e=Hosts.find({projectId:l}).fetch();e.forEach(function(i){var t=i._id,e=Services.find({projectId:l,hostId:i._id}).fetch();e.forEach(function(t){if(0>=t.port&&1>t.notes){var o={ip:i.ipv4,service:t};c.push(o)}})});var o=Issues.find({projectId:l}).fetch();o.forEach(function(e){e.hosts.forEach(function(t){if(0==t.port)for(var o=0;o<c.length;o++)c[o].ip==t.ipv4&&t.protocol==c[o].service.protocol&&n.push(c[o].service._id)})});for(var i=0;i<c.length;i++){for(var d=0;d<n.length;d++)if(c[i].service._id==n[d])continue;t.push(c[i].service)}console.log("Removing "+t.length+" out of "+c.length+" port 0 services");for(var i=0;i<t.length;i++)console.log("Removing ServiceID: "+t[i]._id),Meteor.call("removeService",l,t[i].hostId,t[i]._id,function(){})}function removeIPBasedHostnames(){var e=Hosts.find({projectId:Session.get("projectId")}).fetch();e.forEach(function(e){var i=e.ipv4,r=[];e.hostnames.forEach(function(t){if(t.includes(i))return void console.log("removing "+t);if(t.includes(i.replace(/\./g,"_")))return void console.log("removing "+t);if(t.includes(i.replace(/\./g,"-")))return void console.log("removing "+t);var o=i.split(".").reverse().join(".");return t.includes(o)?void console.log("removing "+t):t.includes(o.replace(/\./g,"_"))?void console.log("removing "+t):t.includes(o.replace(/\./g,"-"))?void console.log("removing "+t):void r.push(t)}),Hosts.update({_id:e._id},{$set:{hostnames:r,lastModifiedBy:Meteor.user().emails[0].address}})})}function removeHostnamesByPattern(t){var o=Hosts.find({projectId:Session.get("projectId")}).fetch();o.forEach(function(o){var i=[];o.hostnames.forEach(function(o){return o.includes(t)?void console.log("removing "+o):void i.push(o)}),Hosts.update({_id:o._id},{$set:{hostnames:i,lastModifiedBy:Meteor.user().emails[0].address}})})}function searchServiceNoteContent(l,c){var e=Session.get("projectId"),n=new RegExp(l,"i"),o=new RegExp(c,"g"),i=[],t=Services.find({projectId:e,notes:{$elemMatch:{title:{$regex:l,$options:"i"}}}},{notes:1,hostId:1}).fetch();t.forEach(function(e){e.notes.forEach(function(e){n.test(e.title)&&i.push.apply(i,e.content.match(o))})}),console.log(function(r){for(var i={},e=[],t=0,s=r.length;t<s;++t)i.hasOwnProperty(r[t])||(e.push(r[t]),i[r[t]]=1);return e}(i).join("\n"))}function servicesToColorByHosts(t,r,l){var c=Session.get("projectId"),o=Meteor.user().emails[0].address,n=0,d={"lair-red":4,"lair-orange":3,"lair-blue":2,"lair-green":0,"lair-grey":0};if(-1===StatusMap.indexOf(l))throw console.log("Lair Supserviceed colors: "+StatusMap),{name:"Wrong Color",message:"Provided color: \""+l+"\" is not Lair compliant"};t.forEach(function(o){var i=Hosts.findOne({projectId:c,ipv4:o}),e=Services.find({hostId:i._id,port:r}).fetch();1>e.length||e.forEach(function(e){console.log("Updating: "+o+":"+e.port+"/"+e.protocol),Meteor.call("setPortStatus",c,e._id,l),d[l]>d[i.status]&&(console.log("Updating: "+o+" status \""+l+"\""),Meteor.call("setHostStatus",c,i._id,l)),n++})}),console.log(n+" service(s) updated")}function setGlobalServiceByPort(r,s,e){var t=Session.get("projectId"),o=Services.find({projectId:t,port:r,protocol:s,service:{$ne:e}});o.forEach(function(o){Meteor.call("setServiceService",t,o._id,e,function(e){e||console.log("Modified service successfully")})})}function setHostOsByOsRegex(i,r,s){var t=Session.get("projectId"),o=Hosts.find({projectId:t,"os.fingerprint":{$regex:i}}).fetch();return 1>o.length?void console.log("No hosts found"):void o.forEach(function(o){Meteor.call("setOs",t,o._id,"Manual",r,s,function(t){return t?void console.log("Unable to update host "+o.ipv4):void console.log("Updated host "+o.ipv4)})})}function setHostServiceByPort(e,s,c,n){var o=Session.get("projectId"),e=Hosts.findOne({projectId:o,ipv4:e}),t=Services.find({projectId:o,hostId:e._id,port:{$in:s},protocol:c,service:{$ne:n}});t.forEach(function(e){Meteor.call("setServiceService",o,e._id,n,function(e){e||console.log("Modified service successfully")})})}function tagHostsByCIDR(t,c){function n(t,o){return check(t,Matchers.isObjectId),check(o,Matchers.isNonEmptyString),Hosts.update({_id:t},{$addToSet:{tags:o},$set:{lastModifiedBy:Meteor.user().emails[0].address}})}function d(r,i){for(var e="00000000",t=parseInt(r[0],10).toString(2),s=t.length>=e.length?t:e.slice(0,e.length-t.length)+t,l=1;l<=r.length;l++)t=parseInt(r[l],10).toString(2),s+=t.length>=e.length?t:e.slice(0,e.length-t.length)+t;return s.slice(0,parseInt(i,10))}var o=Hosts.find({projectId:Session.get("projectId")}).fetch(),a={};o.forEach(function(t){var o=t.ipv4.split(".");a[d(o,32)]=t}),cidr=c.split("/");var c=cidr[0].split("."),i=d(c,cidr[1]);for(var r in a)r.slice(0,parseInt(cidr[1],10))===i&&(n(a[r]._id,t),console.log(a[r]._id,t))}function uniqueServicesByHostsCIDR(){function c(r,i){for(var e="00000000",t=parseInt(r[0],10).toString(2),s=t.length>=e.length?t:e.slice(0,e.length-t.length)+t,l=1;l<=r.length;l++)t=parseInt(r[l],10).toString(2),s+=t.length>=e.length?t:e.slice(0,e.length-t.length)+t;return s.slice(0,parseInt(i,10))}var l=Session.get("projectId"),e=Array.prototype.slice.call(arguments,0),t=Hosts.find({projectId:l}).fetch(),n={},d={},r=[];t.forEach(function(o){var e=o.ipv4.split(".");n[c(e,32)]=o.ipv4,d[o.ipv4]=o._id}),e.forEach(function(t){t=t.split("/");var s=t[0].split("."),l=c(s,t[1]);for(var o in n)o.slice(0,parseInt(t[1],10))===l&&r.push(d[n[o]])});var o=Services.find({projectId:l,hostId:{$in:r}}).fetch();return _.uniq(_.pluck(o,"port")).sort(function(t,o){return t-o}).join(",")}function bulkRemoveHosts(r){var s=Session.get("projectId"),e=Meteor.user().emails[0].address,t=Hosts.find({projectId:s}).fetch();count=0,t.forEach(function(t){r.includes(t.ipv4)&&(Meteor.call("removeHost",s,t._id,function(o){o?console.log("Error removing "+t.ipv4+". "+o):Meteor.call("removeHostFromIssues",s,t._id)}),count++)}),console.log("Total of "+count+" host(s) removed.")}function changeHostsToSpecifiedColorByServicesOrIssues(h,f,v){function o(i,e,t){return 0===e||i.status===t[e-1].status}function u(o,e){Hosts.update({_id:o},{$set:{status:e,lastModifiedBy:l}})}function e(t){return Services.find({projectId:s,hostId:t}).fetch()}function i(o){var e=Hosts.findOne({_id:o}).ipv4;return Issues.find({projectId:s,"hosts.ipv4":e}).fetch()}function r(o){if("services"===h)return e(o);if("issues"===h)return i(o);throw{name:"Incorrect servicesOrIssues Selection",message:"Incorrect servicesOrIssues selection: \""+h+"\" is not a valid servicesOrIssues for this function"}}var s=Session.get("projectId"),l=Meteor.user().emails[0].address,c=0,d=0;if(-1===StatusMap.indexOf(v))throw console.log("Lair Supserviceed colors: "+StatusMap),{name:"Wrong lairColor",message:"Provided lairColor: \""+v+"\" is not Lair compliant"};var t=Hosts.find({projectId:s}).fetch();if("all"===f)t.forEach(function(t){u(t._id,v)}),d=t.length;else if("none"===f)t.forEach(function(o){var e=o._id,t=r(e).length;0>=t&&(u(e,v),c++)}),d=c;else if(-1!==StatusMap.indexOf(f))t.forEach(function(t){var e=!1,i=t._id,l=r(i);e=0<l.length&&l[0].status===f&&l.every(o),e&&(u(i,v),c++),d=c});else if("same"===f)t.forEach(function(i){var e=!1,n=i._id,s=r(n);e=s.every(o),e&&(u(n,v),c++),d=c});else if("diff"===f)t.forEach(function(i){var e=!1,n=i._id,s=r(n);e=!s.every(o),e&&(u(n,v),c++),d=c});else throw{name:"Incorrect statusOption Selection",message:"Incorrect statusOption selection: \""+f+"\" is not a valid statusOption for this function"};console.log("Total of "+d+" host(s) updated")}function changeServicesRegexToSpecifiedColor(s,l){var e=Session.get("projectId"),t=Meteor.user().emails[0].address;if("lair-grey"!==l&&"lair-blue"!==l&&"lair-green"!==l&&"lair-orange"!==l&&"lair-red"!==l)return void console.log("Invalid color specified");var o=Services.find({projectId:e,service:{$regex:s}}).fetch();return 1>o.length?void console.log("No services found"):void(o.forEach(function(o){Services.update({_id:o._id},{$set:{status:l,lastModifiedBy:t}})}),console.log("Total of "+o.length+" service(s) updated to "+l+"."))}function changeServicesToColorByPort(s,l){var e=Session.get("projectId"),t=Meteor.user().emails[0].address;if("lair-grey"!==l&&"lair-blue"!==l&&"lair-green"!==l&&"lair-orange"!==l&&"lair-red"!==l)return void console.log("Invalid color specified");var o=Services.find({projectId:e,port:s}).fetch();return 1>o.length?void console.log("No services found"):void(o.forEach(function(o){Services.update({_id:o._id},{$set:{status:l,last_modifiedBy:t}})}),console.log("Total of "+o.length+" service(s) updated to "+l+"."))}function changeServicesToSpecifiedColor(s,l){var e=Session.get("projectId"),t=Meteor.user().emails[0].address;if("lair-grey"!==l&&"lair-blue"!==l&&"lair-green"!==l&&"lair-orange"!==l&&"lair-red"!==l)return void console.log("Invalid color specified");var o=Services.find({projectId:e,service:s}).fetch();return 1>o.length?void console.log("No services found"):void(o.forEach(function(o){Services.update({_id:o._id},{$set:{status:l,last_modifiedBy:t}})}),console.log("Total of "+o.length+" service(s) updated to "+l+"."))}function changeServicesToSpecifiedColorByProduct(s,l){var e=Session.get("projectId"),t=Meteor.user().emails[0].address;if("lair-grey"!==l&&"lair-blue"!==l&&"lair-green"!==l&&"lair-orange"!==l&&"lair-red"!==l)return void console.log("Invalid color specified");var o=Services.find({projectId:e,product:s}).fetch();return 1>o.length?void console.log("No services found"):void(o.forEach(function(o){Services.update({_id:o._id},{$set:{status:l,last_modifiedBy:t}})}),console.log("Total of "+o.length+" service(s) updated to "+l+"."))}function changeServicesToSpecifiedColor(s,l){var e=Session.get("projectId"),t=Meteor.user().emails[0].address;if("lair-grey"!==l&&"lair-blue"!==l&&"lair-green"!==l&&"lair-orange"!==l&&"lair-red"!==l)return void console.log("Invalid color specified");var o=Services.find({projectId:e,service:s}).fetch();return 1>o.length?void console.log("No services found"):void(o.forEach(function(o){console.log("Updating: "+o.service+"/"+o.protocol),Services.update({_id:o._id},{$set:{status:l,last_modified_by:t}})}),console.log("Total of "+o.length+" service(s) updated"))}function countHostServicesBycolor(s){var l={},t=Session.get("projectId");if(-1===StatusMap.indexOf(s))throw console.log("Lair Supserviceed colors: "+StatusMap),{name:"Wrong color",message:"Provided color: \""+s+"\" is not Lair compliant"};var e=Services.find({projectId:t,status:s}).fetch();for(var o in e.forEach(function(i){o=Hosts.findOne({projectId:t,_id:i.hostId}),l.hasOwnProperty(o.ipv4)?l[o.ipv4]++:l[o.ipv4]=1}),l)console.log(o+" ("+l[o]+")")}function countHostServicesBycolor(s){var l={},t=Session.get("projectId");if(-1===StatusMap.indexOf(s))throw console.log("Lair Supserviceed colors: "+StatusMap),{name:"Wrong color",message:"Provided color: \""+s+"\" is not Lair compliant"};var e=Services.find({projectId:t,status:s}).fetch();for(var o in e.forEach(function(i){o=Hosts.findOne({projectId:t,_id:i.hostId}),l.hasOwnProperty(o.ipv4)?l[o.ipv4]++:l[o.ipv4]=1}),l)console.log(o+" ("+l[o]+")")}function deleteHostServicesByTool(s,e){var t=Session.get("projectId"),o=Hosts.findOne({projectId:t,ipv4:s});if("undefined"==typeof o)return void console.log("No matching host found");var i=Services.find({projectId:t,hostId:o._id,lastModifiedBY:e}).fetch();1>i.length&&console.log("No matching Services found"),i.forEach(function(o){console.log("Removing "+o.protocol+"/"+o.service),Meteor.call("removeService",t,o._id,function(){})}),console.log("Total of "+i.length+" service(s) removed.")}function deleteHostsByCIDR(){function d(i,e){for(var t="00000000",o=parseInt(i[0],10).toString(2),c=o.length>=t.length?o:t.slice(0,t.length-o.length)+o,n=1;n<=i.length;n++)o=parseInt(i[n],10).toString(2),c+=o.length>=t.length?o:t.slice(0,t.length-o.length)+o;return c.slice(0,parseInt(e,10))}var a=Session.get("projectId"),e=Array.prototype.slice.call(arguments,0),t=Hosts.find({projectId:a}).fetch(),i={},r={},s=0;t.forEach(function(e){var t=e.ipv4.split(".");i[d(t,32)]=e.ipv4,r[e.ipv4]=e._id}),e.forEach(function(e){e=e.split("/");var t=e[0].split("."),l=d(t,e[1]);for(var c in i)c.slice(0,parseInt(e[1],10))===l&&(Meteor.call("removeHost",a,r[i[c]],function(t){t||Meteor.call("removeHostFromIssues",a,i[c])}),s++);console.log("Total of "+s+" host(s) removed.")})}function deleteHostsByStatus(i){var r=Session.get("projectId"),e=Hosts.find({projectId:r,status:i}).fetch();return 1>e.length?void console.log("No matching hosts found"):void(e.forEach(function(t){console.log("Removing "+t.ipv4),Meteor.call("removeHost",r,t._id,function(e){e||Meteor.call("removeHostFromIssues",r,t.ipv4)})}),console.log("Total of "+e.length+" host(s) removed."))}function deleteIssuesByStatus(i){var r=Session.get("projectId"),e=Issues.find({projectId:r,status:i}).fetch();return 1>e.length?void console.log("No matching Issues found"):void(e.forEach(function(t){console.log("Removing "+t.title),Meteor.call("removeIssue",r,t._id)}),console.log("Total of "+e.length+" Issue(s) removed."))}function deleteIssuesWithNoHosts(){var o=Session.get("projectId"),e=Issues.find({projectId:o,hosts:{$size:0}}).fetch();return 1>e.length?void console.log("No orphaned issues present"):void(e.forEach(function(e){console.log("Removing: "+e.title),Meteor.call("removeIssue",o,e._id,function(){})}),console.log("Total of "+e.length+" vuln(s) removed"))}function deleteServices(s,e,t){var o=Session.get("projectId"),i=Services.find({projectId:o,port:s,protocol:e,service:t});i.forEach(function(t){console.log("Removing Service : "+t._id+" "+t.port+"/"+t.protocol+" "+t.service),Meteor.call("removeService",o,t.hostId,t._id)})}function dumpIssueEvidence(){var o=Session.get("projectId"),e=Issues.find({projectId:o}).fetch();e.forEach(function(t){console.log(t.title),console.log(t.evidence)})}function dumpServiceNotes(c,n){var e=Session.get("projectId"),d=new RegExp(c,"i"),t=Services.find({projectId:e,notes:{$elemMatch:{title:{$regex:c,$options:"i"}}}},{notes:1,hostId:1}).fetch(),o=_.pluck(t,"hostId"),i=Hosts.find({_id:{$in:o}},{sort:{longIpv4Addr:1},ipv4:1}).fetch();i.forEach(function(i){""!==n&&n!==i.ipv4||(t=Services.find({hostId:i._id},{sort:{service:1},notes:1,service:1,protocol:1}).fetch(),t.forEach(function(e){e.notes.forEach(function(t){d.test(t.title)&&console.log(i.ipv4+":"+e.port+"/"+e.protocol+" - "+t.title+"\n"+t.content)})}))})}function filterHostsNoServices(){}function findNoteByRegex(s,e){var l=Session.get("projectId"),o=new RegExp(s,"i");if("project"===e||"all"===e){console.log("Project Notes");var t=Projects.findOne({_id:l},{notes:1});t.notes.forEach(function(t){(o.test(t.title)||o.test(t.content))&&console.log("\t"+t.title)})}("host"===e||"all"===e)&&(console.log("Host Notes"),Hosts.find({projectId:l,$or:[{notes:{$elemMatch:{title:{$regex:s,$options:"i"}}}},{notes:{$elemMatch:{content:{$regex:s,$options:"i"}}}}]},{notes:1}).fetch().forEach(function(i){i.notes.forEach(function(e){(o.test(e.title)||o.test(e.content))&&console.log("\t"+i.ipv4+" -> "+e.title)})})),("service"===e||"all"===e)&&(console.log("Service Notes"),Services.find({projectId:l,$or:[{notes:{$elemMatch:{title:{$regex:s,$options:"i"}}}},{notes:{$elemMatch:{content:{$regex:s,$options:"i"}}}}]},{notes:1}).fetch().forEach(function(i){i.notes.forEach(function(e){if(o.test(e.title)||o.test(e.content)){var t=Hosts.findOne({projectId:l,_id:i.hostId});console.log("\t"+t.ipv4+" -> "+i.service.toString()+" -> "+e.title)}})})),("Issue"===e||"all"===e)&&(console.log("Issue Notes"),Issues.find({projectId:l,$or:[{evidence:{$regex:s,$options:"i"}},{notes:{$elemMatch:{title:{$regex:s,$options:"i"}}}},{notes:{$elemMatch:{content:{$regex:s,$options:"i"}}}}]},{notes:1}).fetch().forEach(function(i){o.test(i.evidence)&&console.log("\t"+i.title+" -> Evidence Field"),i.notes.forEach(function(e){(o.test(e.title)||o.test(e.content))&&console.log("\t"+i.title+" -> "+e.title)})}))}function generateIssueBulkListByRegex(r){var s=Session.get("projectId"),e=Services.find({projectId:s,service:{$regex:r}}).fetch(),t=[];e.forEach(function(i){var e=Hosts.findOne({projectId:s,_id:i.hostId});t.push(e.ipv4+","+i.port+","+i.protocol)}),console.log(t.join("\n"))}function generatePortStringFromService(i){var e=Session.get("projectId"),t=Services.find({projectId:e,service:i}).fetch();return _.uniq(_.pluck(t,"port")).sort(function(o,e){return o-e}).join(",")}function generateUniquePortString(r){var e=Session.get("projectId"),t={projectId:e};"undefined"!=typeof r&&(t.protocol=r);var o=Services.find(t).fetch();return _.uniq(_.pluck(o,"port")).sort(function(o,e){return o-e}).join(",")}function generateURLList(){var n=Session.get("projectId"),e=Hosts.find({projectId:n}).fetch();if(!e)return void console.log("No hosts found");var l=0,c=[];e.forEach(function(o){var t=o.hostnames,e=o._id,i={projectId:n,hostId:e};i.service={$regex:"web|www|ssl|http|https",$options:"i"};var r=Services.find(i).fetch();r.forEach(function(i){var e="http://";i.service.match(/(ssl|https)/gi)&&(e="https://"),l++,c.push(e+o.ipv4+":"+i.port),t.forEach(function(o){l++,c.push(e+o+":"+i.port)})})}),console.log(c.join("\n")),console.log(l+" URL(s) generated")}function generateWebDiscoTargetList(){var n=Session.get("projectId"),e=Hosts.find({projectId:n}).fetch();if(1>e.length)return void console.log("No hosts found");var s=0;e.forEach(function(o){var t=o.hostnames,e=o._id,i={projectId:n,hostId:e};i.service={$regex:"web|www|ssl|http|https",$options:"i"};var r=Services.find(i).fetch(),l=[];r.forEach(function(c){var n="http";c.service.match(/(ssl|https)/g)&&(n="https"),c.notes.forEach(function(t){t.content.match(/SSL/)&&(n="https")}),s++,l.push(n+","+o.ipv4+","+c.port+","),t.forEach(function(e){s++,l.push(n+","+o.ipv4+","+c.port+","+e)})})}),console.log(urls.join("\n")),console.log(s+" URL(s) generated")}function getHostsByCIDR(){function l(i,e){for(var t="00000000",o=parseInt(i[0],10).toString(2),c=o.length>=t.length?o:t.slice(0,t.length-o.length)+o,n=1;n<=i.length;n++)o=parseInt(i[n],10).toString(2),c+=o.length>=t.length?o:t.slice(0,t.length-o.length)+o;return c.slice(0,parseInt(e,10))}var e=Array.prototype.slice.call(arguments,0),t=Hosts.find({projectId:Session.get("projectId")}).fetch(),c={};t.forEach(function(e){var t=e.ipv4.split(".");c[l(t,32)]=e.ipv4}),e.forEach(function(e){e=e.split("/");var i=e[0].split("."),o=l(i,e[1]);for(var r in c)r.slice(0,parseInt(e[1],10))===o&&console.log(c[r])})}function getPersonByDepartmentRegex(i){if(i&&"object"!=typeof i)return console.log("Department regex can not be a string, must be an object");var e=Session.get("projectId"),t=People.find({projectId:e,department:{$regex:i}}).fetch();t.forEach(function(t){console.log("'"+t.principalName+"','"+t.department+"','"+t.emails.join(" ")+"'")}),console.log("returned: "+t.len()+" results")}function getPersonEmail(){var o=Session.get("projectId"),e=People.find({projectId:o}).fetch();e.forEach(function(t){console.log("'"+t.principalName+"','"+t.department+"','"+t.emails.join(" ")+"'")}),console.log("returned: "+e.length+" results")}function greyServicesBlue(){var i=Session.get("projectId"),r=Meteor.user().emails[0].address,e=Services.find({projectId:i,status:"lair-grey"}).fetch();return 1>e.length?void console.log("No services found"):void(e.forEach(function(t){Services.update({_id:t._id},{$set:{status:"lair-blue",last_modifiedBy:r}})}),console.log("Total of "+e.length+" service(s) updated to lair-blue."))}function greyHostsNoServicesGreen(){var r=Session.get("projectId"),s=Meteor.user().emails[0].address,e=Hosts.find({projectId:r,status:"lair-grey"}).fetch();if("undefined"==typeof e||0===e.length)return void console.log("No hosts found");var t=0;e.forEach(function(i){var e=Services.find({hostId:i._id,port:{$gt:0}}).count();0===e&&(t++,console.log("Updating: "+i.ipv4),Hosts.update({_id:i._id},{$set:{status:"lair-green",last_modified_by:s}}))}),console.log(t+" host(s) updated")}function hostnamesToNessus(){var o=Hosts.find({projectId:Session.get("projectId")}).fetch(),i=[];o.forEach(function(t){var r=t.ipv4;t.hostnames.forEach(function(t){i.push(t+"["+r+"]")})}),i.forEach(function(t){console.log(t)})}function iisOsProfiler(){var o=Session.get("projectId"),e=Services.find({projectId:o,product:{$regex:/IIS\s(httpd\s)?\d+\.\d+/,$options:"i"}}).fetch();e.forEach(function(l){var e=l.product,t=e.match(/\d+\.\d+/);if(null!==t){var i=parseFloat(t[0]);if(!isNaN(i)){var r=Models.os();r.tool="IIS OS Profiler",r.weight=90,6>i?r.fingerprint="Microsoft Windows Server 2000":7>i?r.fingerprint="Microsoft Windows Server 2003":8>i?r.fingerprint="Microsoft Windows Server 2008":9>i?r.fingerprint="Microsoft Windows Server 2012":11>i&&(r.fingerprint="Microsoft Windows Server 2016"),""!==r.fingerprint&&Meteor.call("setOs",o,l.hostId,r.tool,r.fingerprint,r.weight,function(t){t?console.log("Error generating OS for",l.hostId,t):console.log("Created new OS",r.fingerprint,"for",l.hostId)})}}})}function listHostServicesBycolor(i){var r=Session.get("projectId");if(-1===StatusMap.indexOf(i))throw console.log("Lair Supserviceed colors: "+StatusMap),{name:"Wrong color",message:"Provided color: \""+i+"\" is not Lair compliant"};var e=Services.find({projectId:r,status:i}).fetch();e.forEach(function(t){var e=Hosts.findOne({projectId:r,_id:t.hostId});console.log(e.ipv4+":"+t.port+"/"+t.protocol)})}function listHostServicesByServiceRegex(i){var r=Session.get("projectId"),e=Services.find({projectId:r,service:{$regex:i}}).fetch();return 1>e.length?void console.log("No services found"):void e.forEach(function(t){var e=Hosts.findOne({projectId:r,_id:t.hostId});console.log(e.ipv4+":"+t.port+"/"+t.protocol)})}function listHostsByIssueTitle(s){var e=Session.get("projectId"),t=Issues.findOne({projectId:e,title:s}),o="";if(!t)return void console.log("Issue not found");var l=t.hosts;l.forEach(function(t){console.log(t.ipv4+":"+t.port+"/"+t.protocol),o+=t.ipv4+", "}),console.log("RHOSTS: "+o.slice(0,-2))}function listHostsByIssueTitleRegex(r){var e=Session.get("projectId"),t=Issues.find({projectId:e,title:{$regex:r}}).fetch(),o="";return 1>t.length?void console.log("No issues found"):void t.forEach(function(i){console.log(i.title);var e=i.hosts;e.forEach(function(t){console.log(t.ipv4+":"+t.port+"/"+t.protocol),o+=t.ipv4+", "}),console.log("RHOSTS: "+o.slice(0,-2)),o=""})}function listHostByTag(o){var e=Hosts.find({projectId:Session.get("projectId"),tags:o}).fetch();e.forEach(function(t){console.log(t.ipv4)})}function listUnknownOpenServices(d,e){var t=Session.get("projectId"),o=[],i=[],a=[],g=Hosts.find({projectId:t}).fetch();if(g.forEach(function(r){var s=Services.find({projectId:t,hostId:r._id}).fetch();s.forEach(function(e){0<e.port&&("product"===d?"unknown"===e.product.toLowerCase()&&(o.push(r.ipv4),"tcp"===e.protocol?i.push(e.port):"udp"===e.protocol&&a.push(e.port)):"service"===d?"unknown"===e.service.toLowerCase()&&(o.push(r.ipv4),"tcp"===e.protocol?i.push(e.port):"udp"===e.protocol&&a.push(e.port)):"both"==d&&("unknown"===e.service.toLowerCase()||"unknown"===e.product.toLowerCase())&&(o.push(r.ipv4),"tcp"===e.protocol?i.push(e.port):"udp"===e.protocol&&a.push(e.port)))}),"nmap"===e&&(0<i.length&&0<a.length?console.log("nmap -v -sV --version-all -sS -sU "+r.ipv4+" -p T:"+i.toString()+",U:"+a.toString()):0<i.length?console.log("nmap -v -sV --version-all -sS "+r.ipv4+" -p "+i.toString()):0<a.length&&console.log("nmap -v -sV --version-all -sU "+r.ipv4+" -p "+a.toString()),i=[],a=[]),"hostAndPort"===e&&(0<i.length&&i.forEach(function(t){console.log(r.ipv4+":"+t.toString())}),0<a.length&&a.forEach(function(t){console.log(r.ipv4+":"+t.toString())}))}),(0<i.length||0<a.length)&&"list"===e){var l=i.filter(function(o,e){return i.indexOf(o)===e}),c=a.filter(function(o,e){return a.indexOf(o)===e});console.log("Hosts:"),console.log(o.toString()),console.log("TCP Services:"),console.log(l.sort(function(o,e){return o-e}).toString()),console.log("UDP Services:"),console.log(c.sort(function(o,e){return o-e}).toString())}}function mergeDuplicateIssues(){for(var l=Session.get("projectId"),e=Issues.find({projectId:l}).fetch(),t=e.sort((o,e)=>o.title>e.title?1:-1),o=Hosts.find({projectId:l}).fetch(),i=0;i<t.length-1;i++)source=t[i+1],dest=t[i],source.title==dest.title&&source.cvss==dest.cvss&&(console.log("found match: "+dest.title),console.log(source.hosts.length+" hosts to move."),source.notes.forEach(function(e){console.log("Adding Note"),Meteor.call("addIssueNote",l,dest._id,e.title,e.content)}),source.hosts.forEach(function(e){o.forEach(function(t){var o=Services.findOne({projectId:l,hostId:t._id,port:e.port,protocol:e.protocol});t.ipv4==e.ipv4&&null!=o&&(console.log("Added "+e.ipv4+" to "+dest.title),Meteor.call("removeHostFromIssue",l,source._id,e.ipv4,e.port,e.protocol),Meteor.call("addHostToIssue",l,dest._id,e.ipv4,e.port,e.protocol))})}),source.cves.forEach(function(e){dest.cves.includes(e)||(console.log("Adding CVE "+e),Meteor.call("addCVE",l,dest._id,e))}),source.evidence!=dest.evidence&&(dest.evidence+="\n\n"+source.evidence,console.log("Updating Evidence."),Meteor.call("setIssueEvidence",l,dest._id,dest.evidence)),console.log("Removing issue."),Meteor.call("removeIssue",l,source._id))}function mergeIssues(y,e,t,o,i,r,x){function l(o){T.forEach(function(e){Meteor.call("addIssueNote",d,o,e.title,e.content)}),P.forEach(function(e){Meteor.call("addHostToIssue",d,o,e.ipv4,e.port,e.protocol)}),$.forEach(function(e){Meteor.call("addCVE",d,o,e)}),M.forEach(function(e){Meteor.call("addReference",d,o,e.link,e.name)}),c()}function c(){console.log("Removing Issues"),a.forEach(function(t){Meteor.call("removeIssue",d,t._id)})}function n(i){for(var e,l={},o=[],r=0,n=i.length;r<n;++r)e=JSON.stringify(i[r]),l.hasOwnProperty(e)||(l[e]=!0,o.push(i[r]));return o}if("object"!=typeof y)return console.log("Issue regex can not be a string, must be a object");if("string"!=typeof i)return console.log("Invalid title");if("string"!=typeof r)return console.log("Invalid cvss. Variable must be a string");var d=Session.get("projectId"),a=Issues.find({projectId:d,title:{$regex:y},cvss:{$gte:e,$lte:t},"hosts.ipv4":{$regex:o}}).fetch();if(1>a.length)return console.log("Did not find any issues with the given regex");var g=0;if(a.sort(function(o,e){return o.cvss>e.cvss?-1:o.cvss<e.cvss?1:0}),a.forEach(function(t){console.log("CVSS: "+t.cvss+" - Hosts: "+t.hosts.length+" - Title: "+t.title),t.cvss>g&&(g=t.cvss)}),console.log("Total found: "+a.length+" Highest CVSS: "+g),x){"max"===r&&(r=g);var b=Issues.findOne({projectId:d,title:i});"undefined"!=typeof b&&(a.push(b),Meteor.call("removeIssue",d,b._id)),console.log("Going to merge "+a.length+" issues");var h="",w="",N="",T=[],M=[],H=[],C=[],L=[];a.forEach(function(t){h=h+"CVSS: "+t.cvss+" - Hosts: "+t.hosts.length+" - Title: "+t.title+"\n",w="",N="",M=M.concat(t.references),T=T.concat(t.notes),H=H.concat(t.cves),C=C.concat(t.hosts),L=L.concat(t.files)});var P=n(C),$=n(H);return Meteor.call("createIssue",d,i,r,h,N,w,function(o,e){o?(console.log("Error: could not create new Issue",o.message),b&&console.log("Looks like you lost",b.title)):l(e)}),console.log("Complete")}}function getHostList(i){for(var e="",r=0;r<i.hosts.length;r++)e+=i.hosts[r].ipv4+",";return e+"\n"}function mergeIssuesByTitle(I,e,t){function o(o){E.forEach(function(e){Meteor.call("addIssueNote",s,o,e.title,e.content)}),O.forEach(function(e){Meteor.call("addHostToIssue",s,o,e.ipv4,e.port,e.protocol)}),v.forEach(function(e){Meteor.call("addCVE",s,o,e)}),i()}function i(){l.forEach(function(t){Meteor.call("removeIssue",s,t._id)})}function r(i){for(var e,l={},o=[],r=0,n=i.length;r<n;++r)e=JSON.stringify(i[r]),l.hasOwnProperty(e)||(l[e]=!0,o.push(i[r]));return o}if("object"!=typeof I)return console.log("Issue regex can not be a string, must be a object");if("string"!=typeof e)return console.log("Invalid title");if("number"!=typeof t)return console.log("Invalid cvss. Variable must be a number");var s=Session.get("projectId"),l=Issues.find({projectId:s,title:{$regex:I}}).fetch();if(1>l.length)return console.log("Did not find any issues with the given regex");var c=Issues.findOne({projectId:s,title:e});"undefined"!=typeof c&&(l.push(c),Meteor.call("removeIssue",s,c._id)),console.log("Going to merge "+l.length+" issues");var n="",j="",m="",E=[],S=[],$=[];l.forEach(function(t){issue_hosts=getHostList(t),n+="\n\nFrom "+t.title+"\nAffected Hosts: "+issue_hosts+t.description,j+="\n\nFrom "+t.title+"\nAffected Hosts: "+issue_hosts+t.solution,m+="\n\nFrom "+t.title+"\nAffected Hosts: "+issue_hosts+t.evidence,E=E.concat(t.notes),S=S.concat(t.cves),$=$.concat(t.hosts)});var O=r($),v=r(S);return Meteor.call("createIssue",s,e,t,n,m,j,function(i,e){i?(console.log("Error: could not create new Issue",i.message),c&&console.log("Looks like you lost",c.title)):o(e)}),console.log("Complete")}function negateHostsByCIDR(){function l(i,e){for(var t="00000000",o=parseInt(i[0],10).toString(2),c=o.length>=t.length?o:t.slice(0,t.length-o.length)+o,n=1;n<=i.length;n++)o=parseInt(i[n],10).toString(2),c+=o.length>=t.length?o:t.slice(0,t.length-o.length)+o;return c.slice(0,parseInt(e,10))}var e=Array.prototype.slice.call(arguments,0),t=Hosts.find({projectId:Session.get("projectId")}).fetch(),c={};for(var o in t.forEach(function(e){var t=e.ipv4.split(".");c[l(t,32)]=e.ipv4}),e.forEach(function(e){e=e.split("/");var i=e[0].split("."),o=l(i,e[1]);for(var r in c)r.slice(0,parseInt(e[1],10))===o&&delete c[r]}),c)console.log(c[o])}function niktoHostList(l,c){function t(t,r){var e=Hosts.findOne({projectId:i,_id:t});e.ipv4+":"+r in n||(n[e.ipv4+":"+r]=!0),c&&e.hostnames.forEach(function(t){c.test(t)&&!(t+":"+r in n)&&(n[t+":"+r]=!0)})}if(c&&"object"!=typeof c)return console.log("Domain regex can not be a string, must be an object");var n={},i=Session.get("projectId");for(var e in l.forEach(function(o){var e=[];if("object"==typeof o)e=Services.find({projectId:i,service:{$regex:o}}).fetch(),e.forEach(function(o){t(o.hostId,o.port)});else if("string"==typeof o)for(var r=o.split("-"),s=parseInt(r[0],10);s<=parseInt(r[1],10);s++)e=Services.find({projectId:i,service:s}).fetch(),e.forEach(function(o){t(o.hostId,o.port)});else{var l=Services.findOne({projectId:i,service:o});t(l.hostId,o.port)}}),n)console.log(e)}function niktoTopFindings(c,n){var t={},o=Session.get("projectId"),d=["(.*might be interesting.*)","(.*Public HTTP Methods:.*PUT.*)","(.*[Ww]eb[Dd]av.*)","(.*Directory indexing found.*)","(.*default file found.*)","(.*Server leaks.*IP.*)","(.*OSVDBID:.*)"];0<c.length&&(d=c);var e=Services.find({projectId:o}).fetch();if(e.forEach(function(i){var r=Hosts.findOne({projectId:o,_id:i.hostId});i.notes.forEach(function(o){if(/Nikto/.test(o.title)){var e=o.title.match(/\(.*\)/);if(n){var i=new RegExp(d.join("|")+"\\n","g"),s=o.content.match(i);s&&(!t[r.ipv4+" "+e]&&(t[r.ipv4+" "+e]=[]),t[r.ipv4+" "+e].push(s.join("")))}else console.log(r.ipv4+" "+e),console.log(o.content)}})}),n)for(var i in t)console.log(i),console.log(t[i].join(""))}function NormalizeProtocols(){var r=Session.get("projectId"),s=Meteor.user().emails[0].address,e=Services.find({projectId:r}).fetch();if(1>e.length)return void console.log("No services found");var t=0;e.forEach(function(o){o.protocol!=o.protocol.toLowerCase()&&(Services.update({_id:o._id},{$set:{protocol:o.protocol.toLowerCase(),last_modifiedBy:s}}),t++)}),console.log("Total of "+t+" service(s) updated.")}function NormalizeUnknownProducts(){var r=Session.get("projectId"),s=Meteor.user().emails[0].address,e=Services.find({projectId:r}).fetch();if(1>e.length)return void console.log("No services found");var t=0;e.forEach(function(o){"unknown"==o.product.toLowerCase()&&(Services.update({_id:o._id},{$set:{product:"",last_modifiedBy:s}}),t++)}),console.log("Total of "+t+" service(s) updated.")}function removePort0ServicesNoReference(){var n=Session.get("projectId"),d=[],t=[],e=[],o=Hosts.find({projectId:n}).fetch();o.forEach(function(t){var e=t._id,o=Services.find({projectId:n,hostId:t._id}).fetch();o.forEach(function(o){if(0>=o.port&&1>o.notes){var e={ip:t.ipv4,service:o};d.push(e)}})});var i=Issues.find({projectId:n}).fetch();i.forEach(function(o){o.hosts.forEach(function(o){if(0==o.port)for(var e=0;e<d.length;e++)d[e].ip==o.ipv4&&o.protocol==d[e].service.protocol&&t.push(d[e].service._id)})});for(var r=0;r<d.length;r++){for(var s=0;s<t.length;s++)if(d[r].service._id==t[s])continue;e.push(d[r].service)}console.log("Removing "+e.length+" out of "+d.length+" port 0 services");for(var r=0;r<e.length;r++)console.log("Removing ServiceID: "+e[r]._id),Meteor.call("removeService",n,e[r].hostId,e[r]._id,function(){})}function removeIPBasedHostnames(){var t=Hosts.find({projectId:Session.get("projectId")}).fetch();t.forEach(function(i){var r=i.ipv4,t=[];i.hostnames.forEach(function(o){if(o.includes(r))return void console.log("removing "+o);if(o.includes(r.replace(/\./g,"_")))return void console.log("removing "+o);if(o.includes(r.replace(/\./g,"-")))return void console.log("removing "+o);var e=r.split(".").reverse().join(".");return o.includes(e)?void console.log("removing "+o):o.includes(e.replace(/\./g,"_"))?void console.log("removing "+o):o.includes(e.replace(/\./g,"-"))?void console.log("removing "+o):void t.push(o)}),Hosts.update({_id:i._id},{$set:{hostnames:t,lastModifiedBy:Meteor.user().emails[0].address}})})}function removeHostnamesByPattern(i){var e=Hosts.find({projectId:Session.get("projectId")}).fetch();e.forEach(function(e){var r=[];e.hostnames.forEach(function(e){return e.includes(i)?void console.log("removing "+e):void r.push(e)}),Hosts.update({_id:e._id},{$set:{hostnames:r,lastModifiedBy:Meteor.user().emails[0].address}})})}function searchServiceNoteContent(c,e){var t=Session.get("projectId"),o=new RegExp(c,"i"),i=new RegExp(e,"g"),r=[],s=Services.find({projectId:t,notes:{$elemMatch:{title:{$regex:c,$options:"i"}}}},{notes:1,hostId:1}).fetch();s.forEach(function(t){t.notes.forEach(function(t){o.test(t.title)&&r.push.apply(r,t.content.match(i))})}),console.log(function(i){for(var e={},t=[],o=0,l=i.length;o<l;++o)e.hasOwnProperty(i[o])||(t.push(i[o]),e[i[o]]=1);return t}(r).join("\n"))}function servicesToColorByHosts(c,n,d){var o=Session.get("projectId"),e=Meteor.user().emails[0].address,i=0,a={"lair-red":4,"lair-orange":3,"lair-blue":2,"lair-green":0,"lair-grey":0};if(-1===StatusMap.indexOf(d))throw console.log("Lair Supserviceed colors: "+StatusMap),{name:"Wrong Color",message:"Provided color: \""+d+"\" is not Lair compliant"};c.forEach(function(s){var e=Hosts.findOne({projectId:o,ipv4:s}),t=Services.find({hostId:e._id,port:n}).fetch();1>t.length||t.forEach(function(r){console.log("Updating: "+s+":"+r.port+"/"+r.protocol),Meteor.call("setPortStatus",o,r._id,d),a[d]>a[e.status]&&(console.log("Updating: "+s+" status \""+d+"\""),Meteor.call("setHostStatus",o,e._id,d)),i++})}),console.log(i+" service(s) updated")}function setGlobalServiceByPort(s,e,t){var o=Session.get("projectId"),i=Services.find({projectId:o,port:s,protocol:e,service:{$ne:t}});i.forEach(function(i){Meteor.call("setServiceService",o,i._id,t,function(t){t||console.log("Modified service successfully")})})}function setHostOsByOsRegex(s,l,t){var o=Session.get("projectId"),e=Hosts.find({projectId:o,"os.fingerprint":{$regex:s}}).fetch();return 1>e.length?void console.log("No hosts found"):void e.forEach(function(i){Meteor.call("setOs",o,i._id,"Manual",l,t,function(e){return e?void console.log("Unable to update host "+i.ipv4):void console.log("Updated host "+i.ipv4)})})}function setHostServiceByPort(l,c,t,o){var i=Session.get("projectId"),l=Hosts.findOne({projectId:i,ipv4:l}),r=Services.find({projectId:i,hostId:l._id,port:{$in:c},protocol:t,service:{$ne:o}});r.forEach(function(t){Meteor.call("setServiceService",i,t._id,o,function(t){t||console.log("Modified service successfully")})})}function tagHostsByCIDR(n,e){function d(o,e){return check(o,Matchers.isObjectId),check(e,Matchers.isNonEmptyString),Hosts.update({_id:o},{$addToSet:{tags:e},$set:{lastModifiedBy:Meteor.user().emails[0].address}})}function o(i,e){for(var t="00000000",o=parseInt(i[0],10).toString(2),c=o.length>=t.length?o:t.slice(0,t.length-o.length)+o,n=1;n<=i.length;n++)o=parseInt(i[n],10).toString(2),c+=o.length>=t.length?o:t.slice(0,t.length-o.length)+o;return c.slice(0,parseInt(e,10))}var i=Hosts.find({projectId:Session.get("projectId")}).fetch(),r={};i.forEach(function(i){var e=i.ipv4.split(".");r[o(e,32)]=i}),cidr=e.split("/");var e=cidr[0].split("."),s=o(e,cidr[1]);for(var l in r)l.slice(0,parseInt(cidr[1],10))===s&&(d(r[l]._id,n),console.log(r[l]._id,n))}function uniqueServicesByHostsCIDR(){function n(i,e){for(var t="00000000",o=parseInt(i[0],10).toString(2),c=o.length>=t.length?o:t.slice(0,t.length-o.length)+o,n=1;n<=i.length;n++)o=parseInt(i[n],10).toString(2),c+=o.length>=t.length?o:t.slice(0,t.length-o.length)+o;return c.slice(0,parseInt(e,10))}var e=Session.get("projectId"),t=Array.prototype.slice.call(arguments,0),o=Hosts.find({projectId:e}).fetch(),d={},r={},s=[];o.forEach(function(e){var t=e.ipv4.split(".");d[n(t,32)]=e.ipv4,r[e.ipv4]=e._id}),t.forEach(function(e){e=e.split("/");var l=e[0].split("."),o=n(l,e[1]);for(var i in d)i.slice(0,parseInt(e[1],10))===o&&s.push(r[d[i]])});var i=Services.find({projectId:e,hostId:{$in:s}}).fetch();return _.uniq(_.pluck(i,"port")).sort(function(o,e){return o-e}).join(",")}function bulkImportHosts(e){var t=Session.get("projectId"),o=Meteor.user().emails[0].address,i=Hosts.find({projectId:t}).fetch();e.forEach(function(e){var o=e,r="";if(-1!=e.indexOf(":")){var s=e.split(":");o=s[0],port=s[1],protocol=s[2],r=s[3],product=s[4],i.includes(o)&&console.log(o+" already exists in the project."),Meteor.call("createHost",t,o,"",""),console.log("Created host record for "+o);var l=Hosts.findOne({projectId:t,ipv4:o});if(null!=l){var r=Services.findOne({projectId:t,hostId:l._id,port:port});null==r?(Meteor.call("createService",t,l._id,port,protocol,r,product),console.log("Created service record for "+o+":"+port+"/"+protocol)):console.log("Service already exists on port "+o+":"+port+"/"+protocol)}}else i.includes(e)?console.log(e+" already exists in the project."):(Meteor.call("createHost",t,e,"",""),console.log("Created host record for "+e))})}function bulkRemoveHosts(e){var t=Session.get("projectId"),o=Meteor.user().emails[0].address,i=Hosts.find({projectId:t}).fetch();count=0,i.forEach(function(o){e.includes(o.ipv4)&&(Meteor.call("removeHost",t,o._id,function(e){e?console.log("Error removing "+o.ipv4+". "+e):Meteor.call("removeHostFromIssues",t,o._id)}),count++)}),console.log("Total of "+count+" host(s) removed.")}function changeHostsToSpecifiedColorByServicesOrIssues(e,t,o){function i(e,t,o){return!(0!==t)||e.status===o[t-1].status}function r(e,t){Hosts.update({_id:e},{$set:{status:t,lastModifiedBy:d}})}function s(e){return Services.find({projectId:n,hostId:e}).fetch()}function l(e){var t=Hosts.findOne({_id:e}).ipv4;return Issues.find({projectId:n,"hosts.ipv4":t}).fetch()}function c(t){if("services"===e)return s(t);if("issues"===e)return l(t);throw{name:"Incorrect servicesOrIssues Selection",message:"Incorrect servicesOrIssues selection: \""+e+"\" is not a valid servicesOrIssues for this function"}}var n=Session.get("projectId"),d=Meteor.user().emails[0].address,a=0,g=0;if(-1===StatusMap.indexOf(o))throw console.log("Lair Supserviceed colors: "+StatusMap),{name:"Wrong lairColor",message:"Provided lairColor: \""+o+"\" is not Lair compliant"};var p=Hosts.find({projectId:n}).fetch();if("all"===t)p.forEach(function(e){r(e._id,o)}),g=p.length;else if("none"===t)p.forEach(function(e){var t=e._id,i=c(t).length;0>=i&&(r(t,o),a++)}),g=a;else if(-1!==StatusMap.indexOf(t))p.forEach(function(e){var s=!1,l=e._id,n=c(l);s=0<n.length&&n[0].status===t&&n.every(i),s&&(r(l,o),a++),g=a});else if("same"===t)p.forEach(function(e){var t=!1,s=e._id,l=c(s);t=l.every(i),t&&(r(s,o),a++),g=a});else if("diff"===t)p.forEach(function(e){var t=!1,s=e._id,l=c(s);t=!l.every(i),t&&(r(s,o),a++),g=a});else throw{name:"Incorrect statusOption Selection",message:"Incorrect statusOption selection: \""+t+"\" is not a valid statusOption for this function"};console.log("Total of "+g+" host(s) updated")}function changeServicesRegexToSpecifiedColor(e,t){var o=Session.get("projectId"),i=Meteor.user().emails[0].address;if("lair-grey"!==t&&"lair-blue"!==t&&"lair-green"!==t&&"lair-orange"!==t&&"lair-red"!==t)return void console.log("Invalid color specified");var r=Services.find({projectId:o,service:{$regex:e}}).fetch();return 1>r.length?void console.log("No services found"):void(r.forEach(function(e){Services.update({_id:e._id},{$set:{status:t,lastModifiedBy:i}})}),console.log("Total of "+r.length+" service(s) updated to "+t+"."))}function changeServicesToColorByPort(e,t){var o=Session.get("projectId"),i=Meteor.user().emails[0].address;if("lair-grey"!==t&&"lair-blue"!==t&&"lair-green"!==t&&"lair-orange"!==t&&"lair-red"!==t)return void console.log("Invalid color specified");var r=Services.find({projectId:o,port:e}).fetch();return 1>r.length?void console.log("No services found"):void(r.forEach(function(e){Services.update({_id:e._id},{$set:{status:t,last_modifiedBy:i}})}),console.log("Total of "+r.length+" service(s) updated to "+t+"."))}function changeServicesToSpecifiedColor(e,t){var o=Session.get("projectId"),i=Meteor.user().emails[0].address;if("lair-grey"!==t&&"lair-blue"!==t&&"lair-green"!==t&&"lair-orange"!==t&&"lair-red"!==t)return void console.log("Invalid color specified");var r=Services.find({projectId:o,service:e}).fetch();return 1>r.length?void console.log("No services found"):void(r.forEach(function(e){Services.update({_id:e._id},{$set:{status:t,last_modifiedBy:i}})}),console.log("Total of "+r.length+" service(s) updated to "+t+"."))}function changeServicesToSpecifiedColorByProduct(e,t){var o=Session.get("projectId"),i=Meteor.user().emails[0].address;if("lair-grey"!==t&&"lair-blue"!==t&&"lair-green"!==t&&"lair-orange"!==t&&"lair-red"!==t)return void console.log("Invalid color specified");var r=Services.find({projectId:o,product:e}).fetch();return 1>r.length?void console.log("No services found"):void(r.forEach(function(e){Services.update({_id:e._id},{$set:{status:t,last_modifiedBy:i}})}),console.log("Total of "+r.length+" service(s) updated to "+t+"."))}function changeServicesToSpecifiedColor(e,t){var o=Session.get("projectId"),i=Meteor.user().emails[0].address;if("lair-grey"!==t&&"lair-blue"!==t&&"lair-green"!==t&&"lair-orange"!==t&&"lair-red"!==t)return void console.log("Invalid color specified");var r=Services.find({projectId:o,service:e}).fetch();return 1>r.length?void console.log("No services found"):void(r.forEach(function(e){console.log("Updating: "+e.service+"/"+e.protocol),Services.update({_id:e._id},{$set:{status:t,last_modified_by:i}})}),console.log("Total of "+r.length+" service(s) updated"))}function countHostServicesBycolor(e){var t={},o=Session.get("projectId");if(-1===StatusMap.indexOf(e))throw console.log("Lair Supserviceed colors: "+StatusMap),{name:"Wrong color",message:"Provided color: \""+e+"\" is not Lair compliant"};var i=Services.find({projectId:o,status:e}).fetch();for(var r in i.forEach(function(e){r=Hosts.findOne({projectId:o,_id:e.hostId}),t.hasOwnProperty(r.ipv4)?t[r.ipv4]++:t[r.ipv4]=1}),t)console.log(r+" ("+t[r]+")")}function countHostServicesBycolor(e){var t={},o=Session.get("projectId");if(-1===StatusMap.indexOf(e))throw console.log("Lair Supserviceed colors: "+StatusMap),{name:"Wrong color",message:"Provided color: \""+e+"\" is not Lair compliant"};var i=Services.find({projectId:o,status:e}).fetch();for(var r in i.forEach(function(e){r=Hosts.findOne({projectId:o,_id:e.hostId}),t.hasOwnProperty(r.ipv4)?t[r.ipv4]++:t[r.ipv4]=1}),t)console.log(r+" ("+t[r]+")")}function deleteHostServicesByTool(e,t){var o=Session.get("projectId"),i=Hosts.findOne({projectId:o,ipv4:e});if("undefined"==typeof i)return void console.log("No matching host found");var r=Services.find({projectId:o,hostId:i._id,lastModifiedBY:t}).fetch();1>r.length&&console.log("No matching Services found"),r.forEach(function(e){console.log("Removing "+e.protocol+"/"+e.service),Meteor.call("removeService",o,e._id,function(){})}),console.log("Total of "+r.length+" service(s) removed.")}function deleteHostsByCIDR(){function e(e,t){for(var o="00000000",r=parseInt(e[0],10).toString(2),s=r.length>=o.length?r:o.slice(0,o.length-r.length)+r,l=1;l<=e.length;l++)r=parseInt(e[l],10).toString(2),s+=r.length>=o.length?r:o.slice(0,o.length-r.length)+r;return s.slice(0,parseInt(t,10))}var t=Session.get("projectId"),o=Array.prototype.slice.call(arguments,0),i=Hosts.find({projectId:t}).fetch(),r={},s={},l=0;i.forEach(function(t){var o=t.ipv4.split(".");r[e(o,32)]=t.ipv4,s[t.ipv4]=t._id}),o.forEach(function(o){o=o.split("/");var i=o[0].split("."),c=e(i,o[1]);for(var n in r)n.slice(0,parseInt(o[1],10))===c&&(Meteor.call("removeHost",t,s[r[n]],function(e){e||Meteor.call("removeHostFromIssues",t,r[n])}),l++);console.log("Total of "+l+" host(s) removed.")})}function deleteHostsByStatus(e){var t=Session.get("projectId"),o=Hosts.find({projectId:t,status:e}).fetch();return 1>o.length?void console.log("No matching hosts found"):void(o.forEach(function(e){console.log("Removing "+e.ipv4),Meteor.call("removeHost",t,e._id,function(o){o||Meteor.call("removeHostFromIssues",t,e.ipv4)})}),console.log("Total of "+o.length+" host(s) removed."))}function deleteIssuesByStatus(e){var t=Session.get("projectId"),o=Issues.find({projectId:t,status:e}).fetch();return 1>o.length?void console.log("No matching Issues found"):void(o.forEach(function(e){console.log("Removing "+e.title),Meteor.call("removeIssue",t,e._id)}),console.log("Total of "+o.length+" Issue(s) removed."))}function deleteIssuesWithNoHosts(){var e=Session.get("projectId"),t=Issues.find({projectId:e,hosts:{$size:0}}).fetch();return 1>t.length?void console.log("No orphaned issues present"):void(t.forEach(function(t){console.log("Removing: "+t.title),Meteor.call("removeIssue",e,t._id,function(){})}),console.log("Total of "+t.length+" vuln(s) removed"))}function deleteServices(e,t,o){var i=Session.get("projectId"),r=Services.find({projectId:i,port:e,protocol:t,service:o});r.forEach(function(e){console.log("Removing Service : "+e._id+" "+e.port+"/"+e.protocol+" "+e.service),Meteor.call("removeService",i,e.hostId,e._id)})}function dumpIssueEvidence(){var e=Session.get("projectId"),t=Issues.find({projectId:e}).fetch();t.forEach(function(e){console.log(e.title),console.log(e.evidence)})}function dumpServiceNotes(e,t){var o=Session.get("projectId"),i=new RegExp(e,"i"),r=Services.find({projectId:o,notes:{$elemMatch:{title:{$regex:e,$options:"i"}}}},{notes:1,hostId:1}).fetch(),s=_.pluck(r,"hostId"),l=Hosts.find({_id:{$in:s}},{sort:{longIpv4Addr:1},ipv4:1}).fetch();l.forEach(function(e){""!==t&&t!==e.ipv4||(r=Services.find({hostId:e._id},{sort:{service:1},notes:1,service:1,protocol:1}).fetch(),r.forEach(function(t){t.notes.forEach(function(o){i.test(o.title)&&console.log(e.ipv4+":"+t.port+"/"+t.protocol+" - "+o.title+"\n"+o.content)})}))})}function filterHostsNoServices(){}function findNoteByRegex(e,t){var o=Session.get("projectId"),i=new RegExp(e,"i");if("project"===t||"all"===t){console.log("Project Notes");var r=Projects.findOne({_id:o},{notes:1});r.notes.forEach(function(e){(i.test(e.title)||i.test(e.content))&&console.log("\t"+e.title)})}("host"===t||"all"===t)&&(console.log("Host Notes"),Hosts.find({projectId:o,$or:[{notes:{$elemMatch:{title:{$regex:e,$options:"i"}}}},{notes:{$elemMatch:{content:{$regex:e,$options:"i"}}}}]},{notes:1}).fetch().forEach(function(e){e.notes.forEach(function(t){(i.test(t.title)||i.test(t.content))&&console.log("\t"+e.ipv4+" -> "+t.title)})})),("service"===t||"all"===t)&&(console.log("Service Notes"),Services.find({projectId:o,$or:[{notes:{$elemMatch:{title:{$regex:e,$options:"i"}}}},{notes:{$elemMatch:{content:{$regex:e,$options:"i"}}}}]},{notes:1}).fetch().forEach(function(e){e.notes.forEach(function(t){if(i.test(t.title)||i.test(t.content)){var r=Hosts.findOne({projectId:o,_id:e.hostId});console.log("\t"+r.ipv4+" -> "+e.service.toString()+" -> "+t.title)}})})),("Issue"===t||"all"===t)&&(console.log("Issue Notes"),Issues.find({projectId:o,$or:[{evidence:{$regex:e,$options:"i"}},{notes:{$elemMatch:{title:{$regex:e,$options:"i"}}}},{notes:{$elemMatch:{content:{$regex:e,$options:"i"}}}}]},{notes:1}).fetch().forEach(function(e){i.test(e.evidence)&&console.log("\t"+e.title+" -> Evidence Field"),e.notes.forEach(function(t){(i.test(t.title)||i.test(t.content))&&console.log("\t"+e.title+" -> "+t.title)})}))}function generateIssueBulkListByRegex(e){var t=Session.get("projectId"),o=Services.find({projectId:t,service:{$regex:e}}).fetch(),i=[];o.forEach(function(e){var o=Hosts.findOne({projectId:t,_id:e.hostId});i.push(o.ipv4+","+e.port+","+e.protocol)}),console.log(i.join("\n"))}function generatePortStringFromService(e){var t=Session.get("projectId"),o=Services.find({projectId:t,service:e}).fetch();return _.uniq(_.pluck(o,"port")).sort(function(e,t){return e-t}).join(",")}function generateUniquePortString(e){var t=Session.get("projectId"),o={projectId:t};"undefined"!=typeof e&&(o.protocol=e);var i=Services.find(o).fetch();return _.uniq(_.pluck(i,"port")).sort(function(e,t){return e-t}).join(",")}function generateURLList(){var e=Session.get("projectId"),t=Hosts.find({projectId:e}).fetch();if(!t)return void console.log("No hosts found");var o=0,i=[];t.forEach(function(t){var r=t.hostnames,s=t._id,l={projectId:e,hostId:s};l.service={$regex:"web|www|ssl|http|https",$options:"i"};var c=Services.find(l).fetch();c.forEach(function(e){var s="http://";e.service.match(/(ssl|https)/gi)&&(s="https://"),o++,i.push(s+t.ipv4+":"+e.port),r.forEach(function(t){o++,i.push(s+t+":"+e.port)})})}),console.log(i.join("\n")),console.log(o+" URL(s) generated")}function generateWebDiscoTargetList(){var e=Session.get("projectId"),t=Hosts.find({projectId:e}).fetch();if(1>t.length)return void console.log("No hosts found");var o=0;t.forEach(function(t){var i=t.hostnames,r=t._id,s={projectId:e,hostId:r};s.service={$regex:"web|www|ssl|http|https",$options:"i"};var l=Services.find(s).fetch(),c=[];l.forEach(function(e){var r="http";e.service.match(/(ssl|https)/g)&&(r="https"),e.notes.forEach(function(e){e.content.match(/SSL/)&&(r="https")}),o++,c.push(r+","+t.ipv4+","+e.port+","),i.forEach(function(i){o++,c.push(r+","+t.ipv4+","+e.port+","+i)})})}),console.log(urls.join("\n")),console.log(o+" URL(s) generated")}function getHostsByCIDR(){function e(e,t){for(var o="00000000",r=parseInt(e[0],10).toString(2),s=r.length>=o.length?r:o.slice(0,o.length-r.length)+r,l=1;l<=e.length;l++)r=parseInt(e[l],10).toString(2),s+=r.length>=o.length?r:o.slice(0,o.length-r.length)+r;return s.slice(0,parseInt(t,10))}var t=Array.prototype.slice.call(arguments,0),o=Hosts.find({projectId:Session.get("projectId")}).fetch(),i={};o.forEach(function(t){var o=t.ipv4.split(".");i[e(o,32)]=t.ipv4}),t.forEach(function(t){t=t.split("/");var o=t[0].split("."),r=e(o,t[1]);for(var s in i)s.slice(0,parseInt(t[1],10))===r&&console.log(i[s])})}function getPersonByDepartmentRegex(e){if(e&&"object"!=typeof e)return console.log("Department regex can not be a string, must be an object");var t=Session.get("projectId"),o=People.find({projectId:t,department:{$regex:e}}).fetch();o.forEach(function(e){console.log("'"+e.principalName+"','"+e.department+"','"+e.emails.join(" ")+"'")}),console.log("returned: "+o.len()+" results")}function getPersonEmail(){var e=Session.get("projectId"),t=People.find({projectId:e}).fetch();t.forEach(function(e){console.log("'"+e.principalName+"','"+e.department+"','"+e.emails.join(" ")+"'")}),console.log("returned: "+t.length+" results")}function greyServicesBlue(){var e=Session.get("projectId"),t=Meteor.user().emails[0].address,o=Services.find({projectId:e,status:"lair-grey"}).fetch();return 1>o.length?void console.log("No services found"):void(o.forEach(function(e){Services.update({_id:e._id},{$set:{status:"lair-blue",last_modifiedBy:t}})}),console.log("Total of "+o.length+" service(s) updated to lair-blue."))}function greyHostsNoServicesGreen(){var e=Session.get("projectId"),t=Meteor.user().emails[0].address,o=Hosts.find({projectId:e,status:"lair-grey"}).fetch();if("undefined"==typeof o||0===o.length)return void console.log("No hosts found");var i=0;o.forEach(function(e){var o=Services.find({hostId:e._id,port:{$gt:0}}).count();0===o&&(i++,console.log("Updating: "+e.ipv4),Hosts.update({_id:e._id},{$set:{status:"lair-green",last_modified_by:t}}))}),console.log(i+" host(s) updated")}function hostnamesToNessus(){var e=Hosts.find({projectId:Session.get("projectId")}).fetch(),t=[];e.forEach(function(e){var o=e.ipv4;e.hostnames.forEach(function(e){t.push(e+"["+o+"]")})}),t.forEach(function(e){console.log(e)})}function iisOsProfiler(){var e=Session.get("projectId"),t=Services.find({projectId:e,product:{$regex:/IIS\s(httpd\s)?\d+\.\d+/,$options:"i"}}).fetch();t.forEach(function(t){var o=t.product,i=o.match(/\d+\.\d+/);if(null!==i){var r=parseFloat(i[0]);if(!isNaN(r)){var s=Models.os();s.tool="IIS OS Profiler",s.weight=90,6>r?s.fingerprint="Microsoft Windows Server 2000":7>r?s.fingerprint="Microsoft Windows Server 2003":8>r?s.fingerprint="Microsoft Windows Server 2008":9>r?s.fingerprint="Microsoft Windows Server 2012":11>r&&(s.fingerprint="Microsoft Windows Server 2016"),""!==s.fingerprint&&Meteor.call("setOs",e,t.hostId,s.tool,s.fingerprint,s.weight,function(e){e?console.log("Error generating OS for",t.hostId,e):console.log("Created new OS",s.fingerprint,"for",t.hostId)})}}})}function listHostServicesBycolor(e){var t=Session.get("projectId");if(-1===StatusMap.indexOf(e))throw console.log("Lair Supserviceed colors: "+StatusMap),{name:"Wrong color",message:"Provided color: \""+e+"\" is not Lair compliant"};var o=Services.find({projectId:t,status:e}).fetch();o.forEach(function(e){var o=Hosts.findOne({projectId:t,_id:e.hostId});console.log(o.ipv4+":"+e.port+"/"+e.protocol)})}function listHostServicesByServiceRegex(e){var t=Session.get("projectId"),o=Services.find({projectId:t,service:{$regex:e}}).fetch();return 1>o.length?void console.log("No services found"):void o.forEach(function(e){var o=Hosts.findOne({projectId:t,_id:e.hostId});console.log(o.ipv4+":"+e.port+"/"+e.protocol)})}function listHostsByIssueTitle(e){var t=Session.get("projectId"),o=Issues.findOne({projectId:t,title:e}),i="";if(!o)return void console.log("Issue not found");var r=o.hosts;r.forEach(function(e){console.log(e.ipv4+":"+e.port+"/"+e.protocol),i+=e.ipv4+", "}),console.log("RHOSTS: "+i.slice(0,-2))}function listHostsByIssueTitleRegex(e){var t=Session.get("projectId"),o=Issues.find({projectId:t,title:{$regex:e}}).fetch(),i="";return 1>o.length?void console.log("No issues found"):void o.forEach(function(e){console.log(e.title);var t=e.hosts;t.forEach(function(e){console.log(e.ipv4+":"+e.port+"/"+e.protocol),i+=e.ipv4+", "}),console.log("RHOSTS: "+i.slice(0,-2)),i=""})}function listHostByTag(e){var t=Hosts.find({projectId:Session.get("projectId"),tags:e}).fetch();t.forEach(function(e){console.log(e.ipv4)})}function listUnknownOpenServices(e,t){var o=Session.get("projectId"),i=[],r=[],s=[],l=Hosts.find({projectId:o}).fetch();if(l.forEach(function(l){var c=Services.find({projectId:o,hostId:l._id}).fetch();c.forEach(function(t){0<t.port&&("product"===e?"unknown"===t.product.toLowerCase()&&(i.push(l.ipv4),"tcp"===t.protocol?r.push(t.port):"udp"===t.protocol&&s.push(t.port)):"service"===e?"unknown"===t.service.toLowerCase()&&(i.push(l.ipv4),"tcp"===t.protocol?r.push(t.port):"udp"===t.protocol&&s.push(t.port)):"both"==e&&("unknown"===t.service.toLowerCase()||"unknown"===t.product.toLowerCase())&&(i.push(l.ipv4),"tcp"===t.protocol?r.push(t.port):"udp"===t.protocol&&s.push(t.port)))}),"nmap"===t&&(0<r.length&&0<s.length?console.log("nmap -v -sV --version-all -sS -sU "+l.ipv4+" -p T:"+r.toString()+",U:"+s.toString()):0<r.length?console.log("nmap -v -sV --version-all -sS "+l.ipv4+" -p "+r.toString()):0<s.length&&console.log("nmap -v -sV --version-all -sU "+l.ipv4+" -p "+s.toString()),r=[],s=[]),"hostAndPort"===t&&(0<r.length&&r.forEach(function(e){console.log(l.ipv4+":"+e.toString())}),0<s.length&&s.forEach(function(e){console.log(l.ipv4+":"+e.toString())}))}),(0<r.length||0<s.length)&&"list"===t){var c=r.filter(function(e,t){return r.indexOf(e)===t}),n=s.filter(function(e,t){return s.indexOf(e)===t});console.log("Hosts:"),console.log(i.toString()),console.log("TCP Services:"),console.log(c.sort(function(e,t){return e-t}).toString()),console.log("UDP Services:"),console.log(n.sort(function(e,t){return e-t}).toString())}}function mergeDuplicateIssues(){for(var e=Session.get("projectId"),t=Issues.find({projectId:e}).fetch(),o=t.sort((e,t)=>e.title>t.title?1:-1),r=Hosts.find({projectId:e}).fetch(),s=0;s<o.length-1;s++)source=o[s+1],dest=o[s],source.title==dest.title&&source.cvss==dest.cvss&&(console.log("found match: "+dest.title),console.log(source.hosts.length+" hosts to move."),source.notes.forEach(function(t){console.log("Adding Note"),Meteor.call("addIssueNote",e,dest._id,t.title,t.content)}),source.hosts.forEach(function(t){r.forEach(function(o){var i=Services.findOne({projectId:e,hostId:o._id,port:t.port,protocol:t.protocol});o.ipv4==t.ipv4&&null!=i&&(console.log("Added "+t.ipv4+" to "+dest.title),Meteor.call("removeHostFromIssue",e,source._id,t.ipv4,t.port,t.protocol),Meteor.call("addHostToIssue",e,dest._id,t.ipv4,t.port,t.protocol))})}),source.cves.forEach(function(t){dest.cves.includes(t)||(console.log("Adding CVE "+t),Meteor.call("addCVE",e,dest._id,t))}),source.evidence!=dest.evidence&&(dest.evidence+="\n\n"+source.evidence,console.log("Updating Evidence."),Meteor.call("setIssueEvidence",e,dest._id,dest.evidence)),console.log("Removing issue."),Meteor.call("removeIssue",e,source._id))}function mergeIssues(e,t,o,i,r,s,l){function c(e){I.forEach(function(t){Meteor.call("addIssueNote",a,e,t.title,t.content)}),$.forEach(function(t){Meteor.call("addHostToIssue",a,e,t.ipv4,t.port,t.protocol)}),O.forEach(function(t){Meteor.call("addCVE",a,e,t)}),j.forEach(function(t){Meteor.call("addReference",a,e,t.link,t.name)}),n()}function n(){console.log("Removing Issues"),g.forEach(function(e){Meteor.call("removeIssue",a,e._id)})}function d(e){for(var t,o={},r=[],s=0,c=e.length;s<c;++s)t=JSON.stringify(e[s]),o.hasOwnProperty(t)||(o[t]=!0,r.push(e[s]));return r}if("object"!=typeof e)return console.log("Issue regex can not be a string, must be a object");if("string"!=typeof r)return console.log("Invalid title");if("string"!=typeof s)return console.log("Invalid cvss. Variable must be a string");var a=Session.get("projectId"),g=Issues.find({projectId:a,title:{$regex:e},cvss:{$gte:t,$lte:o},"hosts.ipv4":{$regex:i}}).fetch();if(1>g.length)return console.log("Did not find any issues with the given regex");var p=0;if(g.sort(function(e,t){return e.cvss>t.cvss?-1:e.cvss<t.cvss?1:0}),g.forEach(function(e){console.log("CVSS: "+e.cvss+" - Hosts: "+e.hosts.length+" - Title: "+e.title),e.cvss>p&&(p=e.cvss)}),console.log("Total found: "+g.length+" Highest CVSS: "+p),l){"max"===s&&(s=p);var h=Issues.findOne({projectId:a,title:r});"undefined"!=typeof h&&(g.push(h),Meteor.call("removeIssue",a,h._id)),console.log("Going to merge "+g.length+" issues");var f="",v="",u="",I=[],j=[],m=[],E=[],S=[];g.forEach(function(e){f=f+"CVSS: "+e.cvss+" - Hosts: "+e.hosts.length+" - Title: "+e.title+"\n",v="",u="",j=j.concat(e.references),I=I.concat(e.notes),m=m.concat(e.cves),E=E.concat(e.hosts),S=S.concat(e.files)});var $=d(E),O=d(m);return Meteor.call("createIssue",a,r,s,f,u,v,function(e,t){e?(console.log("Error: could not create new Issue",e.message),h&&console.log("Looks like you lost",h.title)):c(t)}),console.log("Complete")}}function getHostList(e){for(var t="",o=0;o<e.hosts.length;o++)t+=e.hosts[o].ipv4+",";return t+"\n"}function mergeIssuesByTitle(e,t,o){function i(e){p.forEach(function(t){Meteor.call("addIssueNote",l,e,t.title,t.content)}),v.forEach(function(t){Meteor.call("addHostToIssue",l,e,t.ipv4,t.port,t.protocol)}),u.forEach(function(t){Meteor.call("addCVE",l,e,t)}),r()}function r(){c.forEach(function(e){Meteor.call("removeIssue",l,e._id)})}function s(e){for(var t,o={},r=[],s=0,c=e.length;s<c;++s)t=JSON.stringify(e[s]),o.hasOwnProperty(t)||(o[t]=!0,r.push(e[s]));return r}if("object"!=typeof e)return console.log("Issue regex can not be a string, must be a object");if("string"!=typeof t)return console.log("Invalid title");if("number"!=typeof o)return console.log("Invalid cvss. Variable must be a number");var l=Session.get("projectId"),c=Issues.find({projectId:l,title:{$regex:e}}).fetch();if(1>c.length)return console.log("Did not find any issues with the given regex");var n=Issues.findOne({projectId:l,title:t});"undefined"!=typeof n&&(c.push(n),Meteor.call("removeIssue",l,n._id)),console.log("Going to merge "+c.length+" issues");var d="",a="",g="",p=[],h=[],f=[];c.forEach(function(e){issue_hosts=getHostList(e),d+="\n\nFrom "+e.title+"\nAffected Hosts: "+issue_hosts+e.description,a+="\n\nFrom "+e.title+"\nAffected Hosts: "+issue_hosts+e.solution,g+="\n\nFrom "+e.title+"\nAffected Hosts: "+issue_hosts+e.evidence,p=p.concat(e.notes),h=h.concat(e.cves),f=f.concat(e.hosts)});var v=s(f),u=s(h);return Meteor.call("createIssue",l,t,o,d,g,a,function(e,t){e?(console.log("Error: could not create new Issue",e.message),n&&console.log("Looks like you lost",n.title)):i(t)}),console.log("Complete")}function negateHostsByCIDR(){function e(e,t){for(var o="00000000",r=parseInt(e[0],10).toString(2),s=r.length>=o.length?r:o.slice(0,o.length-r.length)+r,l=1;l<=e.length;l++)r=parseInt(e[l],10).toString(2),s+=r.length>=o.length?r:o.slice(0,o.length-r.length)+r;return s.slice(0,parseInt(t,10))}var t=Array.prototype.slice.call(arguments,0),o=Hosts.find({projectId:Session.get("projectId")}).fetch(),i={};for(var r in o.forEach(function(t){var o=t.ipv4.split(".");i[e(o,32)]=t.ipv4}),t.forEach(function(t){t=t.split("/");var o=t[0].split("."),r=e(o,t[1]);for(var s in i)s.slice(0,parseInt(t[1],10))===r&&delete i[s]}),i)console.log(i[r])}function niktoHostList(e,t){function o(e,o){var s=Hosts.findOne({projectId:r,_id:e});s.ipv4+":"+o in i||(i[s.ipv4+":"+o]=!0),t&&s.hostnames.forEach(function(e){t.test(e)&&!(e+":"+o in i)&&(i[e+":"+o]=!0)})}if(t&&"object"!=typeof t)return console.log("Domain regex can not be a string, must be an object");var i={},r=Session.get("projectId");for(var s in e.forEach(function(e){var t=[];if("object"==typeof e)t=Services.find({projectId:r,service:{$regex:e}}).fetch(),t.forEach(function(e){o(e.hostId,e.port)});else if("string"==typeof e)for(var l=e.split("-"),c=parseInt(l[0],10);c<=parseInt(l[1],10);c++)t=Services.find({projectId:r,service:c}).fetch(),t.forEach(function(e){o(e.hostId,e.port)});else{var n=Services.findOne({projectId:r,service:e});o(n.hostId,e.port)}}),i)console.log(s)}function niktoTopFindings(e,t){var o={},i=Session.get("projectId"),r=["(.*might be interesting.*)","(.*Public HTTP Methods:.*PUT.*)","(.*[Ww]eb[Dd]av.*)","(.*Directory indexing found.*)","(.*default file found.*)","(.*Server leaks.*IP.*)","(.*OSVDBID:.*)"];0<e.length&&(r=e);var s=Services.find({projectId:i}).fetch();if(s.forEach(function(e){var s=Hosts.findOne({projectId:i,_id:e.hostId});e.notes.forEach(function(e){if(/Nikto/.test(e.title)){var i=e.title.match(/\(.*\)/);if(t){var l=new RegExp(r.join("|")+"\\n","g"),c=e.content.match(l);c&&(!o[s.ipv4+" "+i]&&(o[s.ipv4+" "+i]=[]),o[s.ipv4+" "+i].push(c.join("")))}else console.log(s.ipv4+" "+i),console.log(e.content)}})}),t)for(var l in o)console.log(l),console.log(o[l].join(""))}function NormalizeProtocols(){var e=Session.get("projectId"),t=Meteor.user().emails[0].address,o=Services.find({projectId:e}).fetch();if(1>o.length)return void console.log("No services found");var i=0;o.forEach(function(e){e.protocol!=e.protocol.toLowerCase()&&(Services.update({_id:e._id},{$set:{protocol:e.protocol.toLowerCase(),last_modifiedBy:t}}),i++)}),console.log("Total of "+i+" service(s) updated.")}function NormalizeUnknownProducts(){var e=Session.get("projectId"),t=Meteor.user().emails[0].address,o=Services.find({projectId:e}).fetch();if(1>o.length)return void console.log("No services found");var i=0;o.forEach(function(e){"unknown"==e.product.toLowerCase()&&(Services.update({_id:e._id},{$set:{product:"",last_modifiedBy:t}}),i++)}),console.log("Total of "+i+" service(s) updated.")}function removePort0ServicesNoReference(){var e=Session.get("projectId"),t=[],o=[],i=[],r=Hosts.find({projectId:e}).fetch();r.forEach(function(o){var i=o._id,r=Services.find({projectId:e,hostId:o._id}).fetch();r.forEach(function(e){if(0>=e.port&&1>e.notes){var i={ip:o.ipv4,service:e};t.push(i)}})});var s=Issues.find({projectId:e}).fetch();s.forEach(function(e){e.hosts.forEach(function(e){if(0==e.port)for(var i=0;i<t.length;i++)t[i].ip==e.ipv4&&e.protocol==t[i].service.protocol&&o.push(t[i].service._id)})});for(var l=0;l<t.length;l++){for(var c=0;c<o.length;c++)if(t[l].service._id==o[c])continue;i.push(t[l].service)}console.log("Removing "+i.length+" out of "+t.length+" port 0 services");for(var l=0;l<i.length;l++)console.log("Removing ServiceID: "+i[l]._id),Meteor.call("removeService",e,i[l].hostId,i[l]._id,function(){})}function removeIPBasedHostnames(){var e=Hosts.find({projectId:Session.get("projectId")}).fetch();e.forEach(function(e){var t=e.ipv4,o=[];e.hostnames.forEach(function(e){if(e.includes(t))return void console.log("removing "+e);if(e.includes(t.replace(/\./g,"_")))return void console.log("removing "+e);if(e.includes(t.replace(/\./g,"-")))return void console.log("removing "+e);var i=t.split(".").reverse().join(".");return e.includes(i)?void console.log("removing "+e):e.includes(i.replace(/\./g,"_"))?void console.log("removing "+e):e.includes(i.replace(/\./g,"-"))?void console.log("removing "+e):void o.push(e)}),Hosts.update({_id:e._id},{$set:{hostnames:o,lastModifiedBy:Meteor.user().emails[0].address}})})}function removeHostnamesByPattern(e){var t=Hosts.find({projectId:Session.get("projectId")}).fetch();t.forEach(function(t){var o=[];t.hostnames.forEach(function(t){return t.includes(e)?void console.log("removing "+t):void o.push(t)}),Hosts.update({_id:t._id},{$set:{hostnames:o,lastModifiedBy:Meteor.user().emails[0].address}})})}function searchServiceNoteContent(e,t){var o=Session.get("projectId"),i=new RegExp(e,"i"),r=new RegExp(t,"g"),s=[],l=Services.find({projectId:o,notes:{$elemMatch:{title:{$regex:e,$options:"i"}}}},{notes:1,hostId:1}).fetch();l.forEach(function(e){e.notes.forEach(function(e){i.test(e.title)&&s.push.apply(s,e.content.match(r))})}),console.log(function(e){for(var t={},o=[],r=0,s=e.length;r<s;++r)t.hasOwnProperty(e[r])||(o.push(e[r]),t[e[r]]=1);return o}(s).join("\n"))}function servicesToColorByHosts(e,t,o){var i=Session.get("projectId"),r=Meteor.user().emails[0].address,s=0,l={"lair-red":4,"lair-orange":3,"lair-blue":2,"lair-green":0,"lair-grey":0};if(-1===StatusMap.indexOf(o))throw console.log("Lair Supserviceed colors: "+StatusMap),{name:"Wrong Color",message:"Provided color: \""+o+"\" is not Lair compliant"};e.forEach(function(e){var r=Hosts.findOne({projectId:i,ipv4:e}),c=Services.find({hostId:r._id,port:t}).fetch();1>c.length||c.forEach(function(t){console.log("Updating: "+e+":"+t.port+"/"+t.protocol),Meteor.call("setPortStatus",i,t._id,o),l[o]>l[r.status]&&(console.log("Updating: "+e+" status \""+o+"\""),Meteor.call("setHostStatus",i,r._id,o)),s++})}),console.log(s+" service(s) updated")}function setGlobalServiceByPort(e,t,o){var i=Session.get("projectId"),r=Services.find({projectId:i,port:e,protocol:t,service:{$ne:o}});r.forEach(function(e){Meteor.call("setServiceService",i,e._id,o,function(e){e||console.log("Modified service successfully")})})}function setHostOsByOsRegex(e,t,o){var i=Session.get("projectId"),r=Hosts.find({projectId:i,"os.fingerprint":{$regex:e}}).fetch();return 1>r.length?void console.log("No hosts found"):void r.forEach(function(e){Meteor.call("setOs",i,e._id,"Manual",t,o,function(t){return t?void console.log("Unable to update host "+e.ipv4):void console.log("Updated host "+e.ipv4)})})}function setHostServiceByPort(e,t,o,i){var r=Session.get("projectId"),e=Hosts.findOne({projectId:r,ipv4:e}),s=Services.find({projectId:r,hostId:e._id,port:{$in:t},protocol:o,service:{$ne:i}});s.forEach(function(e){Meteor.call("setServiceService",r,e._id,i,function(e){e||console.log("Modified service successfully")})})}function tagHostsByCIDR(e,t){function o(e,t){return check(e,Matchers.isObjectId),check(t,Matchers.isNonEmptyString),Hosts.update({_id:e},{$addToSet:{tags:t},$set:{lastModifiedBy:Meteor.user().emails[0].address}})}function i(e,t){for(var o="00000000",r=parseInt(e[0],10).toString(2),s=r.length>=o.length?r:o.slice(0,o.length-r.length)+r,l=1;l<=e.length;l++)r=parseInt(e[l],10).toString(2),s+=r.length>=o.length?r:o.slice(0,o.length-r.length)+r;return s.slice(0,parseInt(t,10))}var r=Hosts.find({projectId:Session.get("projectId")}).fetch(),s={};r.forEach(function(e){var t=e.ipv4.split(".");s[i(t,32)]=e}),cidr=t.split("/");var t=cidr[0].split("."),l=i(t,cidr[1]);for(var c in s)c.slice(0,parseInt(cidr[1],10))===l&&(o(s[c]._id,e),console.log(s[c]._id,e))}function uniqueServicesByHostsCIDR(){function e(e,t){for(var o="00000000",r=parseInt(e[0],10).toString(2),s=r.length>=o.length?r:o.slice(0,o.length-r.length)+r,l=1;l<=e.length;l++)r=parseInt(e[l],10).toString(2),s+=r.length>=o.length?r:o.slice(0,o.length-r.length)+r;return s.slice(0,parseInt(t,10))}var t=Session.get("projectId"),o=Array.prototype.slice.call(arguments,0),i=Hosts.find({projectId:t}).fetch(),r={},s={},l=[];i.forEach(function(t){var o=t.ipv4.split(".");r[e(o,32)]=t.ipv4,s[t.ipv4]=t._id}),o.forEach(function(t){t=t.split("/");var o=t[0].split("."),i=e(o,t[1]);for(var c in r)c.slice(0,parseInt(t[1],10))===i&&l.push(s[r[c]])});var c=Services.find({projectId:t,hostId:{$in:l}}).fetch();return _.uniq(_.pluck(c,"port")).sort(function(e,t){return e-t}).join(",")}