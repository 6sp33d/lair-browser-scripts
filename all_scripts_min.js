function bulkRemoveHosts(e){var t=Session.get("projectId"),o=(Meteor.user().emails[0].address,Hosts.find({projectId:t}).fetch());count=0,o.forEach(function(o){e.includes(o.ipv4)&&(Meteor.call("removeHost",t,o._id,function(e){e?console.log("Error removing "+o.ipv4+". "+e):Meteor.call("removeHostFromIssues",t,o._id)}),count++)}),console.log("Total of "+count+" host(s) removed.")}function changeHostsToSpecifiedColorByServicesOrIssues(e,t,o){function i(e,t,o){return 0===t||e.status===o[t-1].status}function r(e,t){Hosts.update({_id:e},{$set:{status:t,lastModifiedBy:d}})}function s(e){return Services.find({projectId:n,hostId:e}).fetch()}function l(e){var t=Hosts.findOne({_id:e}).ipv4;return Issues.find({projectId:n,"hosts.ipv4":t}).fetch()}function c(t){if("services"===e)return s(t);if("issues"===e)return l(t);throw{name:"Incorrect servicesOrIssues Selection",message:"Incorrect servicesOrIssues selection: \""+e+"\" is not a valid servicesOrIssues for this function"}}var n=Session.get("projectId"),d=Meteor.user().emails[0].address,g=0,a=0;if(-1===StatusMap.indexOf(o))throw console.log("Lair Supserviceed colors: "+StatusMap),{name:"Wrong lairColor",message:"Provided lairColor: \""+o+"\" is not Lair compliant"};var p=Hosts.find({projectId:n}).fetch();if("all"===t)p.forEach(function(e){r(e._id,o)}),a=p.length;else if("none"===t)p.forEach(function(e){var t=e._id;0>=c(t).length&&(r(t,o),g++)}),a=g;else if(-1!==StatusMap.indexOf(t))p.forEach(function(e){var s=!1,l=e._id,n=c(l);s=0<n.length&&n[0].status===t&&n.every(i),s&&(r(l,o),g++),a=g});else if("same"===t)p.forEach(function(e){var t=!1,s=e._id;t=c(s).every(i),t&&(r(s,o),g++),a=g});else{if("diff"!==t)throw{name:"Incorrect statusOption Selection",message:"Incorrect statusOption selection: \""+t+"\" is not a valid statusOption for this function"};p.forEach(function(e){var t=!1,s=e._id;t=!c(s).every(i),t&&(r(s,o),g++),a=g})}console.log("Total of "+a+" host(s) updated")}function changeServicesRegexToSpecifiedColor(e,t){var o=Session.get("projectId"),i=Meteor.user().emails[0].address;if("lair-grey"!==t&&"lair-blue"!==t&&"lair-green"!==t&&"lair-orange"!==t&&"lair-red"!==t)return void console.log("Invalid color specified");var r=Services.find({projectId:o,service:{$regex:e}}).fetch();return 1>r.length?void console.log("No services found"):void(r.forEach(function(e){Services.update({_id:e._id},{$set:{status:t,lastModifiedBy:i}})}),console.log("Total of "+r.length+" service(s) updated to "+t+"."))}function changeServicesToSpecifiedColor(e,t){var o=Session.get("projectId"),i=Meteor.user().emails[0].address;if("lair-grey"!==t&&"lair-blue"!==t&&"lair-green"!==t&&"lair-orange"!==t&&"lair-red"!==t)return void console.log("Invalid color specified");var r=Services.find({projectId:o,service:e}).fetch();return 1>r.length?void console.log("No services found"):void(r.forEach(function(e){console.log("Updating: "+e.service+"/"+e.protocol),Services.update({_id:e._id},{$set:{status:t,last_modified_by:i}})}),console.log("Total of "+r.length+" service(s) updated"))}function changeServicesToColorByPort(e,t){var o=Session.get("projectId"),i=Meteor.user().emails[0].address;if("lair-grey"!==t&&"lair-blue"!==t&&"lair-green"!==t&&"lair-orange"!==t&&"lair-red"!==t)return void console.log("Invalid color specified");var r=Services.find({projectId:o,port:e}).fetch();return 1>r.length?void console.log("No services found"):void(r.forEach(function(e){Services.update({_id:e._id},{$set:{status:t,last_modifiedBy:i}})}),console.log("Total of "+r.length+" service(s) updated to "+t+"."))}function changeServicesToSpecifiedColorByProduct(e,t){var o=Session.get("projectId"),i=Meteor.user().emails[0].address;if("lair-grey"!==t&&"lair-blue"!==t&&"lair-green"!==t&&"lair-orange"!==t&&"lair-red"!==t)return void console.log("Invalid color specified");var r=Services.find({projectId:o,product:e}).fetch();return 1>r.length?void console.log("No services found"):void(r.forEach(function(e){Services.update({_id:e._id},{$set:{status:t,last_modifiedBy:i}})}),console.log("Total of "+r.length+" service(s) updated to "+t+"."))}function changeServicesToSpecifiedColor(e,t){var o=Session.get("projectId"),i=Meteor.user().emails[0].address;if("lair-grey"!==t&&"lair-blue"!==t&&"lair-green"!==t&&"lair-orange"!==t&&"lair-red"!==t)return void console.log("Invalid color specified");var r=Services.find({projectId:o,service:e}).fetch();return 1>r.length?void console.log("No services found"):void(r.forEach(function(e){Services.update({_id:e._id},{$set:{status:t,last_modifiedBy:i}})}),console.log("Total of "+r.length+" service(s) updated to "+t+"."))}function countHostServicesBycolor(e){var t={},o=Session.get("projectId");if(-1===StatusMap.indexOf(e))throw console.log("Lair Supserviceed colors: "+StatusMap),{name:"Wrong color",message:"Provided color: \""+e+"\" is not Lair compliant"};for(var i in Services.find({projectId:o,status:e}).fetch().forEach(function(e){i=Hosts.findOne({projectId:o,_id:e.hostId}),t.hasOwnProperty(i.ipv4)?t[i.ipv4]++:t[i.ipv4]=1}),t)console.log(i+" ("+t[i]+")")}function countHostServicesBycolor(e){var t={},o=Session.get("projectId");if(-1===StatusMap.indexOf(e))throw console.log("Lair Supserviceed colors: "+StatusMap),{name:"Wrong color",message:"Provided color: \""+e+"\" is not Lair compliant"};for(var i in Services.find({projectId:o,status:e}).fetch().forEach(function(e){i=Hosts.findOne({projectId:o,_id:e.hostId}),t.hasOwnProperty(i.ipv4)?t[i.ipv4]++:t[i.ipv4]=1}),t)console.log(i+" ("+t[i]+")")}function deleteHostsByCIDR(){function e(e,t){for(var o="00000000",r=parseInt(e[0],10).toString(2),s=r.length>=o.length?r:o.slice(0,o.length-r.length)+r,l=1;l<=e.length;l++)r=parseInt(e[l],10).toString(2),s+=r.length>=o.length?r:o.slice(0,o.length-r.length)+r;return s.slice(0,parseInt(t,10))}var t=Session.get("projectId"),o=Array.prototype.slice.call(arguments,0),i=Hosts.find({projectId:t}).fetch(),r={},s={},l=0;i.forEach(function(t){var o=t.ipv4.split(".");r[e(o,32)]=t.ipv4,s[t.ipv4]=t._id}),o.forEach(function(o){o=o.split("/");var i=o[0].split("."),c=e(i,o[1]);for(var n in r)n.slice(0,parseInt(o[1],10))===c&&(Meteor.call("removeHost",t,s[r[n]],function(e){e||Meteor.call("removeHostFromIssues",t,r[n])}),l++);console.log("Total of "+l+" host(s) removed.")})}function deleteHostsByStatus(e){var t=Session.get("projectId"),o=Hosts.find({projectId:t,status:e}).fetch();return 1>o.length?void console.log("No matching hosts found"):void(o.forEach(function(e){console.log("Removing "+e.ipv4),Meteor.call("removeHost",t,e._id,function(o){o||Meteor.call("removeHostFromIssues",t,e.ipv4)})}),console.log("Total of "+o.length+" host(s) removed."))}function deleteHostServicesByTool(e,t){var o=Session.get("projectId"),i=Hosts.findOne({projectId:o,ipv4:e});if(void 0===i)return void console.log("No matching host found");var r=Services.find({projectId:o,hostId:i._id,lastModifiedBY:t}).fetch();1>r.length&&console.log("No matching Services found"),r.forEach(function(e){console.log("Removing "+e.protocol+"/"+e.service),Meteor.call("removeService",o,e._id,function(){})}),console.log("Total of "+r.length+" service(s) removed.")}function deleteIssuesByStatus(e){var t=Session.get("projectId"),o=Issues.find({projectId:t,status:e}).fetch();return 1>o.length?void console.log("No matching Issues found"):void(o.forEach(function(e){console.log("Removing "+e.title),Meteor.call("removeIssue",t,e._id)}),console.log("Total of "+o.length+" Issue(s) removed."))}function deleteIssuesWithNoHosts(){var e=Session.get("projectId"),t=Issues.find({projectId:e,hosts:{$size:0}}).fetch();return 1>t.length?void console.log("No orphaned issues present"):void(t.forEach(function(t){console.log("Removing: "+t.title),Meteor.call("removeIssue",e,t._id,function(){})}),console.log("Total of "+t.length+" vuln(s) removed"))}function deleteServices(e,t,o){var i=Session.get("projectId");Services.find({projectId:i,port:e,protocol:t,service:o}).forEach(function(e){console.log("Removing Service : "+e._id+" "+e.port+"/"+e.protocol+" "+e.service),Meteor.call("removeService",i,e.hostId,e._id)})}function dumpIssueEvidence(){var e=Session.get("projectId");Issues.find({projectId:e}).fetch().forEach(function(e){console.log(e.title),console.log(e.evidence)})}function dumpServiceNotes(e,t){var o=Session.get("projectId"),i=new RegExp(e,"i"),r=Services.find({projectId:o,notes:{$elemMatch:{title:{$regex:e,$options:"i"}}}},{notes:1,hostId:1}).fetch(),s=_.pluck(r,"hostId");Hosts.find({_id:{$in:s}},{sort:{longIpv4Addr:1},ipv4:1}).fetch().forEach(function(e){""!==t&&t!==e.ipv4||(r=Services.find({hostId:e._id},{sort:{service:1},notes:1,service:1,protocol:1}).fetch(),r.forEach(function(t){t.notes.forEach(function(o){i.test(o.title)&&console.log(e.ipv4+":"+t.port+"/"+t.protocol+" - "+o.title+"\n"+o.content)})}))})}function filterHostsNoServices(){}function findNoteByRegex(e,t){var o=Session.get("projectId"),i=new RegExp(e,"i");("project"===t||"all"===t)&&(console.log("Project Notes"),Projects.findOne({_id:o},{notes:1}).notes.forEach(function(e){(i.test(e.title)||i.test(e.content))&&console.log("\t"+e.title)})),"host"!==t&&"all"!==t||(console.log("Host Notes"),Hosts.find({projectId:o,$or:[{notes:{$elemMatch:{title:{$regex:e,$options:"i"}}}},{notes:{$elemMatch:{content:{$regex:e,$options:"i"}}}}]},{notes:1}).fetch().forEach(function(e){e.notes.forEach(function(t){(i.test(t.title)||i.test(t.content))&&console.log("\t"+e.ipv4+" -> "+t.title)})})),"service"!==t&&"all"!==t||(console.log("Service Notes"),Services.find({projectId:o,$or:[{notes:{$elemMatch:{title:{$regex:e,$options:"i"}}}},{notes:{$elemMatch:{content:{$regex:e,$options:"i"}}}}]},{notes:1}).fetch().forEach(function(e){e.notes.forEach(function(t){if(i.test(t.title)||i.test(t.content)){var r=Hosts.findOne({projectId:o,_id:e.hostId});console.log("\t"+r.ipv4+" -> "+e.service.toString()+" -> "+t.title)}})})),"Issue"!==t&&"all"!==t||(console.log("Issue Notes"),Issues.find({projectId:o,$or:[{evidence:{$regex:e,$options:"i"}},{notes:{$elemMatch:{title:{$regex:e,$options:"i"}}}},{notes:{$elemMatch:{content:{$regex:e,$options:"i"}}}}]},{notes:1}).fetch().forEach(function(e){i.test(e.evidence)&&console.log("\t"+e.title+" -> Evidence Field"),e.notes.forEach(function(t){(i.test(t.title)||i.test(t.content))&&console.log("\t"+e.title+" -> "+t.title)})}))}function generateIssueBulkListByRegex(e){var t=Session.get("projectId"),o=Services.find({projectId:t,service:{$regex:e}}).fetch(),i=[];o.forEach(function(e){var o=Hosts.findOne({projectId:t,_id:e.hostId});i.push(o.ipv4+","+e.port+","+e.protocol)}),console.log(i.join("\n"))}function generatePortStringFromService(e){var t=Session.get("projectId"),o=Services.find({projectId:t,service:e}).fetch();return _.uniq(_.pluck(o,"port")).sort(function(e,t){return e-t}).join(",")}function generateUniquePortString(e){var t=Session.get("projectId"),o={projectId:t};void 0!==e&&(o.protocol=e);var i=Services.find(o).fetch();return _.uniq(_.pluck(i,"port")).sort(function(e,t){return e-t}).join(",")}function generateURLList(){var e=Session.get("projectId"),t=Hosts.find({projectId:e}).fetch();if(!t)return void console.log("No hosts found");var o=0,i=[];t.forEach(function(t){var r=t.hostnames,s=t._id,l={projectId:e,hostId:s};l.service={$regex:"web|www|ssl|http|https",$options:"i"},Services.find(l).fetch().forEach(function(e){var s="http://";e.service.match(/(ssl|https)/gi)&&(s="https://"),o++,i.push(s+t.ipv4+":"+e.port),r.forEach(function(t){o++,i.push(s+t+":"+e.port)})})}),console.log(i.join("\n")),console.log(o+" URL(s) generated")}function generateWebDiscoTargetList(){var e=Session.get("projectId"),t=Hosts.find({projectId:e}).fetch();if(1>t.length)return void console.log("No hosts found");var o=0;t.forEach(function(t){var i=t.hostnames,r=t._id,s={projectId:e,hostId:r};s.service={$regex:"web|www|ssl|http|https",$options:"i"};var l=Services.find(s).fetch(),c=[];l.forEach(function(e){var r="http";e.service.match(/(ssl|https)/g)&&(r="https"),e.notes.forEach(function(e){e.content.match(/SSL/)&&(r="https")}),o++,c.push(r+","+t.ipv4+","+e.port+","),i.forEach(function(i){o++,c.push(r+","+t.ipv4+","+e.port+","+i)})})}),console.log(urls.join("\n")),console.log(o+" URL(s) generated")}function getHostsByCIDR(){function e(e,t){for(var o="00000000",r=parseInt(e[0],10).toString(2),s=r.length>=o.length?r:o.slice(0,o.length-r.length)+r,l=1;l<=e.length;l++)r=parseInt(e[l],10).toString(2),s+=r.length>=o.length?r:o.slice(0,o.length-r.length)+r;return s.slice(0,parseInt(t,10))}var t=Array.prototype.slice.call(arguments,0),o=Hosts.find({projectId:Session.get("projectId")}).fetch(),i={};o.forEach(function(t){var o=t.ipv4.split(".");i[e(o,32)]=t.ipv4}),t.forEach(function(t){t=t.split("/");var o=t[0].split("."),r=e(o,t[1]);for(var s in i)s.slice(0,parseInt(t[1],10))===r&&console.log(i[s])})}function getPersonByDepartmentRegex(e){if(e&&"object"!=typeof e)return console.log("Department regex can not be a string, must be an object");var t=Session.get("projectId"),o=People.find({projectId:t,department:{$regex:e}}).fetch();o.forEach(function(e){console.log("'"+e.principalName+"','"+e.department+"','"+e.emails.join(" ")+"'")}),console.log("returned: "+o.len()+" results")}function getPersonEmail(){var e=Session.get("projectId"),t=People.find({projectId:e}).fetch();t.forEach(function(e){console.log("'"+e.principalName+"','"+e.department+"','"+e.emails.join(" ")+"'")}),console.log("returned: "+t.length+" results")}function greyHostsNoServicesGreen(){var e=Session.get("projectId"),t=Meteor.user().emails[0].address,o=Hosts.find({projectId:e,status:"lair-grey"}).fetch();if(void 0===o||0===o.length)return void console.log("No hosts found");var i=0;o.forEach(function(e){0===Services.find({hostId:e._id,port:{$gt:0}}).count()&&(i++,console.log("Updating: "+e.ipv4),Hosts.update({_id:e._id},{$set:{status:"lair-green",last_modified_by:t}}))}),console.log(i+" host(s) updated")}function hostnamesToNessus(){var e=Hosts.find({projectId:Session.get("projectId")}).fetch(),t=[];e.forEach(function(e){var o=e.ipv4;e.hostnames.forEach(function(e){t.push(e+"["+o+"]")})}),t.forEach(function(e){console.log(e)})}function iisOsProfiler(){var e=Session.get("projectId");Services.find({projectId:e,product:{$regex:/IIS\s(httpd\s)?\d+\.\d+/,$options:"i"}}).fetch().forEach(function(t){var o=t.product,i=o.match(/\d+\.\d+/);if(null!==i){var r=parseFloat(i[0]);if(!isNaN(r)){var s=Models.os();s.tool="IIS OS Profiler",s.weight=90,6>r?s.fingerprint="Microsoft Windows Server 2000":7>r?s.fingerprint="Microsoft Windows Server 2003":8>r?s.fingerprint="Microsoft Windows Server 2008":9>r?s.fingerprint="Microsoft Windows Server 2012":11>r&&(s.fingerprint="Microsoft Windows Server 2016"),""!==s.fingerprint&&Meteor.call("setOs",e,t.hostId,s.tool,s.fingerprint,s.weight,function(e){e?console.log("Error generating OS for",t.hostId,e):console.log("Created new OS",s.fingerprint,"for",t.hostId)})}}})}function listHostsByIssueTitle(e){var t=Session.get("projectId"),o=Issues.findOne({projectId:t,title:e}),i="";return o?void(o.hosts.forEach(function(e){console.log(e.ipv4+":"+e.port+"/"+e.protocol),i+=e.ipv4+", "}),console.log("RHOSTS: "+i.slice(0,-2))):void console.log("Issue not found")}function listHostsByIssueTitleRegex(e){var t=Session.get("projectId"),o=Issues.find({projectId:t,title:{$regex:e}}).fetch(),i="";return 1>o.length?void console.log("No issues found"):void o.forEach(function(e){console.log(e.title),e.hosts.forEach(function(e){console.log(e.ipv4+":"+e.port+"/"+e.protocol),i+=e.ipv4+", "}),console.log("RHOSTS: "+i.slice(0,-2)),i=""})}function listHostByTag(e){Hosts.find({projectId:Session.get("projectId"),tags:e}).fetch().forEach(function(e){console.log(e.ipv4)})}function listHostServicesBycolor(e){var t=Session.get("projectId");if(-1===StatusMap.indexOf(e))throw console.log("Lair Supserviceed colors: "+StatusMap),{name:"Wrong color",message:"Provided color: \""+e+"\" is not Lair compliant"};Services.find({projectId:t,status:e}).fetch().forEach(function(e){var o=Hosts.findOne({projectId:t,_id:e.hostId});console.log(o.ipv4+":"+e.port+"/"+e.protocol)})}function listHostServicesByServiceRegex(e){var t=Session.get("projectId"),o=Services.find({projectId:t,service:{$regex:e}}).fetch();return 1>o.length?void console.log("No services found"):void o.forEach(function(e){var o=Hosts.findOne({projectId:t,_id:e.hostId});console.log(o.ipv4+":"+e.port+"/"+e.protocol)})}function listUnknownOpenServices(e,t){var o=Session.get("projectId"),i=[],r=[],s=[];if(Hosts.find({projectId:o}).fetch().forEach(function(l){Services.find({projectId:o,hostId:l._id}).fetch().forEach(function(t){0<t.port&&("product"===e?"unknown"===t.product.toLowerCase()&&(i.push(l.ipv4),"tcp"===t.protocol?r.push(t.port):"udp"===t.protocol&&s.push(t.port)):"service"===e?"unknown"===t.service.toLowerCase()&&(i.push(l.ipv4),"tcp"===t.protocol?r.push(t.port):"udp"===t.protocol&&s.push(t.port)):"both"==e&&("unknown"!==t.service.toLowerCase()&&"unknown"!==t.product.toLowerCase()||(i.push(l.ipv4),"tcp"===t.protocol?r.push(t.port):"udp"===t.protocol&&s.push(t.port))))}),"nmap"===t&&(0<r.length&&0<s.length?console.log("nmap -v -sV --version-all -sS -sU "+l.ipv4+" -p T:"+r.toString()+",U:"+s.toString()):0<r.length?console.log("nmap -v -sV --version-all -sS "+l.ipv4+" -p "+r.toString()):0<s.length&&console.log("nmap -v -sV --version-all -sU "+l.ipv4+" -p "+s.toString()),r=[],s=[]),"hostAndPort"===t&&(0<r.length&&r.forEach(function(e){console.log(l.ipv4+":"+e.toString())}),0<s.length&&s.forEach(function(e){console.log(l.ipv4+":"+e.toString())}))}),(0<r.length||0<s.length)&&"list"===t){var l=r.filter(function(e,t){return r.indexOf(e)===t}),c=s.filter(function(e,t){return s.indexOf(e)===t});console.log("Hosts:"),console.log(i.toString()),console.log("TCP Services:"),console.log(l.sort(function(e,t){return e-t}).toString()),console.log("UDP Services:"),console.log(c.sort(function(e,t){return e-t}).toString())}}function getHostList(e){for(var t="",o=0;o<e.hosts.length;o++)t+=e.hosts[o].ipv4+",";return t+"\n"}function mergeIssuesByTitle(e,t,o){function i(e){p.forEach(function(t){Meteor.call("addIssueNote",l,e,t.title,t.content)}),v.forEach(function(t){Meteor.call("addHostToIssue",l,e,t.ipv4,t.port,t.protocol)}),u.forEach(function(t){Meteor.call("addCVE",l,e,t)}),r()}function r(){c.forEach(function(e){Meteor.call("removeIssue",l,e._id)})}function s(e){for(var t,o={},r=[],s=0,c=e.length;s<c;++s)t=JSON.stringify(e[s]),o.hasOwnProperty(t)||(o[t]=!0,r.push(e[s]));return r}if("object"!=typeof e)return console.log("Issue regex can not be a string, must be a object");if("string"!=typeof t)return console.log("Invalid title");if("number"!=typeof o)return console.log("Invalid cvss. Variable must be a number");var l=Session.get("projectId"),c=Issues.find({projectId:l,title:{$regex:e}}).fetch();if(1>c.length)return console.log("Did not find any issues with the given regex");var n=Issues.findOne({projectId:l,title:t});void 0!==n&&(c.push(n),Meteor.call("removeIssue",l,n._id)),console.log("Going to merge "+c.length+" issues");var d="",g="",a="",p=[],h=[],f=[];c.forEach(function(e){issue_hosts=getHostList(e),d+="\n\nFrom "+e.title+"\nAffected Hosts: "+issue_hosts+e.description,g+="\n\nFrom "+e.title+"\nAffected Hosts: "+issue_hosts+e.solution,a+="\n\nFrom "+e.title+"\nAffected Hosts: "+issue_hosts+e.evidence,p=p.concat(e.notes),h=h.concat(e.cves),f=f.concat(e.hosts)});var v=s(f),u=s(h);return Meteor.call("createIssue",l,t,o,d,a,g,function(e,t){e?(console.log("Error: could not create new Issue",e.message),n&&console.log("Looks like you lost",n.title)):i(t)}),console.log("Complete")}function mergeIssues(e,t,o,i,r,s,l){function c(e){I.forEach(function(t){Meteor.call("addIssueNote",g,e,t.title,t.content)}),$.forEach(function(t){Meteor.call("addHostToIssue",g,e,t.ipv4,t.port,t.protocol)}),y.forEach(function(t){Meteor.call("addCVE",g,e,t)}),j.forEach(function(t){Meteor.call("addReference",g,e,t.link,t.name)}),n()}function n(){console.log("Removing Issues"),a.forEach(function(e){Meteor.call("removeIssue",g,e._id)})}function d(e){for(var t,o={},r=[],s=0,c=e.length;s<c;++s)t=JSON.stringify(e[s]),o.hasOwnProperty(t)||(o[t]=!0,r.push(e[s]));return r}if("object"!=typeof e)return console.log("Issue regex can not be a string, must be a object");if("string"!=typeof r)return console.log("Invalid title");if("string"!=typeof s)return console.log("Invalid cvss. Variable must be a string");var g=Session.get("projectId"),a=Issues.find({projectId:g,title:{$regex:e},cvss:{$gte:t,$lte:o},"hosts.ipv4":{$regex:i}}).fetch();if(1>a.length)return console.log("Did not find any issues with the given regex");var p=0;if(a.sort(function(e,t){return e.cvss>t.cvss?-1:e.cvss<t.cvss?1:0}),a.forEach(function(e){console.log("CVSS: "+e.cvss+" - Hosts: "+e.hosts.length+" - Title: "+e.title),e.cvss>p&&(p=e.cvss)}),console.log("Total found: "+a.length+" Highest CVSS: "+p),l){"max"===s&&(s=p);var h=Issues.findOne({projectId:g,title:r});void 0!==h&&(a.push(h),Meteor.call("removeIssue",g,h._id)),console.log("Going to merge "+a.length+" issues");var f="",v="",u="",I=[],j=[],m=[],E=[],S=[];a.forEach(function(e){f=f+"CVSS: "+e.cvss+" - Hosts: "+e.hosts.length+" - Title: "+e.title+"\n",v="",u="",j=j.concat(e.references),I=I.concat(e.notes),m=m.concat(e.cves),E=E.concat(e.hosts),S=S.concat(e.files)});var $=d(E),y=d(m);return Meteor.call("createIssue",g,r,s,f,u,v,function(e,t){e?(console.log("Error: could not create new Issue",e.message),h&&console.log("Looks like you lost",h.title)):c(t)}),console.log("Complete")}}function negateHostsByCIDR(){function e(e,t){for(var o="00000000",r=parseInt(e[0],10).toString(2),s=r.length>=o.length?r:o.slice(0,o.length-r.length)+r,l=1;l<=e.length;l++)r=parseInt(e[l],10).toString(2),s+=r.length>=o.length?r:o.slice(0,o.length-r.length)+r;return s.slice(0,parseInt(t,10))}var t=Array.prototype.slice.call(arguments,0),o=Hosts.find({projectId:Session.get("projectId")}).fetch(),i={};for(var r in o.forEach(function(t){var o=t.ipv4.split(".");i[e(o,32)]=t.ipv4}),t.forEach(function(t){t=t.split("/");var o=t[0].split("."),r=e(o,t[1]);for(var s in i)s.slice(0,parseInt(t[1],10))===r&&delete i[s]}),i)console.log(i[r])}function niktoHostList(e,t){function o(e,o){var s=Hosts.findOne({projectId:r,_id:e});s.ipv4+":"+o in i||(i[s.ipv4+":"+o]=!0),t&&s.hostnames.forEach(function(e){!t.test(e)||e+":"+o in i||(i[e+":"+o]=!0)})}if(t&&"object"!=typeof t)return console.log("Domain regex can not be a string, must be an object");var i={},r=Session.get("projectId");for(var s in e.forEach(function(e){var t=[];if("object"==typeof e)t=Services.find({projectId:r,service:{$regex:e}}).fetch(),t.forEach(function(e){o(e.hostId,e.port)});else if("string"==typeof e)for(var l=e.split("-"),c=parseInt(l[0],10);c<=parseInt(l[1],10);c++)t=Services.find({projectId:r,service:c}).fetch(),t.forEach(function(e){o(e.hostId,e.port)});else{var n=Services.findOne({projectId:r,service:e});o(n.hostId,e.port)}}),i)console.log(s)}function niktoTopFindings(e,t){var o={},i=Session.get("projectId"),r=["(.*might be interesting.*)","(.*Public HTTP Methods:.*PUT.*)","(.*[Ww]eb[Dd]av.*)","(.*Directory indexing found.*)","(.*default file found.*)","(.*Server leaks.*IP.*)","(.*OSVDBID:.*)"];if(0<e.length&&(r=e),Services.find({projectId:i}).fetch().forEach(function(e){var s=Hosts.findOne({projectId:i,_id:e.hostId});e.notes.forEach(function(e){if(/Nikto/.test(e.title)){var i=e.title.match(/\(.*\)/);if(t){var l=new RegExp(r.join("|")+"\\n","g"),c=e.content.match(l);c&&(o[s.ipv4+" "+i]||(o[s.ipv4+" "+i]=[]),o[s.ipv4+" "+i].push(c.join("")))}else console.log(s.ipv4+" "+i),console.log(e.content)}})}),t)for(var s in o)console.log(s),console.log(o[s].join(""))}function NormalizeProtocols(){var e=Session.get("projectId"),t=Meteor.user().emails[0].address,o=Services.find({projectId:e}).fetch();if(1>o.length)return void console.log("No services found");var i=0;o.forEach(function(e){e.protocol!=e.protocol.toLowerCase()&&(Services.update({_id:e._id},{$set:{protocol:e.protocol.toLowerCase(),last_modifiedBy:t}}),i++)}),console.log("Total of "+i+" service(s) updated.")}function NormalizeUnknownProducts(){var e=Session.get("projectId"),t=Meteor.user().emails[0].address,o=Services.find({projectId:e}).fetch();if(1>o.length)return void console.log("No services found");var i=0;o.forEach(function(e){"unknown"==e.product.toLowerCase()&&(Services.update({_id:e._id},{$set:{product:"",last_modifiedBy:t}}),i++)}),console.log("Total of "+i+" service(s) updated.")}function removeHostnamesByPattern(e){Hosts.find({projectId:Session.get("projectId")}).fetch().forEach(function(t){var o=[];t.hostnames.forEach(function(t){return t.includes(e)?void console.log("removing "+t):void o.push(t)}),Hosts.update({_id:t._id},{$set:{hostnames:o,lastModifiedBy:Meteor.user().emails[0].address}})})}function removeIPBasedHostnames(){Hosts.find({projectId:Session.get("projectId")}).fetch().forEach(function(e){var t=e.ipv4,o=[];e.hostnames.forEach(function(e){if(e.includes(t))return void console.log("removing "+e);if(e.includes(t.replace(/\./g,"_")))return void console.log("removing "+e);if(e.includes(t.replace(/\./g,"-")))return void console.log("removing "+e);var i=t.split(".").reverse().join(".");return e.includes(i)?void console.log("removing "+e):e.includes(i.replace(/\./g,"_"))?void console.log("removing "+e):e.includes(i.replace(/\./g,"-"))?void console.log("removing "+e):void o.push(e)}),Hosts.update({_id:e._id},{$set:{hostnames:o,lastModifiedBy:Meteor.user().emails[0].address}})})}function removePort0ServicesNoReference(){var e=Session.get("projectId"),t=[],o=[],i=[];Hosts.find({projectId:e}).fetch().forEach(function(o){o._id,Services.find({projectId:e,hostId:o._id}).fetch().forEach(function(e){if(0>=e.port&&1>e.notes){var i={ip:o.ipv4,service:e};t.push(i)}})}),Issues.find({projectId:e}).fetch().forEach(function(e){e.hosts.forEach(function(e){if(0==e.port)for(var i=0;i<t.length;i++)t[i].ip==e.ipv4&&e.protocol==t[i].service.protocol&&o.push(t[i].service._id)})});for(var r=0;r<t.length;r++){for(var s=0;s<o.length;s++)t[r].service._id,o[s];i.push(t[r].service)}console.log("Removing "+i.length+" out of "+t.length+" port 0 services");for(var r=0;r<i.length;r++)console.log("Removing ServiceID: "+i[r]._id),Meteor.call("removeService",e,i[r].hostId,i[r]._id,function(){})}function searchServiceNoteContent(e,t){var o=Session.get("projectId"),i=new RegExp(e,"i"),r=new RegExp(t,"g"),s=[];Services.find({projectId:o,notes:{$elemMatch:{title:{$regex:e,$options:"i"}}}},{notes:1,hostId:1}).fetch().forEach(function(e){e.notes.forEach(function(e){i.test(e.title)&&s.push.apply(s,e.content.match(r))})}),console.log(function(e){for(var t={},o=[],r=0,s=e.length;r<s;++r)t.hasOwnProperty(e[r])||(o.push(e[r]),t[e[r]]=1);return o}(s).join("\n"))}function servicesToColorByHosts(e,t,o){var i=Session.get("projectId"),r=(Meteor.user().emails[0].address,0),s={"lair-red":4,"lair-orange":3,"lair-blue":2,"lair-green":0,"lair-grey":0};if(-1===StatusMap.indexOf(o))throw console.log("Lair Supserviceed colors: "+StatusMap),{name:"Wrong Color",message:"Provided color: \""+o+"\" is not Lair compliant"};e.forEach(function(e){var l=Hosts.findOne({projectId:i,ipv4:e}),c=Services.find({hostId:l._id,port:t}).fetch();1>c.length||c.forEach(function(t){console.log("Updating: "+e+":"+t.port+"/"+t.protocol),Meteor.call("setPortStatus",i,t._id,o),s[o]>s[l.status]&&(console.log("Updating: "+e+" status \""+o+"\""),Meteor.call("setHostStatus",i,l._id,o)),r++})}),console.log(r+" service(s) updated")}function setGlobalServiceByPort(e,t,o){var i=Session.get("projectId");Services.find({projectId:i,port:e,protocol:t,service:{$ne:o}}).forEach(function(e){Meteor.call("setServiceService",i,e._id,o,function(e){e||console.log("Modified service successfully")})})}function setHostOsByOsRegex(e,t,o){var i=Session.get("projectId"),r=Hosts.find({projectId:i,"os.fingerprint":{$regex:e}}).fetch();return 1>r.length?void console.log("No hosts found"):void r.forEach(function(e){Meteor.call("setOs",i,e._id,"Manual",t,o,function(t){return t?void console.log("Unable to update host "+e.ipv4):void console.log("Updated host "+e.ipv4)})})}function setHostServiceByPort(e,t,o,i){var r=Session.get("projectId"),e=Hosts.findOne({projectId:r,ipv4:e});Services.find({projectId:r,hostId:e._id,port:{$in:t},protocol:o,service:{$ne:i}}).forEach(function(e){Meteor.call("setServiceService",r,e._id,i,function(e){e||console.log("Modified service successfully")})})}function tagHostsByCIDR(e,t){function o(e,t){for(var o="00000000",r=parseInt(e[0],10).toString(2),s=r.length>=o.length?r:o.slice(0,o.length-r.length)+r,l=1;l<=e.length;l++)r=parseInt(e[l],10).toString(2),s+=r.length>=o.length?r:o.slice(0,o.length-r.length)+r;return s.slice(0,parseInt(t,10))}var i=Hosts.find({projectId:Session.get("projectId")}).fetch(),r={};i.forEach(function(e){var t=e.ipv4.split(".");r[o(t,32)]=e}),cidr=t.split("/");var t=cidr[0].split("."),s=o(t,cidr[1]);for(var l in r)l.slice(0,parseInt(cidr[1],10))===s&&(!function(e,t){check(e,Matchers.isObjectId),check(t,Matchers.isNonEmptyString),Hosts.update({_id:e},{$addToSet:{tags:t},$set:{lastModifiedBy:Meteor.user().emails[0].address}})}(r[l]._id,e),console.log(r[l]._id,e))}function uniqueServicesByHostsCIDR(){function e(e,t){for(var o="00000000",r=parseInt(e[0],10).toString(2),s=r.length>=o.length?r:o.slice(0,o.length-r.length)+r,l=1;l<=e.length;l++)r=parseInt(e[l],10).toString(2),s+=r.length>=o.length?r:o.slice(0,o.length-r.length)+r;return s.slice(0,parseInt(t,10))}var t=Session.get("projectId"),o=Array.prototype.slice.call(arguments,0),i=Hosts.find({projectId:t}).fetch(),r={},s={},l=[];i.forEach(function(t){var o=t.ipv4.split(".");r[e(o,32)]=t.ipv4,s[t.ipv4]=t._id}),o.forEach(function(t){t=t.split("/");var o=t[0].split("."),i=e(o,t[1]);for(var c in r)c.slice(0,parseInt(t[1],10))===i&&l.push(s[r[c]])});var c=Services.find({projectId:t,hostId:{$in:l}}).fetch();return _.uniq(_.pluck(c,"port")).sort(function(e,t){return e-t}).join(",")}function bulkRemoveHosts(e){var t=Session.get("projectId"),o=Meteor.user().emails[0].address,i=Hosts.find({projectId:t}).fetch();count=0,i.forEach(function(o){e.includes(o.ipv4)&&(Meteor.call("removeHost",t,o._id,function(e){e?console.log("Error removing "+o.ipv4+". "+e):Meteor.call("removeHostFromIssues",t,o._id)}),count++)}),console.log("Total of "+count+" host(s) removed.")}function changeHostsToSpecifiedColorByServicesOrIssues(e,t,o){function i(e,t,o){return!(0!==t)||e.status===o[t-1].status}function r(e,t){Hosts.update({_id:e},{$set:{status:t,lastModifiedBy:d}})}function s(e){return Services.find({projectId:n,hostId:e}).fetch()}function l(e){var t=Hosts.findOne({_id:e}).ipv4;return Issues.find({projectId:n,"hosts.ipv4":t}).fetch()}function c(t){if("services"===e)return s(t);if("issues"===e)return l(t);throw{name:"Incorrect servicesOrIssues Selection",message:"Incorrect servicesOrIssues selection: \""+e+"\" is not a valid servicesOrIssues for this function"}}var n=Session.get("projectId"),d=Meteor.user().emails[0].address,g=0,a=0;if(-1===StatusMap.indexOf(o))throw console.log("Lair Supserviceed colors: "+StatusMap),{name:"Wrong lairColor",message:"Provided lairColor: \""+o+"\" is not Lair compliant"};var p=Hosts.find({projectId:n}).fetch();if("all"===t)p.forEach(function(e){r(e._id,o)}),a=p.length;else if("none"===t)p.forEach(function(e){var t=e._id,i=c(t).length;0>=i&&(r(t,o),g++)}),a=g;else if(-1!==StatusMap.indexOf(t))p.forEach(function(e){var s=!1,l=e._id,n=c(l);s=0<n.length&&n[0].status===t&&n.every(i),s&&(r(l,o),g++),a=g});else if("same"===t)p.forEach(function(e){var t=!1,s=e._id,l=c(s);t=l.every(i),t&&(r(s,o),g++),a=g});else if("diff"===t)p.forEach(function(e){var t=!1,s=e._id,l=c(s);t=!l.every(i),t&&(r(s,o),g++),a=g});else throw{name:"Incorrect statusOption Selection",message:"Incorrect statusOption selection: \""+t+"\" is not a valid statusOption for this function"};console.log("Total of "+a+" host(s) updated")}function changeServicesRegexToSpecifiedColor(e,t){var o=Session.get("projectId"),i=Meteor.user().emails[0].address;if("lair-grey"!==t&&"lair-blue"!==t&&"lair-green"!==t&&"lair-orange"!==t&&"lair-red"!==t)return void console.log("Invalid color specified");var r=Services.find({projectId:o,service:{$regex:e}}).fetch();return 1>r.length?void console.log("No services found"):void(r.forEach(function(e){Services.update({_id:e._id},{$set:{status:t,lastModifiedBy:i}})}),console.log("Total of "+r.length+" service(s) updated to "+t+"."))}function changeServicesToColorByPort(e,t){var o=Session.get("projectId"),i=Meteor.user().emails[0].address;if("lair-grey"!==t&&"lair-blue"!==t&&"lair-green"!==t&&"lair-orange"!==t&&"lair-red"!==t)return void console.log("Invalid color specified");var r=Services.find({projectId:o,port:e}).fetch();return 1>r.length?void console.log("No services found"):void(r.forEach(function(e){Services.update({_id:e._id},{$set:{status:t,last_modifiedBy:i}})}),console.log("Total of "+r.length+" service(s) updated to "+t+"."))}function changeServicesToSpecifiedColor(e,t){var o=Session.get("projectId"),i=Meteor.user().emails[0].address;if("lair-grey"!==t&&"lair-blue"!==t&&"lair-green"!==t&&"lair-orange"!==t&&"lair-red"!==t)return void console.log("Invalid color specified");var r=Services.find({projectId:o,service:e}).fetch();return 1>r.length?void console.log("No services found"):void(r.forEach(function(e){Services.update({_id:e._id},{$set:{status:t,last_modifiedBy:i}})}),console.log("Total of "+r.length+" service(s) updated to "+t+"."))}function changeServicesToSpecifiedColorByProduct(e,t){var o=Session.get("projectId"),i=Meteor.user().emails[0].address;if("lair-grey"!==t&&"lair-blue"!==t&&"lair-green"!==t&&"lair-orange"!==t&&"lair-red"!==t)return void console.log("Invalid color specified");var r=Services.find({projectId:o,product:e}).fetch();return 1>r.length?void console.log("No services found"):void(r.forEach(function(e){Services.update({_id:e._id},{$set:{status:t,last_modifiedBy:i}})}),console.log("Total of "+r.length+" service(s) updated to "+t+"."))}function changeServicesToSpecifiedColor(e,t){var o=Session.get("projectId"),i=Meteor.user().emails[0].address;if("lair-grey"!==t&&"lair-blue"!==t&&"lair-green"!==t&&"lair-orange"!==t&&"lair-red"!==t)return void console.log("Invalid color specified");var r=Services.find({projectId:o,service:e}).fetch();return 1>r.length?void console.log("No services found"):void(r.forEach(function(e){console.log("Updating: "+e.service+"/"+e.protocol),Services.update({_id:e._id},{$set:{status:t,last_modified_by:i}})}),console.log("Total of "+r.length+" service(s) updated"))}function countHostServicesBycolor(e){var t={},o=Session.get("projectId");if(-1===StatusMap.indexOf(e))throw console.log("Lair Supserviceed colors: "+StatusMap),{name:"Wrong color",message:"Provided color: \""+e+"\" is not Lair compliant"};var i=Services.find({projectId:o,status:e}).fetch();for(var r in i.forEach(function(e){r=Hosts.findOne({projectId:o,_id:e.hostId}),t.hasOwnProperty(r.ipv4)?t[r.ipv4]++:t[r.ipv4]=1}),t)console.log(r+" ("+t[r]+")")}function countHostServicesBycolor(e){var t={},o=Session.get("projectId");if(-1===StatusMap.indexOf(e))throw console.log("Lair Supserviceed colors: "+StatusMap),{name:"Wrong color",message:"Provided color: \""+e+"\" is not Lair compliant"};var i=Services.find({projectId:o,status:e}).fetch();for(var r in i.forEach(function(e){r=Hosts.findOne({projectId:o,_id:e.hostId}),t.hasOwnProperty(r.ipv4)?t[r.ipv4]++:t[r.ipv4]=1}),t)console.log(r+" ("+t[r]+")")}function deleteHostServicesByTool(e,t){var o=Session.get("projectId"),i=Hosts.findOne({projectId:o,ipv4:e});if("undefined"==typeof i)return void console.log("No matching host found");var r=Services.find({projectId:o,hostId:i._id,lastModifiedBY:t}).fetch();1>r.length&&console.log("No matching Services found"),r.forEach(function(e){console.log("Removing "+e.protocol+"/"+e.service),Meteor.call("removeService",o,e._id,function(){})}),console.log("Total of "+r.length+" service(s) removed.")}function deleteHostsByCIDR(){function e(e,t){for(var o="00000000",r=parseInt(e[0],10).toString(2),s=r.length>=o.length?r:o.slice(0,o.length-r.length)+r,l=1;l<=e.length;l++)r=parseInt(e[l],10).toString(2),s+=r.length>=o.length?r:o.slice(0,o.length-r.length)+r;return s.slice(0,parseInt(t,10))}var t=Session.get("projectId"),o=Array.prototype.slice.call(arguments,0),i=Hosts.find({projectId:t}).fetch(),r={},s={},l=0;i.forEach(function(t){var o=t.ipv4.split(".");r[e(o,32)]=t.ipv4,s[t.ipv4]=t._id}),o.forEach(function(o){o=o.split("/");var i=o[0].split("."),c=e(i,o[1]);for(var n in r)n.slice(0,parseInt(o[1],10))===c&&(Meteor.call("removeHost",t,s[r[n]],function(e){e||Meteor.call("removeHostFromIssues",t,r[n])}),l++);console.log("Total of "+l+" host(s) removed.")})}function deleteHostsByStatus(e){var t=Session.get("projectId"),o=Hosts.find({projectId:t,status:e}).fetch();return 1>o.length?void console.log("No matching hosts found"):void(o.forEach(function(e){console.log("Removing "+e.ipv4),Meteor.call("removeHost",t,e._id,function(o){o||Meteor.call("removeHostFromIssues",t,e.ipv4)})}),console.log("Total of "+o.length+" host(s) removed."))}function deleteIssuesByStatus(e){var t=Session.get("projectId"),o=Issues.find({projectId:t,status:e}).fetch();return 1>o.length?void console.log("No matching Issues found"):void(o.forEach(function(e){console.log("Removing "+e.title),Meteor.call("removeIssue",t,e._id)}),console.log("Total of "+o.length+" Issue(s) removed."))}function deleteIssuesWithNoHosts(){var e=Session.get("projectId"),t=Issues.find({projectId:e,hosts:{$size:0}}).fetch();return 1>t.length?void console.log("No orphaned issues present"):void(t.forEach(function(t){console.log("Removing: "+t.title),Meteor.call("removeIssue",e,t._id,function(){})}),console.log("Total of "+t.length+" vuln(s) removed"))}function deleteServices(e,t,o){var i=Session.get("projectId"),r=Services.find({projectId:i,port:e,protocol:t,service:o});r.forEach(function(e){console.log("Removing Service : "+e._id+" "+e.port+"/"+e.protocol+" "+e.service),Meteor.call("removeService",i,e.hostId,e._id)})}function dumpIssueEvidence(){var e=Session.get("projectId"),t=Issues.find({projectId:e}).fetch();t.forEach(function(e){console.log(e.title),console.log(e.evidence)})}function dumpServiceNotes(e,t){var o=Session.get("projectId"),i=new RegExp(e,"i"),r=Services.find({projectId:o,notes:{$elemMatch:{title:{$regex:e,$options:"i"}}}},{notes:1,hostId:1}).fetch(),s=_.pluck(r,"hostId"),l=Hosts.find({_id:{$in:s}},{sort:{longIpv4Addr:1},ipv4:1}).fetch();l.forEach(function(e){""!==t&&t!==e.ipv4||(r=Services.find({hostId:e._id},{sort:{service:1},notes:1,service:1,protocol:1}).fetch(),r.forEach(function(t){t.notes.forEach(function(o){i.test(o.title)&&console.log(e.ipv4+":"+t.port+"/"+t.protocol+" - "+o.title+"\n"+o.content)})}))})}function filterHostsNoServices(){}function findNoteByRegex(e,t){var o=Session.get("projectId"),i=new RegExp(e,"i");if("project"===t||"all"===t){console.log("Project Notes");var r=Projects.findOne({_id:o},{notes:1});r.notes.forEach(function(e){(i.test(e.title)||i.test(e.content))&&console.log("\t"+e.title)})}("host"===t||"all"===t)&&(console.log("Host Notes"),Hosts.find({projectId:o,$or:[{notes:{$elemMatch:{title:{$regex:e,$options:"i"}}}},{notes:{$elemMatch:{content:{$regex:e,$options:"i"}}}}]},{notes:1}).fetch().forEach(function(e){e.notes.forEach(function(t){(i.test(t.title)||i.test(t.content))&&console.log("\t"+e.ipv4+" -> "+t.title)})})),("service"===t||"all"===t)&&(console.log("Service Notes"),Services.find({projectId:o,$or:[{notes:{$elemMatch:{title:{$regex:e,$options:"i"}}}},{notes:{$elemMatch:{content:{$regex:e,$options:"i"}}}}]},{notes:1}).fetch().forEach(function(e){e.notes.forEach(function(t){if(i.test(t.title)||i.test(t.content)){var r=Hosts.findOne({projectId:o,_id:e.hostId});console.log("\t"+r.ipv4+" -> "+e.service.toString()+" -> "+t.title)}})})),("Issue"===t||"all"===t)&&(console.log("Issue Notes"),Issues.find({projectId:o,$or:[{evidence:{$regex:e,$options:"i"}},{notes:{$elemMatch:{title:{$regex:e,$options:"i"}}}},{notes:{$elemMatch:{content:{$regex:e,$options:"i"}}}}]},{notes:1}).fetch().forEach(function(e){i.test(e.evidence)&&console.log("\t"+e.title+" -> Evidence Field"),e.notes.forEach(function(t){(i.test(t.title)||i.test(t.content))&&console.log("\t"+e.title+" -> "+t.title)})}))}function generateIssueBulkListByRegex(e){var t=Session.get("projectId"),o=Services.find({projectId:t,service:{$regex:e}}).fetch(),i=[];o.forEach(function(e){var o=Hosts.findOne({projectId:t,_id:e.hostId});i.push(o.ipv4+","+e.port+","+e.protocol)}),console.log(i.join("\n"))}function generatePortStringFromService(e){var t=Session.get("projectId"),o=Services.find({projectId:t,service:e}).fetch();return _.uniq(_.pluck(o,"port")).sort(function(e,t){return e-t}).join(",")}function generateUniquePortString(e){var t=Session.get("projectId"),o={projectId:t};"undefined"!=typeof e&&(o.protocol=e);var i=Services.find(o).fetch();return _.uniq(_.pluck(i,"port")).sort(function(e,t){return e-t}).join(",")}function generateURLList(){var e=Session.get("projectId"),t=Hosts.find({projectId:e}).fetch();if(!t)return void console.log("No hosts found");var o=0,i=[];t.forEach(function(t){var r=t.hostnames,s=t._id,l={projectId:e,hostId:s};l.service={$regex:"web|www|ssl|http|https",$options:"i"};var c=Services.find(l).fetch();c.forEach(function(e){var s="http://";e.service.match(/(ssl|https)/gi)&&(s="https://"),o++,i.push(s+t.ipv4+":"+e.port),r.forEach(function(t){o++,i.push(s+t+":"+e.port)})})}),console.log(i.join("\n")),console.log(o+" URL(s) generated")}function generateWebDiscoTargetList(){var e=Session.get("projectId"),t=Hosts.find({projectId:e}).fetch();if(1>t.length)return void console.log("No hosts found");var o=0;t.forEach(function(t){var i=t.hostnames,r=t._id,s={projectId:e,hostId:r};s.service={$regex:"web|www|ssl|http|https",$options:"i"};var l=Services.find(s).fetch(),c=[];l.forEach(function(e){var r="http";e.service.match(/(ssl|https)/g)&&(r="https"),e.notes.forEach(function(e){e.content.match(/SSL/)&&(r="https")}),o++,c.push(r+","+t.ipv4+","+e.port+","),i.forEach(function(i){o++,c.push(r+","+t.ipv4+","+e.port+","+i)})})}),console.log(urls.join("\n")),console.log(o+" URL(s) generated")}function getHostsByCIDR(){function e(e,t){for(var o="00000000",r=parseInt(e[0],10).toString(2),s=r.length>=o.length?r:o.slice(0,o.length-r.length)+r,l=1;l<=e.length;l++)r=parseInt(e[l],10).toString(2),s+=r.length>=o.length?r:o.slice(0,o.length-r.length)+r;return s.slice(0,parseInt(t,10))}var t=Array.prototype.slice.call(arguments,0),o=Hosts.find({projectId:Session.get("projectId")}).fetch(),i={};o.forEach(function(t){var o=t.ipv4.split(".");i[e(o,32)]=t.ipv4}),t.forEach(function(t){t=t.split("/");var o=t[0].split("."),r=e(o,t[1]);for(var s in i)s.slice(0,parseInt(t[1],10))===r&&console.log(i[s])})}function getPersonByDepartmentRegex(e){if(e&&"object"!=typeof e)return console.log("Department regex can not be a string, must be an object");var t=Session.get("projectId"),o=People.find({projectId:t,department:{$regex:e}}).fetch();o.forEach(function(e){console.log("'"+e.principalName+"','"+e.department+"','"+e.emails.join(" ")+"'")}),console.log("returned: "+o.len()+" results")}function getPersonEmail(){var e=Session.get("projectId"),t=People.find({projectId:e}).fetch();t.forEach(function(e){console.log("'"+e.principalName+"','"+e.department+"','"+e.emails.join(" ")+"'")}),console.log("returned: "+t.length+" results")}function greyHostsNoServicesGreen(){var e=Session.get("projectId"),t=Meteor.user().emails[0].address,o=Hosts.find({projectId:e,status:"lair-grey"}).fetch();if("undefined"==typeof o||0===o.length)return void console.log("No hosts found");var i=0;o.forEach(function(e){var o=Services.find({hostId:e._id,port:{$gt:0}}).count();0===o&&(i++,console.log("Updating: "+e.ipv4),Hosts.update({_id:e._id},{$set:{status:"lair-green",last_modified_by:t}}))}),console.log(i+" host(s) updated")}function hostnamesToNessus(){var e=Hosts.find({projectId:Session.get("projectId")}).fetch(),t=[];e.forEach(function(e){var o=e.ipv4;e.hostnames.forEach(function(e){t.push(e+"["+o+"]")})}),t.forEach(function(e){console.log(e)})}function iisOsProfiler(){var e=Session.get("projectId"),t=Services.find({projectId:e,product:{$regex:/IIS\s(httpd\s)?\d+\.\d+/,$options:"i"}}).fetch();t.forEach(function(t){var o=t.product,i=o.match(/\d+\.\d+/);if(null!==i){var r=parseFloat(i[0]);if(!isNaN(r)){var s=Models.os();s.tool="IIS OS Profiler",s.weight=90,6>r?s.fingerprint="Microsoft Windows Server 2000":7>r?s.fingerprint="Microsoft Windows Server 2003":8>r?s.fingerprint="Microsoft Windows Server 2008":9>r?s.fingerprint="Microsoft Windows Server 2012":11>r&&(s.fingerprint="Microsoft Windows Server 2016"),""!==s.fingerprint&&Meteor.call("setOs",e,t.hostId,s.tool,s.fingerprint,s.weight,function(e){e?console.log("Error generating OS for",t.hostId,e):console.log("Created new OS",s.fingerprint,"for",t.hostId)})}}})}function listHostServicesBycolor(e){var t=Session.get("projectId");if(-1===StatusMap.indexOf(e))throw console.log("Lair Supserviceed colors: "+StatusMap),{name:"Wrong color",message:"Provided color: \""+e+"\" is not Lair compliant"};var o=Services.find({projectId:t,status:e}).fetch();o.forEach(function(e){var o=Hosts.findOne({projectId:t,_id:e.hostId});console.log(o.ipv4+":"+e.port+"/"+e.protocol)})}function listHostServicesByServiceRegex(e){var t=Session.get("projectId"),o=Services.find({projectId:t,service:{$regex:e}}).fetch();return 1>o.length?void console.log("No services found"):void o.forEach(function(e){var o=Hosts.findOne({projectId:t,_id:e.hostId});console.log(o.ipv4+":"+e.port+"/"+e.protocol)})}function listHostsByIssueTitle(e){var t=Session.get("projectId"),o=Issues.findOne({projectId:t,title:e}),i="";if(!o)return void console.log("Issue not found");var r=o.hosts;r.forEach(function(e){console.log(e.ipv4+":"+e.port+"/"+e.protocol),i+=e.ipv4+", "}),console.log("RHOSTS: "+i.slice(0,-2))}function listHostsByIssueTitleRegex(e){var t=Session.get("projectId"),o=Issues.find({projectId:t,title:{$regex:e}}).fetch(),i="";return 1>o.length?void console.log("No issues found"):void o.forEach(function(e){console.log(e.title);var t=e.hosts;t.forEach(function(e){console.log(e.ipv4+":"+e.port+"/"+e.protocol),i+=e.ipv4+", "}),console.log("RHOSTS: "+i.slice(0,-2)),i=""})}function listHostByTag(e){var t=Hosts.find({projectId:Session.get("projectId"),tags:e}).fetch();t.forEach(function(e){console.log(e.ipv4)})}function listUnknownOpenServices(e,t){var o=Session.get("projectId"),i=[],r=[],s=[],l=Hosts.find({projectId:o}).fetch();if(l.forEach(function(l){var c=Services.find({projectId:o,hostId:l._id}).fetch();c.forEach(function(t){0<t.port&&("product"===e?"unknown"===t.product.toLowerCase()&&(i.push(l.ipv4),"tcp"===t.protocol?r.push(t.port):"udp"===t.protocol&&s.push(t.port)):"service"===e?"unknown"===t.service.toLowerCase()&&(i.push(l.ipv4),"tcp"===t.protocol?r.push(t.port):"udp"===t.protocol&&s.push(t.port)):"both"==e&&("unknown"===t.service.toLowerCase()||"unknown"===t.product.toLowerCase())&&(i.push(l.ipv4),"tcp"===t.protocol?r.push(t.port):"udp"===t.protocol&&s.push(t.port)))}),"nmap"===t&&(0<r.length&&0<s.length?console.log("nmap -v -sV --version-all -sS -sU "+l.ipv4+" -p T:"+r.toString()+",U:"+s.toString()):0<r.length?console.log("nmap -v -sV --version-all -sS "+l.ipv4+" -p "+r.toString()):0<s.length&&console.log("nmap -v -sV --version-all -sU "+l.ipv4+" -p "+s.toString()),r=[],s=[]),"hostAndPort"===t&&(0<r.length&&r.forEach(function(e){console.log(l.ipv4+":"+e.toString())}),0<s.length&&s.forEach(function(e){console.log(l.ipv4+":"+e.toString())}))}),(0<r.length||0<s.length)&&"list"===t){var c=r.filter(function(e,t){return r.indexOf(e)===t}),n=s.filter(function(e,t){return s.indexOf(e)===t});console.log("Hosts:"),console.log(i.toString()),console.log("TCP Services:"),console.log(c.sort(function(e,t){return e-t}).toString()),console.log("UDP Services:"),console.log(n.sort(function(e,t){return e-t}).toString())}}function mergeDuplicateIssues(){for(var e=Session.get("projectId"),t=Issues.find({projectId:e}).fetch(),o=t.sort((e,t)=>e.title>t.title?1:-1),r=Hosts.find({projectId:e}).fetch(),s=0;s<o.length-1;s++)source=o[s+1],dest=o[s],source.title==dest.title&&source.cvss==dest.cvss&&(console.log("found match: "+dest.title),console.log(source.hosts.length+" hosts to move."),source.notes.forEach(function(t){console.log("Adding Note"),Meteor.call("addIssueNote",e,dest._id,t.title,t.content)}),source.hosts.forEach(function(t){r.forEach(function(o){var i=Services.findOne({projectId:e,hostId:o._id,port:t.port,protocol:t.protocol});o.ipv4==t.ipv4&&null!=i&&(console.log("Added "+t.ipv4+" to "+dest.title),Meteor.call("removeHostFromIssue",e,source._id,t.ipv4,t.port,t.protocol),Meteor.call("addHostToIssue",e,dest._id,t.ipv4,t.port,t.protocol))})}),source.cves.forEach(function(t){dest.cves.includes(t)||(console.log("Adding CVE "+t),Meteor.call("addCVE",e,dest._id,t))}),source.evidence!=dest.evidence&&(dest.evidence+="\n\n"+source.evidence,console.log("Updating Evidence."),Meteor.call("setIssueEvidence",e,dest._id,dest.evidence)),console.log("Removing issue."),Meteor.call("removeIssue",e,source._id))}function mergeIssues(e,t,o,i,r,s,l){function c(e){I.forEach(function(t){Meteor.call("addIssueNote",g,e,t.title,t.content)}),$.forEach(function(t){Meteor.call("addHostToIssue",g,e,t.ipv4,t.port,t.protocol)}),y.forEach(function(t){Meteor.call("addCVE",g,e,t)}),j.forEach(function(t){Meteor.call("addReference",g,e,t.link,t.name)}),n()}function n(){console.log("Removing Issues"),a.forEach(function(e){Meteor.call("removeIssue",g,e._id)})}function d(e){for(var t,o={},r=[],s=0,c=e.length;s<c;++s)t=JSON.stringify(e[s]),o.hasOwnProperty(t)||(o[t]=!0,r.push(e[s]));return r}if("object"!=typeof e)return console.log("Issue regex can not be a string, must be a object");if("string"!=typeof r)return console.log("Invalid title");if("string"!=typeof s)return console.log("Invalid cvss. Variable must be a string");var g=Session.get("projectId"),a=Issues.find({projectId:g,title:{$regex:e},cvss:{$gte:t,$lte:o},"hosts.ipv4":{$regex:i}}).fetch();if(1>a.length)return console.log("Did not find any issues with the given regex");var p=0;if(a.sort(function(e,t){return e.cvss>t.cvss?-1:e.cvss<t.cvss?1:0}),a.forEach(function(e){console.log("CVSS: "+e.cvss+" - Hosts: "+e.hosts.length+" - Title: "+e.title),e.cvss>p&&(p=e.cvss)}),console.log("Total found: "+a.length+" Highest CVSS: "+p),l){"max"===s&&(s=p);var h=Issues.findOne({projectId:g,title:r});"undefined"!=typeof h&&(a.push(h),Meteor.call("removeIssue",g,h._id)),console.log("Going to merge "+a.length+" issues");var f="",v="",u="",I=[],j=[],m=[],E=[],S=[];a.forEach(function(e){f=f+"CVSS: "+e.cvss+" - Hosts: "+e.hosts.length+" - Title: "+e.title+"\n",v="",u="",j=j.concat(e.references),I=I.concat(e.notes),m=m.concat(e.cves),E=E.concat(e.hosts),S=S.concat(e.files)});var $=d(E),y=d(m);return Meteor.call("createIssue",g,r,s,f,u,v,function(e,t){e?(console.log("Error: could not create new Issue",e.message),h&&console.log("Looks like you lost",h.title)):c(t)}),console.log("Complete")}}function getHostList(e){for(var t="",o=0;o<e.hosts.length;o++)t+=e.hosts[o].ipv4+",";return t+"\n"}function mergeIssuesByTitle(e,t,o){function i(e){p.forEach(function(t){Meteor.call("addIssueNote",l,e,t.title,t.content)}),v.forEach(function(t){Meteor.call("addHostToIssue",l,e,t.ipv4,t.port,t.protocol)}),u.forEach(function(t){Meteor.call("addCVE",l,e,t)}),r()}function r(){c.forEach(function(e){Meteor.call("removeIssue",l,e._id)})}function s(e){for(var t,o={},r=[],s=0,c=e.length;s<c;++s)t=JSON.stringify(e[s]),o.hasOwnProperty(t)||(o[t]=!0,r.push(e[s]));return r}if("object"!=typeof e)return console.log("Issue regex can not be a string, must be a object");if("string"!=typeof t)return console.log("Invalid title");if("number"!=typeof o)return console.log("Invalid cvss. Variable must be a number");var l=Session.get("projectId"),c=Issues.find({projectId:l,title:{$regex:e}}).fetch();if(1>c.length)return console.log("Did not find any issues with the given regex");var n=Issues.findOne({projectId:l,title:t});"undefined"!=typeof n&&(c.push(n),Meteor.call("removeIssue",l,n._id)),console.log("Going to merge "+c.length+" issues");var d="",g="",a="",p=[],h=[],f=[];c.forEach(function(e){issue_hosts=getHostList(e),d+="\n\nFrom "+e.title+"\nAffected Hosts: "+issue_hosts+e.description,g+="\n\nFrom "+e.title+"\nAffected Hosts: "+issue_hosts+e.solution,a+="\n\nFrom "+e.title+"\nAffected Hosts: "+issue_hosts+e.evidence,p=p.concat(e.notes),h=h.concat(e.cves),f=f.concat(e.hosts)});var v=s(f),u=s(h);return Meteor.call("createIssue",l,t,o,d,a,g,function(e,t){e?(console.log("Error: could not create new Issue",e.message),n&&console.log("Looks like you lost",n.title)):i(t)}),console.log("Complete")}function negateHostsByCIDR(){function e(e,t){for(var o="00000000",r=parseInt(e[0],10).toString(2),s=r.length>=o.length?r:o.slice(0,o.length-r.length)+r,l=1;l<=e.length;l++)r=parseInt(e[l],10).toString(2),s+=r.length>=o.length?r:o.slice(0,o.length-r.length)+r;return s.slice(0,parseInt(t,10))}var t=Array.prototype.slice.call(arguments,0),o=Hosts.find({projectId:Session.get("projectId")}).fetch(),i={};for(var r in o.forEach(function(t){var o=t.ipv4.split(".");i[e(o,32)]=t.ipv4}),t.forEach(function(t){t=t.split("/");var o=t[0].split("."),r=e(o,t[1]);for(var s in i)s.slice(0,parseInt(t[1],10))===r&&delete i[s]}),i)console.log(i[r])}function niktoHostList(e,t){function o(e,o){var s=Hosts.findOne({projectId:r,_id:e});s.ipv4+":"+o in i||(i[s.ipv4+":"+o]=!0),t&&s.hostnames.forEach(function(e){t.test(e)&&!(e+":"+o in i)&&(i[e+":"+o]=!0)})}if(t&&"object"!=typeof t)return console.log("Domain regex can not be a string, must be an object");var i={},r=Session.get("projectId");for(var s in e.forEach(function(e){var t=[];if("object"==typeof e)t=Services.find({projectId:r,service:{$regex:e}}).fetch(),t.forEach(function(e){o(e.hostId,e.port)});else if("string"==typeof e)for(var l=e.split("-"),c=parseInt(l[0],10);c<=parseInt(l[1],10);c++)t=Services.find({projectId:r,service:c}).fetch(),t.forEach(function(e){o(e.hostId,e.port)});else{var n=Services.findOne({projectId:r,service:e});o(n.hostId,e.port)}}),i)console.log(s)}function niktoTopFindings(e,t){var o={},i=Session.get("projectId"),r=["(.*might be interesting.*)","(.*Public HTTP Methods:.*PUT.*)","(.*[Ww]eb[Dd]av.*)","(.*Directory indexing found.*)","(.*default file found.*)","(.*Server leaks.*IP.*)","(.*OSVDBID:.*)"];0<e.length&&(r=e);var s=Services.find({projectId:i}).fetch();if(s.forEach(function(e){var s=Hosts.findOne({projectId:i,_id:e.hostId});e.notes.forEach(function(e){if(/Nikto/.test(e.title)){var i=e.title.match(/\(.*\)/);if(t){var l=new RegExp(r.join("|")+"\\n","g"),c=e.content.match(l);c&&(!o[s.ipv4+" "+i]&&(o[s.ipv4+" "+i]=[]),o[s.ipv4+" "+i].push(c.join("")))}else console.log(s.ipv4+" "+i),console.log(e.content)}})}),t)for(var l in o)console.log(l),console.log(o[l].join(""))}function NormalizeProtocols(){var e=Session.get("projectId"),t=Meteor.user().emails[0].address,o=Services.find({projectId:e}).fetch();if(1>o.length)return void console.log("No services found");var i=0;o.forEach(function(e){e.protocol!=e.protocol.toLowerCase()&&(Services.update({_id:e._id},{$set:{protocol:e.protocol.toLowerCase(),last_modifiedBy:t}}),i++)}),console.log("Total of "+i+" service(s) updated.")}function NormalizeUnknownProducts(){var e=Session.get("projectId"),t=Meteor.user().emails[0].address,o=Services.find({projectId:e}).fetch();if(1>o.length)return void console.log("No services found");var i=0;o.forEach(function(e){"unknown"==e.product.toLowerCase()&&(Services.update({_id:e._id},{$set:{product:"",last_modifiedBy:t}}),i++)}),console.log("Total of "+i+" service(s) updated.")}function removePort0ServicesNoReference(){var e=Session.get("projectId"),t=[],o=[],i=[],r=Hosts.find({projectId:e}).fetch();r.forEach(function(o){var i=o._id,r=Services.find({projectId:e,hostId:o._id}).fetch();r.forEach(function(e){if(0>=e.port&&1>e.notes){var i={ip:o.ipv4,service:e};t.push(i)}})});var s=Issues.find({projectId:e}).fetch();s.forEach(function(e){e.hosts.forEach(function(e){if(0==e.port)for(var i=0;i<t.length;i++)t[i].ip==e.ipv4&&e.protocol==t[i].service.protocol&&o.push(t[i].service._id)})});for(var l=0;l<t.length;l++){for(var c=0;c<o.length;c++)if(t[l].service._id==o[c])continue;i.push(t[l].service)}console.log("Removing "+i.length+" out of "+t.length+" port 0 services");for(var l=0;l<i.length;l++)console.log("Removing ServiceID: "+i[l]._id),Meteor.call("removeService",e,i[l].hostId,i[l]._id,function(){})}function removeIPBasedHostnames(){var e=Hosts.find({projectId:Session.get("projectId")}).fetch();e.forEach(function(e){var t=e.ipv4,o=[];e.hostnames.forEach(function(e){if(e.includes(t))return void console.log("removing "+e);if(e.includes(t.replace(/\./g,"_")))return void console.log("removing "+e);if(e.includes(t.replace(/\./g,"-")))return void console.log("removing "+e);var i=t.split(".").reverse().join(".");return e.includes(i)?void console.log("removing "+e):e.includes(i.replace(/\./g,"_"))?void console.log("removing "+e):e.includes(i.replace(/\./g,"-"))?void console.log("removing "+e):void o.push(e)}),Hosts.update({_id:e._id},{$set:{hostnames:o,lastModifiedBy:Meteor.user().emails[0].address}})})}function removeHostnamesByPattern(e){var t=Hosts.find({projectId:Session.get("projectId")}).fetch();t.forEach(function(t){var o=[];t.hostnames.forEach(function(t){return t.includes(e)?void console.log("removing "+t):void o.push(t)}),Hosts.update({_id:t._id},{$set:{hostnames:o,lastModifiedBy:Meteor.user().emails[0].address}})})}function searchServiceNoteContent(e,t){var o=Session.get("projectId"),i=new RegExp(e,"i"),r=new RegExp(t,"g"),s=[],l=Services.find({projectId:o,notes:{$elemMatch:{title:{$regex:e,$options:"i"}}}},{notes:1,hostId:1}).fetch();l.forEach(function(e){e.notes.forEach(function(e){i.test(e.title)&&s.push.apply(s,e.content.match(r))})}),console.log(function(e){for(var t={},o=[],r=0,s=e.length;r<s;++r)t.hasOwnProperty(e[r])||(o.push(e[r]),t[e[r]]=1);return o}(s).join("\n"))}function servicesToColorByHosts(e,t,o){var i=Session.get("projectId"),r=Meteor.user().emails[0].address,s=0,l={"lair-red":4,"lair-orange":3,"lair-blue":2,"lair-green":0,"lair-grey":0};if(-1===StatusMap.indexOf(o))throw console.log("Lair Supserviceed colors: "+StatusMap),{name:"Wrong Color",message:"Provided color: \""+o+"\" is not Lair compliant"};e.forEach(function(e){var r=Hosts.findOne({projectId:i,ipv4:e}),c=Services.find({hostId:r._id,port:t}).fetch();1>c.length||c.forEach(function(t){console.log("Updating: "+e+":"+t.port+"/"+t.protocol),Meteor.call("setPortStatus",i,t._id,o),l[o]>l[r.status]&&(console.log("Updating: "+e+" status \""+o+"\""),Meteor.call("setHostStatus",i,r._id,o)),s++})}),console.log(s+" service(s) updated")}function setGlobalServiceByPort(e,t,o){var i=Session.get("projectId"),r=Services.find({projectId:i,port:e,protocol:t,service:{$ne:o}});r.forEach(function(e){Meteor.call("setServiceService",i,e._id,o,function(e){e||console.log("Modified service successfully")})})}function setHostOsByOsRegex(e,t,o){var i=Session.get("projectId"),r=Hosts.find({projectId:i,"os.fingerprint":{$regex:e}}).fetch();return 1>r.length?void console.log("No hosts found"):void r.forEach(function(e){Meteor.call("setOs",i,e._id,"Manual",t,o,function(t){return t?void console.log("Unable to update host "+e.ipv4):void console.log("Updated host "+e.ipv4)})})}function setHostServiceByPort(e,t,o,i){var r=Session.get("projectId"),e=Hosts.findOne({projectId:r,ipv4:e}),s=Services.find({projectId:r,hostId:e._id,port:{$in:t},protocol:o,service:{$ne:i}});s.forEach(function(e){Meteor.call("setServiceService",r,e._id,i,function(e){e||console.log("Modified service successfully")})})}function tagHostsByCIDR(e,t){function o(e,t){return check(e,Matchers.isObjectId),check(t,Matchers.isNonEmptyString),Hosts.update({_id:e},{$addToSet:{tags:t},$set:{lastModifiedBy:Meteor.user().emails[0].address}})}function i(e,t){for(var o="00000000",r=parseInt(e[0],10).toString(2),s=r.length>=o.length?r:o.slice(0,o.length-r.length)+r,l=1;l<=e.length;l++)r=parseInt(e[l],10).toString(2),s+=r.length>=o.length?r:o.slice(0,o.length-r.length)+r;return s.slice(0,parseInt(t,10))}var r=Hosts.find({projectId:Session.get("projectId")}).fetch(),s={};r.forEach(function(e){var t=e.ipv4.split(".");s[i(t,32)]=e}),cidr=t.split("/");var t=cidr[0].split("."),l=i(t,cidr[1]);for(var c in s)c.slice(0,parseInt(cidr[1],10))===l&&(o(s[c]._id,e),console.log(s[c]._id,e))}function uniqueServicesByHostsCIDR(){function e(e,t){for(var o="00000000",r=parseInt(e[0],10).toString(2),s=r.length>=o.length?r:o.slice(0,o.length-r.length)+r,l=1;l<=e.length;l++)r=parseInt(e[l],10).toString(2),s+=r.length>=o.length?r:o.slice(0,o.length-r.length)+r;return s.slice(0,parseInt(t,10))}var t=Session.get("projectId"),o=Array.prototype.slice.call(arguments,0),i=Hosts.find({projectId:t}).fetch(),r={},s={},l=[];i.forEach(function(t){var o=t.ipv4.split(".");r[e(o,32)]=t.ipv4,s[t.ipv4]=t._id}),o.forEach(function(t){t=t.split("/");var o=t[0].split("."),i=e(o,t[1]);for(var c in r)c.slice(0,parseInt(t[1],10))===i&&l.push(s[r[c]])});var c=Services.find({projectId:t,hostId:{$in:l}}).fetch();return _.uniq(_.pluck(c,"port")).sort(function(e,t){return e-t}).join(",")}